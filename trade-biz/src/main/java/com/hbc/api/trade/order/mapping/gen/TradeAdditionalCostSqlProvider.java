package com.hbc.api.trade.order.mapping.gen;

import com.hbc.api.trade.order.mapping.gen.bean.TradeAdditionalCost;
import com.hbc.api.trade.order.mapping.gen.bean.TradeAdditionalCostExample.Criteria;
import com.hbc.api.trade.order.mapping.gen.bean.TradeAdditionalCostExample.Criterion;
import com.hbc.api.trade.order.mapping.gen.bean.TradeAdditionalCostExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class TradeAdditionalCostSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_additional_cost`
     *
     * @mbggenerated
     */
    public String countByExample(TradeAdditionalCostExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("`trade_additional_cost`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_additional_cost`
     *
     * @mbggenerated
     */
    public String deleteByExample(TradeAdditionalCostExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("`trade_additional_cost`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_additional_cost`
     *
     * @mbggenerated
     */
    public String insertSelective(TradeAdditionalCost record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("`trade_additional_cost`");
        
        if (record.getAdditionalNo() != null) {
            sql.VALUES("additional_no", "#{additionalNo,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideId() != null) {
            sql.VALUES("guide_id", "#{guideId,jdbcType=INTEGER}");
        }
        
        if (record.getAdditionStatus() != null) {
            sql.VALUES("addition_status", "#{additionStatus,jdbcType=INTEGER}");
        }
        
        if (record.getOrderNo() != null) {
            sql.VALUES("order_no", "#{orderNo,jdbcType=VARCHAR}");
        }
        
        if (record.getApplyPrice() != null) {
            sql.VALUES("apply_price", "#{applyPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getOverTimeCost() != null) {
            sql.VALUES("over_time_cost", "#{overTimeCost,jdbcType=DOUBLE}");
        }
        
        if (record.getOverDistanceCost() != null) {
            sql.VALUES("over_distance_cost", "#{overDistanceCost,jdbcType=DOUBLE}");
        }
        
        if (record.getOverDayCost() != null) {
            sql.VALUES("over_day_cost", "#{overDayCost,jdbcType=DOUBLE}");
        }
        
        if (record.getAdditionIsRead() != null) {
            sql.VALUES("addition_is_read", "#{additionIsRead,jdbcType=INTEGER}");
        }
        
        if (record.getOverPayCost() != null) {
            sql.VALUES("over_pay_cost", "#{overPayCost,jdbcType=DOUBLE}");
        }
        
        if (record.getOverWaitTimeCost() != null) {
            sql.VALUES("over_wait_time_cost", "#{overWaitTimeCost,jdbcType=DOUBLE}");
        }
        
        if (record.getOtherCost1() != null) {
            sql.VALUES("other_cost1", "#{otherCost1,jdbcType=DOUBLE}");
        }
        
        if (record.getOtherCost2() != null) {
            sql.VALUES("other_cost2", "#{otherCost2,jdbcType=DOUBLE}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getReason() != null) {
            sql.VALUES("reason", "#{reason,jdbcType=LONGVARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_additional_cost`
     *
     * @mbggenerated
     */
    public String selectByExampleWithBLOBs(TradeAdditionalCostExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("additional_no");
        } else {
            sql.SELECT("additional_no");
        }
        sql.SELECT("guide_id");
        sql.SELECT("addition_status");
        sql.SELECT("order_no");
        sql.SELECT("apply_price");
        sql.SELECT("over_time_cost");
        sql.SELECT("over_distance_cost");
        sql.SELECT("over_day_cost");
        sql.SELECT("addition_is_read");
        sql.SELECT("over_pay_cost");
        sql.SELECT("over_wait_time_cost");
        sql.SELECT("other_cost1");
        sql.SELECT("other_cost2");
        sql.SELECT("update_time");
        sql.SELECT("create_time");
        sql.SELECT("reason");
        sql.FROM("`trade_additional_cost`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_additional_cost`
     *
     * @mbggenerated
     */
    public String selectByExample(TradeAdditionalCostExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("additional_no");
        } else {
            sql.SELECT("additional_no");
        }
        sql.SELECT("guide_id");
        sql.SELECT("addition_status");
        sql.SELECT("order_no");
        sql.SELECT("apply_price");
        sql.SELECT("over_time_cost");
        sql.SELECT("over_distance_cost");
        sql.SELECT("over_day_cost");
        sql.SELECT("addition_is_read");
        sql.SELECT("over_pay_cost");
        sql.SELECT("over_wait_time_cost");
        sql.SELECT("other_cost1");
        sql.SELECT("other_cost2");
        sql.SELECT("update_time");
        sql.SELECT("create_time");
        sql.FROM("`trade_additional_cost`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_additional_cost`
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        TradeAdditionalCost record = (TradeAdditionalCost) parameter.get("record");
        TradeAdditionalCostExample example = (TradeAdditionalCostExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("`trade_additional_cost`");
        
        if (record.getAdditionalNo() != null) {
            sql.SET("additional_no = #{record.additionalNo,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideId() != null) {
            sql.SET("guide_id = #{record.guideId,jdbcType=INTEGER}");
        }
        
        if (record.getAdditionStatus() != null) {
            sql.SET("addition_status = #{record.additionStatus,jdbcType=INTEGER}");
        }
        
        if (record.getOrderNo() != null) {
            sql.SET("order_no = #{record.orderNo,jdbcType=VARCHAR}");
        }
        
        if (record.getApplyPrice() != null) {
            sql.SET("apply_price = #{record.applyPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getOverTimeCost() != null) {
            sql.SET("over_time_cost = #{record.overTimeCost,jdbcType=DOUBLE}");
        }
        
        if (record.getOverDistanceCost() != null) {
            sql.SET("over_distance_cost = #{record.overDistanceCost,jdbcType=DOUBLE}");
        }
        
        if (record.getOverDayCost() != null) {
            sql.SET("over_day_cost = #{record.overDayCost,jdbcType=DOUBLE}");
        }
        
        if (record.getAdditionIsRead() != null) {
            sql.SET("addition_is_read = #{record.additionIsRead,jdbcType=INTEGER}");
        }
        
        if (record.getOverPayCost() != null) {
            sql.SET("over_pay_cost = #{record.overPayCost,jdbcType=DOUBLE}");
        }
        
        if (record.getOverWaitTimeCost() != null) {
            sql.SET("over_wait_time_cost = #{record.overWaitTimeCost,jdbcType=DOUBLE}");
        }
        
        if (record.getOtherCost1() != null) {
            sql.SET("other_cost1 = #{record.otherCost1,jdbcType=DOUBLE}");
        }
        
        if (record.getOtherCost2() != null) {
            sql.SET("other_cost2 = #{record.otherCost2,jdbcType=DOUBLE}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getReason() != null) {
            sql.SET("reason = #{record.reason,jdbcType=LONGVARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_additional_cost`
     *
     * @mbggenerated
     */
    public String updateByExampleWithBLOBs(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`trade_additional_cost`");
        
        sql.SET("additional_no = #{record.additionalNo,jdbcType=VARCHAR}");
        sql.SET("guide_id = #{record.guideId,jdbcType=INTEGER}");
        sql.SET("addition_status = #{record.additionStatus,jdbcType=INTEGER}");
        sql.SET("order_no = #{record.orderNo,jdbcType=VARCHAR}");
        sql.SET("apply_price = #{record.applyPrice,jdbcType=DOUBLE}");
        sql.SET("over_time_cost = #{record.overTimeCost,jdbcType=DOUBLE}");
        sql.SET("over_distance_cost = #{record.overDistanceCost,jdbcType=DOUBLE}");
        sql.SET("over_day_cost = #{record.overDayCost,jdbcType=DOUBLE}");
        sql.SET("addition_is_read = #{record.additionIsRead,jdbcType=INTEGER}");
        sql.SET("over_pay_cost = #{record.overPayCost,jdbcType=DOUBLE}");
        sql.SET("over_wait_time_cost = #{record.overWaitTimeCost,jdbcType=DOUBLE}");
        sql.SET("other_cost1 = #{record.otherCost1,jdbcType=DOUBLE}");
        sql.SET("other_cost2 = #{record.otherCost2,jdbcType=DOUBLE}");
        sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        sql.SET("reason = #{record.reason,jdbcType=LONGVARCHAR}");
        
        TradeAdditionalCostExample example = (TradeAdditionalCostExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_additional_cost`
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`trade_additional_cost`");
        
        sql.SET("additional_no = #{record.additionalNo,jdbcType=VARCHAR}");
        sql.SET("guide_id = #{record.guideId,jdbcType=INTEGER}");
        sql.SET("addition_status = #{record.additionStatus,jdbcType=INTEGER}");
        sql.SET("order_no = #{record.orderNo,jdbcType=VARCHAR}");
        sql.SET("apply_price = #{record.applyPrice,jdbcType=DOUBLE}");
        sql.SET("over_time_cost = #{record.overTimeCost,jdbcType=DOUBLE}");
        sql.SET("over_distance_cost = #{record.overDistanceCost,jdbcType=DOUBLE}");
        sql.SET("over_day_cost = #{record.overDayCost,jdbcType=DOUBLE}");
        sql.SET("addition_is_read = #{record.additionIsRead,jdbcType=INTEGER}");
        sql.SET("over_pay_cost = #{record.overPayCost,jdbcType=DOUBLE}");
        sql.SET("over_wait_time_cost = #{record.overWaitTimeCost,jdbcType=DOUBLE}");
        sql.SET("other_cost1 = #{record.otherCost1,jdbcType=DOUBLE}");
        sql.SET("other_cost2 = #{record.otherCost2,jdbcType=DOUBLE}");
        sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        
        TradeAdditionalCostExample example = (TradeAdditionalCostExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_additional_cost`
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(TradeAdditionalCost record) {
        SQL sql = new SQL();
        sql.UPDATE("`trade_additional_cost`");
        
        if (record.getGuideId() != null) {
            sql.SET("guide_id = #{guideId,jdbcType=INTEGER}");
        }
        
        if (record.getAdditionStatus() != null) {
            sql.SET("addition_status = #{additionStatus,jdbcType=INTEGER}");
        }
        
        if (record.getOrderNo() != null) {
            sql.SET("order_no = #{orderNo,jdbcType=VARCHAR}");
        }
        
        if (record.getApplyPrice() != null) {
            sql.SET("apply_price = #{applyPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getOverTimeCost() != null) {
            sql.SET("over_time_cost = #{overTimeCost,jdbcType=DOUBLE}");
        }
        
        if (record.getOverDistanceCost() != null) {
            sql.SET("over_distance_cost = #{overDistanceCost,jdbcType=DOUBLE}");
        }
        
        if (record.getOverDayCost() != null) {
            sql.SET("over_day_cost = #{overDayCost,jdbcType=DOUBLE}");
        }
        
        if (record.getAdditionIsRead() != null) {
            sql.SET("addition_is_read = #{additionIsRead,jdbcType=INTEGER}");
        }
        
        if (record.getOverPayCost() != null) {
            sql.SET("over_pay_cost = #{overPayCost,jdbcType=DOUBLE}");
        }
        
        if (record.getOverWaitTimeCost() != null) {
            sql.SET("over_wait_time_cost = #{overWaitTimeCost,jdbcType=DOUBLE}");
        }
        
        if (record.getOtherCost1() != null) {
            sql.SET("other_cost1 = #{otherCost1,jdbcType=DOUBLE}");
        }
        
        if (record.getOtherCost2() != null) {
            sql.SET("other_cost2 = #{otherCost2,jdbcType=DOUBLE}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getReason() != null) {
            sql.SET("reason = #{reason,jdbcType=LONGVARCHAR}");
        }
        
        sql.WHERE("additional_no = #{additionalNo,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_additional_cost`
     *
     * @mbggenerated
     */
    protected void applyWhere(SQL sql, TradeAdditionalCostExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}