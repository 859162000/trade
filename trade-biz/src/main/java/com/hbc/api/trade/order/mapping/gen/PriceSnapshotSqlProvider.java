package com.hbc.api.trade.order.mapping.gen;

import com.hbc.api.trade.order.mapping.gen.bean.PriceSnapshotExample.Criteria;
import com.hbc.api.trade.order.mapping.gen.bean.PriceSnapshotExample.Criterion;
import com.hbc.api.trade.order.mapping.gen.bean.PriceSnapshotExample;
import com.hbc.api.trade.order.mapping.gen.bean.PriceSnapshotWithBLOBs;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class PriceSnapshotSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `price_snapshot`
     *
     * @mbggenerated
     */
    public String countByExample(PriceSnapshotExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("`price_snapshot`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `price_snapshot`
     *
     * @mbggenerated
     */
    public String deleteByExample(PriceSnapshotExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("`price_snapshot`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `price_snapshot`
     *
     * @mbggenerated
     */
    public String insertSelective(PriceSnapshotWithBLOBs record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("`price_snapshot`");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=BIGINT}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getServiceType() != null) {
            sql.VALUES("service_type", "#{serviceType,jdbcType=SMALLINT}");
        }
        
        if (record.getChannel() != null) {
            sql.VALUES("channel", "#{channel,jdbcType=INTEGER}");
        }
        
        if (record.getPricemark() != null) {
            sql.VALUES("pricemark", "#{pricemark,jdbcType=VARCHAR}");
        }
        
        if (record.getCurrencyRate() != null) {
            sql.VALUES("currency_rate", "#{currencyRate,jdbcType=REAL}");
        }
        
        if (record.getCarType() != null) {
            sql.VALUES("car_type", "#{carType,jdbcType=SMALLINT}");
        }
        
        if (record.getSeatCategory() != null) {
            sql.VALUES("seat_category", "#{seatCategory,jdbcType=SMALLINT}");
        }
        
        if (record.getCityId() != null) {
            sql.VALUES("city_id", "#{cityId,jdbcType=INTEGER}");
        }
        
        if (record.getAirportId() != null) {
            sql.VALUES("airport_id", "#{airportId,jdbcType=INTEGER}");
        }
        
        if (record.getAirportCode() != null) {
            sql.VALUES("airport_code", "#{airportCode,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceDate() != null) {
            sql.VALUES("service_date", "#{serviceDate,jdbcType=VARCHAR}");
        }
        
        if (record.getStartLocation() != null) {
            sql.VALUES("start_location", "#{startLocation,jdbcType=VARCHAR}");
        }
        
        if (record.getEndLocation() != null) {
            sql.VALUES("end_location", "#{endLocation,jdbcType=VARCHAR}");
        }
        
        if (record.getIsUrgent() != null) {
            sql.VALUES("is_urgent", "#{isUrgent,jdbcType=TINYINT}");
        }
        
        if (record.getSysPrice() != null) {
            sql.VALUES("sys_price", "#{sysPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getTicketPrice() != null) {
            sql.VALUES("ticket_price", "#{ticketPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getGuidePrice() != null) {
            sql.VALUES("guide_price", "#{guidePrice,jdbcType=DOUBLE}");
        }
        
        if (record.getChannelPrice() != null) {
            sql.VALUES("channel_price", "#{channelPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getSysSlices() != null) {
            sql.VALUES("sys_slices", "#{sysSlices,jdbcType=VARCHAR}");
        }
        
        if (record.getTicketSlices() != null) {
            sql.VALUES("ticket_slices", "#{ticketSlices,jdbcType=VARCHAR}");
        }
        
        if (record.getChannelSlices() != null) {
            sql.VALUES("channel_slices", "#{channelSlices,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideSlices() != null) {
            sql.VALUES("guide_slices", "#{guideSlices,jdbcType=VARCHAR}");
        }
        
        if (record.getPriceFactor() != null) {
            sql.VALUES("price_factor", "#{priceFactor,jdbcType=VARCHAR}");
        }
        
        if (record.getDistance() != null) {
            sql.VALUES("distance", "#{distance,jdbcType=DOUBLE}");
        }
        
        if (record.getEstTime() != null) {
            sql.VALUES("est_time", "#{estTime,jdbcType=INTEGER}");
        }
        
        if (record.getChargePerHour() != null) {
            sql.VALUES("charge_per_hour", "#{chargePerHour,jdbcType=DOUBLE}");
        }
        
        if (record.getChargePerKm() != null) {
            sql.VALUES("charge_per_km", "#{chargePerKm,jdbcType=DOUBLE}");
        }
        
        if (record.getChargePerDay() != null) {
            sql.VALUES("charge_per_day", "#{chargePerDay,jdbcType=DOUBLE}");
        }
        
        if (record.getChargePerMinute() != null) {
            sql.VALUES("charge_per_minute", "#{chargePerMinute,jdbcType=DOUBLE}");
        }
        
        if (record.getExpiredTime() != null) {
            sql.VALUES("expired_time", "#{expiredTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getStatus() != null) {
            sql.VALUES("status", "#{status,jdbcType=TINYINT}");
        }
        
        if (record.getPriceVersion() != null) {
            sql.VALUES("price_version", "#{priceVersion,jdbcType=INTEGER}");
        }
        
        if (record.getSysDetail() != null) {
            sql.VALUES("sys_detail", "#{sysDetail,jdbcType=LONGVARCHAR}");
        }
        
        if (record.getGuideDetail() != null) {
            sql.VALUES("guide_detail", "#{guideDetail,jdbcType=LONGVARCHAR}");
        }
        
        if (record.getChannelDetail() != null) {
            sql.VALUES("channel_detail", "#{channelDetail,jdbcType=LONGVARCHAR}");
        }
        
        if (record.getRule() != null) {
            sql.VALUES("rule", "#{rule,jdbcType=LONGVARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `price_snapshot`
     *
     * @mbggenerated
     */
    public String selectByExampleWithBLOBs(PriceSnapshotExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("create_time");
        sql.SELECT("update_time");
        sql.SELECT("service_type");
        sql.SELECT("channel");
        sql.SELECT("pricemark");
        sql.SELECT("currency_rate");
        sql.SELECT("car_type");
        sql.SELECT("seat_category");
        sql.SELECT("city_id");
        sql.SELECT("airport_id");
        sql.SELECT("airport_code");
        sql.SELECT("service_date");
        sql.SELECT("start_location");
        sql.SELECT("end_location");
        sql.SELECT("is_urgent");
        sql.SELECT("sys_price");
        sql.SELECT("ticket_price");
        sql.SELECT("guide_price");
        sql.SELECT("channel_price");
        sql.SELECT("sys_slices");
        sql.SELECT("ticket_slices");
        sql.SELECT("channel_slices");
        sql.SELECT("guide_slices");
        sql.SELECT("price_factor");
        sql.SELECT("distance");
        sql.SELECT("est_time");
        sql.SELECT("charge_per_hour");
        sql.SELECT("charge_per_km");
        sql.SELECT("charge_per_day");
        sql.SELECT("charge_per_minute");
        sql.SELECT("expired_time");
        sql.SELECT("status");
        sql.SELECT("price_version");
        sql.SELECT("sys_detail");
        sql.SELECT("guide_detail");
        sql.SELECT("channel_detail");
        sql.SELECT("rule");
        sql.FROM("`price_snapshot`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `price_snapshot`
     *
     * @mbggenerated
     */
    public String selectByExample(PriceSnapshotExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("create_time");
        sql.SELECT("update_time");
        sql.SELECT("service_type");
        sql.SELECT("channel");
        sql.SELECT("pricemark");
        sql.SELECT("currency_rate");
        sql.SELECT("car_type");
        sql.SELECT("seat_category");
        sql.SELECT("city_id");
        sql.SELECT("airport_id");
        sql.SELECT("airport_code");
        sql.SELECT("service_date");
        sql.SELECT("start_location");
        sql.SELECT("end_location");
        sql.SELECT("is_urgent");
        sql.SELECT("sys_price");
        sql.SELECT("ticket_price");
        sql.SELECT("guide_price");
        sql.SELECT("channel_price");
        sql.SELECT("sys_slices");
        sql.SELECT("ticket_slices");
        sql.SELECT("channel_slices");
        sql.SELECT("guide_slices");
        sql.SELECT("price_factor");
        sql.SELECT("distance");
        sql.SELECT("est_time");
        sql.SELECT("charge_per_hour");
        sql.SELECT("charge_per_km");
        sql.SELECT("charge_per_day");
        sql.SELECT("charge_per_minute");
        sql.SELECT("expired_time");
        sql.SELECT("status");
        sql.SELECT("price_version");
        sql.FROM("`price_snapshot`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `price_snapshot`
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        PriceSnapshotWithBLOBs record = (PriceSnapshotWithBLOBs) parameter.get("record");
        PriceSnapshotExample example = (PriceSnapshotExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("`price_snapshot`");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=BIGINT}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getServiceType() != null) {
            sql.SET("service_type = #{record.serviceType,jdbcType=SMALLINT}");
        }
        
        if (record.getChannel() != null) {
            sql.SET("channel = #{record.channel,jdbcType=INTEGER}");
        }
        
        if (record.getPricemark() != null) {
            sql.SET("pricemark = #{record.pricemark,jdbcType=VARCHAR}");
        }
        
        if (record.getCurrencyRate() != null) {
            sql.SET("currency_rate = #{record.currencyRate,jdbcType=REAL}");
        }
        
        if (record.getCarType() != null) {
            sql.SET("car_type = #{record.carType,jdbcType=SMALLINT}");
        }
        
        if (record.getSeatCategory() != null) {
            sql.SET("seat_category = #{record.seatCategory,jdbcType=SMALLINT}");
        }
        
        if (record.getCityId() != null) {
            sql.SET("city_id = #{record.cityId,jdbcType=INTEGER}");
        }
        
        if (record.getAirportId() != null) {
            sql.SET("airport_id = #{record.airportId,jdbcType=INTEGER}");
        }
        
        if (record.getAirportCode() != null) {
            sql.SET("airport_code = #{record.airportCode,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceDate() != null) {
            sql.SET("service_date = #{record.serviceDate,jdbcType=VARCHAR}");
        }
        
        if (record.getStartLocation() != null) {
            sql.SET("start_location = #{record.startLocation,jdbcType=VARCHAR}");
        }
        
        if (record.getEndLocation() != null) {
            sql.SET("end_location = #{record.endLocation,jdbcType=VARCHAR}");
        }
        
        if (record.getIsUrgent() != null) {
            sql.SET("is_urgent = #{record.isUrgent,jdbcType=TINYINT}");
        }
        
        if (record.getSysPrice() != null) {
            sql.SET("sys_price = #{record.sysPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getTicketPrice() != null) {
            sql.SET("ticket_price = #{record.ticketPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getGuidePrice() != null) {
            sql.SET("guide_price = #{record.guidePrice,jdbcType=DOUBLE}");
        }
        
        if (record.getChannelPrice() != null) {
            sql.SET("channel_price = #{record.channelPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getSysSlices() != null) {
            sql.SET("sys_slices = #{record.sysSlices,jdbcType=VARCHAR}");
        }
        
        if (record.getTicketSlices() != null) {
            sql.SET("ticket_slices = #{record.ticketSlices,jdbcType=VARCHAR}");
        }
        
        if (record.getChannelSlices() != null) {
            sql.SET("channel_slices = #{record.channelSlices,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideSlices() != null) {
            sql.SET("guide_slices = #{record.guideSlices,jdbcType=VARCHAR}");
        }
        
        if (record.getPriceFactor() != null) {
            sql.SET("price_factor = #{record.priceFactor,jdbcType=VARCHAR}");
        }
        
        if (record.getDistance() != null) {
            sql.SET("distance = #{record.distance,jdbcType=DOUBLE}");
        }
        
        if (record.getEstTime() != null) {
            sql.SET("est_time = #{record.estTime,jdbcType=INTEGER}");
        }
        
        if (record.getChargePerHour() != null) {
            sql.SET("charge_per_hour = #{record.chargePerHour,jdbcType=DOUBLE}");
        }
        
        if (record.getChargePerKm() != null) {
            sql.SET("charge_per_km = #{record.chargePerKm,jdbcType=DOUBLE}");
        }
        
        if (record.getChargePerDay() != null) {
            sql.SET("charge_per_day = #{record.chargePerDay,jdbcType=DOUBLE}");
        }
        
        if (record.getChargePerMinute() != null) {
            sql.SET("charge_per_minute = #{record.chargePerMinute,jdbcType=DOUBLE}");
        }
        
        if (record.getExpiredTime() != null) {
            sql.SET("expired_time = #{record.expiredTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{record.status,jdbcType=TINYINT}");
        }
        
        if (record.getPriceVersion() != null) {
            sql.SET("price_version = #{record.priceVersion,jdbcType=INTEGER}");
        }
        
        if (record.getSysDetail() != null) {
            sql.SET("sys_detail = #{record.sysDetail,jdbcType=LONGVARCHAR}");
        }
        
        if (record.getGuideDetail() != null) {
            sql.SET("guide_detail = #{record.guideDetail,jdbcType=LONGVARCHAR}");
        }
        
        if (record.getChannelDetail() != null) {
            sql.SET("channel_detail = #{record.channelDetail,jdbcType=LONGVARCHAR}");
        }
        
        if (record.getRule() != null) {
            sql.SET("rule = #{record.rule,jdbcType=LONGVARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `price_snapshot`
     *
     * @mbggenerated
     */
    public String updateByExampleWithBLOBs(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`price_snapshot`");
        
        sql.SET("id = #{record.id,jdbcType=BIGINT}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        sql.SET("service_type = #{record.serviceType,jdbcType=SMALLINT}");
        sql.SET("channel = #{record.channel,jdbcType=INTEGER}");
        sql.SET("pricemark = #{record.pricemark,jdbcType=VARCHAR}");
        sql.SET("currency_rate = #{record.currencyRate,jdbcType=REAL}");
        sql.SET("car_type = #{record.carType,jdbcType=SMALLINT}");
        sql.SET("seat_category = #{record.seatCategory,jdbcType=SMALLINT}");
        sql.SET("city_id = #{record.cityId,jdbcType=INTEGER}");
        sql.SET("airport_id = #{record.airportId,jdbcType=INTEGER}");
        sql.SET("airport_code = #{record.airportCode,jdbcType=VARCHAR}");
        sql.SET("service_date = #{record.serviceDate,jdbcType=VARCHAR}");
        sql.SET("start_location = #{record.startLocation,jdbcType=VARCHAR}");
        sql.SET("end_location = #{record.endLocation,jdbcType=VARCHAR}");
        sql.SET("is_urgent = #{record.isUrgent,jdbcType=TINYINT}");
        sql.SET("sys_price = #{record.sysPrice,jdbcType=DOUBLE}");
        sql.SET("ticket_price = #{record.ticketPrice,jdbcType=DOUBLE}");
        sql.SET("guide_price = #{record.guidePrice,jdbcType=DOUBLE}");
        sql.SET("channel_price = #{record.channelPrice,jdbcType=DOUBLE}");
        sql.SET("sys_slices = #{record.sysSlices,jdbcType=VARCHAR}");
        sql.SET("ticket_slices = #{record.ticketSlices,jdbcType=VARCHAR}");
        sql.SET("channel_slices = #{record.channelSlices,jdbcType=VARCHAR}");
        sql.SET("guide_slices = #{record.guideSlices,jdbcType=VARCHAR}");
        sql.SET("price_factor = #{record.priceFactor,jdbcType=VARCHAR}");
        sql.SET("distance = #{record.distance,jdbcType=DOUBLE}");
        sql.SET("est_time = #{record.estTime,jdbcType=INTEGER}");
        sql.SET("charge_per_hour = #{record.chargePerHour,jdbcType=DOUBLE}");
        sql.SET("charge_per_km = #{record.chargePerKm,jdbcType=DOUBLE}");
        sql.SET("charge_per_day = #{record.chargePerDay,jdbcType=DOUBLE}");
        sql.SET("charge_per_minute = #{record.chargePerMinute,jdbcType=DOUBLE}");
        sql.SET("expired_time = #{record.expiredTime,jdbcType=TIMESTAMP}");
        sql.SET("status = #{record.status,jdbcType=TINYINT}");
        sql.SET("price_version = #{record.priceVersion,jdbcType=INTEGER}");
        sql.SET("sys_detail = #{record.sysDetail,jdbcType=LONGVARCHAR}");
        sql.SET("guide_detail = #{record.guideDetail,jdbcType=LONGVARCHAR}");
        sql.SET("channel_detail = #{record.channelDetail,jdbcType=LONGVARCHAR}");
        sql.SET("rule = #{record.rule,jdbcType=LONGVARCHAR}");
        
        PriceSnapshotExample example = (PriceSnapshotExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `price_snapshot`
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`price_snapshot`");
        
        sql.SET("id = #{record.id,jdbcType=BIGINT}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        sql.SET("service_type = #{record.serviceType,jdbcType=SMALLINT}");
        sql.SET("channel = #{record.channel,jdbcType=INTEGER}");
        sql.SET("pricemark = #{record.pricemark,jdbcType=VARCHAR}");
        sql.SET("currency_rate = #{record.currencyRate,jdbcType=REAL}");
        sql.SET("car_type = #{record.carType,jdbcType=SMALLINT}");
        sql.SET("seat_category = #{record.seatCategory,jdbcType=SMALLINT}");
        sql.SET("city_id = #{record.cityId,jdbcType=INTEGER}");
        sql.SET("airport_id = #{record.airportId,jdbcType=INTEGER}");
        sql.SET("airport_code = #{record.airportCode,jdbcType=VARCHAR}");
        sql.SET("service_date = #{record.serviceDate,jdbcType=VARCHAR}");
        sql.SET("start_location = #{record.startLocation,jdbcType=VARCHAR}");
        sql.SET("end_location = #{record.endLocation,jdbcType=VARCHAR}");
        sql.SET("is_urgent = #{record.isUrgent,jdbcType=TINYINT}");
        sql.SET("sys_price = #{record.sysPrice,jdbcType=DOUBLE}");
        sql.SET("ticket_price = #{record.ticketPrice,jdbcType=DOUBLE}");
        sql.SET("guide_price = #{record.guidePrice,jdbcType=DOUBLE}");
        sql.SET("channel_price = #{record.channelPrice,jdbcType=DOUBLE}");
        sql.SET("sys_slices = #{record.sysSlices,jdbcType=VARCHAR}");
        sql.SET("ticket_slices = #{record.ticketSlices,jdbcType=VARCHAR}");
        sql.SET("channel_slices = #{record.channelSlices,jdbcType=VARCHAR}");
        sql.SET("guide_slices = #{record.guideSlices,jdbcType=VARCHAR}");
        sql.SET("price_factor = #{record.priceFactor,jdbcType=VARCHAR}");
        sql.SET("distance = #{record.distance,jdbcType=DOUBLE}");
        sql.SET("est_time = #{record.estTime,jdbcType=INTEGER}");
        sql.SET("charge_per_hour = #{record.chargePerHour,jdbcType=DOUBLE}");
        sql.SET("charge_per_km = #{record.chargePerKm,jdbcType=DOUBLE}");
        sql.SET("charge_per_day = #{record.chargePerDay,jdbcType=DOUBLE}");
        sql.SET("charge_per_minute = #{record.chargePerMinute,jdbcType=DOUBLE}");
        sql.SET("expired_time = #{record.expiredTime,jdbcType=TIMESTAMP}");
        sql.SET("status = #{record.status,jdbcType=TINYINT}");
        sql.SET("price_version = #{record.priceVersion,jdbcType=INTEGER}");
        
        PriceSnapshotExample example = (PriceSnapshotExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `price_snapshot`
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(PriceSnapshotWithBLOBs record) {
        SQL sql = new SQL();
        sql.UPDATE("`price_snapshot`");
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getServiceType() != null) {
            sql.SET("service_type = #{serviceType,jdbcType=SMALLINT}");
        }
        
        if (record.getChannel() != null) {
            sql.SET("channel = #{channel,jdbcType=INTEGER}");
        }
        
        if (record.getPricemark() != null) {
            sql.SET("pricemark = #{pricemark,jdbcType=VARCHAR}");
        }
        
        if (record.getCurrencyRate() != null) {
            sql.SET("currency_rate = #{currencyRate,jdbcType=REAL}");
        }
        
        if (record.getCarType() != null) {
            sql.SET("car_type = #{carType,jdbcType=SMALLINT}");
        }
        
        if (record.getSeatCategory() != null) {
            sql.SET("seat_category = #{seatCategory,jdbcType=SMALLINT}");
        }
        
        if (record.getCityId() != null) {
            sql.SET("city_id = #{cityId,jdbcType=INTEGER}");
        }
        
        if (record.getAirportId() != null) {
            sql.SET("airport_id = #{airportId,jdbcType=INTEGER}");
        }
        
        if (record.getAirportCode() != null) {
            sql.SET("airport_code = #{airportCode,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceDate() != null) {
            sql.SET("service_date = #{serviceDate,jdbcType=VARCHAR}");
        }
        
        if (record.getStartLocation() != null) {
            sql.SET("start_location = #{startLocation,jdbcType=VARCHAR}");
        }
        
        if (record.getEndLocation() != null) {
            sql.SET("end_location = #{endLocation,jdbcType=VARCHAR}");
        }
        
        if (record.getIsUrgent() != null) {
            sql.SET("is_urgent = #{isUrgent,jdbcType=TINYINT}");
        }
        
        if (record.getSysPrice() != null) {
            sql.SET("sys_price = #{sysPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getTicketPrice() != null) {
            sql.SET("ticket_price = #{ticketPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getGuidePrice() != null) {
            sql.SET("guide_price = #{guidePrice,jdbcType=DOUBLE}");
        }
        
        if (record.getChannelPrice() != null) {
            sql.SET("channel_price = #{channelPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getSysSlices() != null) {
            sql.SET("sys_slices = #{sysSlices,jdbcType=VARCHAR}");
        }
        
        if (record.getTicketSlices() != null) {
            sql.SET("ticket_slices = #{ticketSlices,jdbcType=VARCHAR}");
        }
        
        if (record.getChannelSlices() != null) {
            sql.SET("channel_slices = #{channelSlices,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideSlices() != null) {
            sql.SET("guide_slices = #{guideSlices,jdbcType=VARCHAR}");
        }
        
        if (record.getPriceFactor() != null) {
            sql.SET("price_factor = #{priceFactor,jdbcType=VARCHAR}");
        }
        
        if (record.getDistance() != null) {
            sql.SET("distance = #{distance,jdbcType=DOUBLE}");
        }
        
        if (record.getEstTime() != null) {
            sql.SET("est_time = #{estTime,jdbcType=INTEGER}");
        }
        
        if (record.getChargePerHour() != null) {
            sql.SET("charge_per_hour = #{chargePerHour,jdbcType=DOUBLE}");
        }
        
        if (record.getChargePerKm() != null) {
            sql.SET("charge_per_km = #{chargePerKm,jdbcType=DOUBLE}");
        }
        
        if (record.getChargePerDay() != null) {
            sql.SET("charge_per_day = #{chargePerDay,jdbcType=DOUBLE}");
        }
        
        if (record.getChargePerMinute() != null) {
            sql.SET("charge_per_minute = #{chargePerMinute,jdbcType=DOUBLE}");
        }
        
        if (record.getExpiredTime() != null) {
            sql.SET("expired_time = #{expiredTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=TINYINT}");
        }
        
        if (record.getPriceVersion() != null) {
            sql.SET("price_version = #{priceVersion,jdbcType=INTEGER}");
        }
        
        if (record.getSysDetail() != null) {
            sql.SET("sys_detail = #{sysDetail,jdbcType=LONGVARCHAR}");
        }
        
        if (record.getGuideDetail() != null) {
            sql.SET("guide_detail = #{guideDetail,jdbcType=LONGVARCHAR}");
        }
        
        if (record.getChannelDetail() != null) {
            sql.SET("channel_detail = #{channelDetail,jdbcType=LONGVARCHAR}");
        }
        
        if (record.getRule() != null) {
            sql.SET("rule = #{rule,jdbcType=LONGVARCHAR}");
        }
        
        sql.WHERE("id = #{id,jdbcType=BIGINT}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `price_snapshot`
     *
     * @mbggenerated
     */
    protected void applyWhere(SQL sql, PriceSnapshotExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}