package com.hbc.api.trade.order.mapping.gen;

import com.hbc.api.trade.order.mapping.gen.bean.TradeRoute;
import com.hbc.api.trade.order.mapping.gen.bean.TradeRouteExample;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface TradeRouteMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_route`
     *
     * @mbggenerated
     */
    @SelectProvider(type=TradeRouteSqlProvider.class, method="countByExample")
    int countByExample(TradeRouteExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_route`
     *
     * @mbggenerated
     */
    @DeleteProvider(type=TradeRouteSqlProvider.class, method="deleteByExample")
    int deleteByExample(TradeRouteExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_route`
     *
     * @mbggenerated
     */
    @Delete({
        "delete from `trade_route`",
        "where route_id = #{routeId,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer routeId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_route`
     *
     * @mbggenerated
     */
    @Insert({
        "insert into `trade_route` (route_id, order_no, ",
        "start_time, end_time, ",
        "update_time, create_time, ",
        "gps_points)",
        "values (#{routeId,jdbcType=INTEGER}, #{orderNo,jdbcType=VARCHAR}, ",
        "#{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, ",
        "#{updateTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, ",
        "#{gpsPoints,jdbcType=LONGVARCHAR})"
    })
    int insert(TradeRoute record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_route`
     *
     * @mbggenerated
     */
    @InsertProvider(type=TradeRouteSqlProvider.class, method="insertSelective")
    int insertSelective(TradeRoute record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_route`
     *
     * @mbggenerated
     */
    @SelectProvider(type=TradeRouteSqlProvider.class, method="selectByExampleWithBLOBs")
    @Results({
        @Result(column="route_id", property="routeId", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="order_no", property="orderNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="start_time", property="startTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="end_time", property="endTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="gps_points", property="gpsPoints", jdbcType=JdbcType.LONGVARCHAR)
    })
    List<TradeRoute> selectByExampleWithBLOBs(TradeRouteExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_route`
     *
     * @mbggenerated
     */
    @SelectProvider(type=TradeRouteSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="route_id", property="routeId", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="order_no", property="orderNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="start_time", property="startTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="end_time", property="endTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP)
    })
    List<TradeRoute> selectByExample(TradeRouteExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_route`
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "route_id, order_no, start_time, end_time, update_time, create_time, gps_points",
        "from `trade_route`",
        "where route_id = #{routeId,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="route_id", property="routeId", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="order_no", property="orderNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="start_time", property="startTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="end_time", property="endTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="gps_points", property="gpsPoints", jdbcType=JdbcType.LONGVARCHAR)
    })
    TradeRoute selectByPrimaryKey(Integer routeId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_route`
     *
     * @mbggenerated
     */
    @UpdateProvider(type=TradeRouteSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") TradeRoute record, @Param("example") TradeRouteExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_route`
     *
     * @mbggenerated
     */
    @UpdateProvider(type=TradeRouteSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(TradeRoute record);
}