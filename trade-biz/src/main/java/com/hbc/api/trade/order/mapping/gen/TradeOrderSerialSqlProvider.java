package com.hbc.api.trade.order.mapping.gen;

import com.hbc.api.trade.order.mapping.gen.bean.TradeOrderSerial;
import com.hbc.api.trade.order.mapping.gen.bean.TradeOrderSerialExample.Criteria;
import com.hbc.api.trade.order.mapping.gen.bean.TradeOrderSerialExample.Criterion;
import com.hbc.api.trade.order.mapping.gen.bean.TradeOrderSerialExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class TradeOrderSerialSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_order_serial`
     *
     * @mbggenerated
     */
    public String countByExample(TradeOrderSerialExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("`trade_order_serial`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_order_serial`
     *
     * @mbggenerated
     */
    public String deleteByExample(TradeOrderSerialExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("`trade_order_serial`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_order_serial`
     *
     * @mbggenerated
     */
    public String insertSelective(TradeOrderSerial record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("`trade_order_serial`");
        
        if (record.getSerialId() != null) {
            sql.VALUES("serial_id", "#{serialId,jdbcType=INTEGER}");
        }
        
        if (record.getOrderNo() != null) {
            sql.VALUES("order_no", "#{orderNo,jdbcType=VARCHAR}");
        }
        
        if (record.getGuidePrice() != null) {
            sql.VALUES("guide_price", "#{guidePrice,jdbcType=DOUBLE}");
        }
        
        if (record.getMeetOrderNo() != null) {
            sql.VALUES("meet_order_no", "#{meetOrderNo,jdbcType=VARCHAR}");
        }
        
        if (record.getMeetGuideId() != null) {
            sql.VALUES("meet_guide_id", "#{meetGuideId,jdbcType=VARCHAR}");
        }
        
        if (record.getMeetOrderType() != null) {
            sql.VALUES("meet_order_type", "#{meetOrderType,jdbcType=INTEGER}");
        }
        
        if (record.getMeetOrderServiceTime() != null) {
            sql.VALUES("meet_order_service_time", "#{meetOrderServiceTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getMeetOrderAddress() != null) {
            sql.VALUES("meet_order_address", "#{meetOrderAddress,jdbcType=VARCHAR}");
        }
        
        if (record.getIsMatch() != null) {
            sql.VALUES("is_match", "#{isMatch,jdbcType=INTEGER}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_order_serial`
     *
     * @mbggenerated
     */
    public String selectByExample(TradeOrderSerialExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("serial_id");
        } else {
            sql.SELECT("serial_id");
        }
        sql.SELECT("order_no");
        sql.SELECT("guide_price");
        sql.SELECT("meet_order_no");
        sql.SELECT("meet_guide_id");
        sql.SELECT("meet_order_type");
        sql.SELECT("meet_order_service_time");
        sql.SELECT("meet_order_address");
        sql.SELECT("is_match");
        sql.SELECT("update_time");
        sql.SELECT("create_time");
        sql.FROM("`trade_order_serial`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_order_serial`
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        TradeOrderSerial record = (TradeOrderSerial) parameter.get("record");
        TradeOrderSerialExample example = (TradeOrderSerialExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("`trade_order_serial`");
        
        if (record.getSerialId() != null) {
            sql.SET("serial_id = #{record.serialId,jdbcType=INTEGER}");
        }
        
        if (record.getOrderNo() != null) {
            sql.SET("order_no = #{record.orderNo,jdbcType=VARCHAR}");
        }
        
        if (record.getGuidePrice() != null) {
            sql.SET("guide_price = #{record.guidePrice,jdbcType=DOUBLE}");
        }
        
        if (record.getMeetOrderNo() != null) {
            sql.SET("meet_order_no = #{record.meetOrderNo,jdbcType=VARCHAR}");
        }
        
        if (record.getMeetGuideId() != null) {
            sql.SET("meet_guide_id = #{record.meetGuideId,jdbcType=VARCHAR}");
        }
        
        if (record.getMeetOrderType() != null) {
            sql.SET("meet_order_type = #{record.meetOrderType,jdbcType=INTEGER}");
        }
        
        if (record.getMeetOrderServiceTime() != null) {
            sql.SET("meet_order_service_time = #{record.meetOrderServiceTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getMeetOrderAddress() != null) {
            sql.SET("meet_order_address = #{record.meetOrderAddress,jdbcType=VARCHAR}");
        }
        
        if (record.getIsMatch() != null) {
            sql.SET("is_match = #{record.isMatch,jdbcType=INTEGER}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_order_serial`
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`trade_order_serial`");
        
        sql.SET("serial_id = #{record.serialId,jdbcType=INTEGER}");
        sql.SET("order_no = #{record.orderNo,jdbcType=VARCHAR}");
        sql.SET("guide_price = #{record.guidePrice,jdbcType=DOUBLE}");
        sql.SET("meet_order_no = #{record.meetOrderNo,jdbcType=VARCHAR}");
        sql.SET("meet_guide_id = #{record.meetGuideId,jdbcType=VARCHAR}");
        sql.SET("meet_order_type = #{record.meetOrderType,jdbcType=INTEGER}");
        sql.SET("meet_order_service_time = #{record.meetOrderServiceTime,jdbcType=TIMESTAMP}");
        sql.SET("meet_order_address = #{record.meetOrderAddress,jdbcType=VARCHAR}");
        sql.SET("is_match = #{record.isMatch,jdbcType=INTEGER}");
        sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        
        TradeOrderSerialExample example = (TradeOrderSerialExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_order_serial`
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(TradeOrderSerial record) {
        SQL sql = new SQL();
        sql.UPDATE("`trade_order_serial`");
        
        if (record.getOrderNo() != null) {
            sql.SET("order_no = #{orderNo,jdbcType=VARCHAR}");
        }
        
        if (record.getGuidePrice() != null) {
            sql.SET("guide_price = #{guidePrice,jdbcType=DOUBLE}");
        }
        
        if (record.getMeetOrderNo() != null) {
            sql.SET("meet_order_no = #{meetOrderNo,jdbcType=VARCHAR}");
        }
        
        if (record.getMeetGuideId() != null) {
            sql.SET("meet_guide_id = #{meetGuideId,jdbcType=VARCHAR}");
        }
        
        if (record.getMeetOrderType() != null) {
            sql.SET("meet_order_type = #{meetOrderType,jdbcType=INTEGER}");
        }
        
        if (record.getMeetOrderServiceTime() != null) {
            sql.SET("meet_order_service_time = #{meetOrderServiceTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getMeetOrderAddress() != null) {
            sql.SET("meet_order_address = #{meetOrderAddress,jdbcType=VARCHAR}");
        }
        
        if (record.getIsMatch() != null) {
            sql.SET("is_match = #{isMatch,jdbcType=INTEGER}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("serial_id = #{serialId,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `trade_order_serial`
     *
     * @mbggenerated
     */
    protected void applyWhere(SQL sql, TradeOrderSerialExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}