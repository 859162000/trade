package com.hbc.api.trade.bdata.mapper.basedata.gen;

import com.hbc.api.trade.bdata.mapper.basedata.gen.bean.CityBean;
import com.hbc.api.trade.bdata.mapper.basedata.gen.bean.CityBeanExample;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface CityBeanMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `basedata_cities`
     *
     * @mbggenerated
     */
    @SelectProvider(type=CityBeanSqlProvider.class, method="countByExample")
    int countByExample(CityBeanExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `basedata_cities`
     *
     * @mbggenerated
     */
    @DeleteProvider(type=CityBeanSqlProvider.class, method="deleteByExample")
    int deleteByExample(CityBeanExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `basedata_cities`
     *
     * @mbggenerated
     */
    @Delete({
        "delete from `basedata_cities`",
        "where city_id = #{cityId,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer cityId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `basedata_cities`
     *
     * @mbggenerated
     */
    @Insert({
        "insert into `basedata_cities` (city_id, city_name, ",
        "continent_id, continent_name, ",
        "country_id, country_name, ",
        "spell, en_name, code, ",
        "timezone, location, ",
        "is_hot, status, hotzone_radius, ",
        "dst, dst_start_time, ",
        "dst_end_time, created_at, ",
        "updated_at, deleted_at)",
        "values (#{cityId,jdbcType=INTEGER}, #{cityName,jdbcType=VARCHAR}, ",
        "#{continentId,jdbcType=INTEGER}, #{continentName,jdbcType=VARCHAR}, ",
        "#{countryId,jdbcType=INTEGER}, #{countryName,jdbcType=VARCHAR}, ",
        "#{spell,jdbcType=VARCHAR}, #{enName,jdbcType=VARCHAR}, #{code,jdbcType=CHAR}, ",
        "#{timezone,jdbcType=REAL}, #{location,jdbcType=VARCHAR}, ",
        "#{isHot,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{hotzoneRadius,jdbcType=INTEGER}, ",
        "#{dst,jdbcType=INTEGER}, #{dstStartTime,jdbcType=TIMESTAMP}, ",
        "#{dstEndTime,jdbcType=TIMESTAMP}, #{createdAt,jdbcType=TIMESTAMP}, ",
        "#{updatedAt,jdbcType=TIMESTAMP}, #{deletedAt,jdbcType=TIMESTAMP})"
    })
    int insert(CityBean record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `basedata_cities`
     *
     * @mbggenerated
     */
    @InsertProvider(type=CityBeanSqlProvider.class, method="insertSelective")
    int insertSelective(CityBean record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `basedata_cities`
     *
     * @mbggenerated
     */
    @SelectProvider(type=CityBeanSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="city_id", property="cityId", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="city_name", property="cityName", jdbcType=JdbcType.VARCHAR),
        @Result(column="continent_id", property="continentId", jdbcType=JdbcType.INTEGER),
        @Result(column="continent_name", property="continentName", jdbcType=JdbcType.VARCHAR),
        @Result(column="country_id", property="countryId", jdbcType=JdbcType.INTEGER),
        @Result(column="country_name", property="countryName", jdbcType=JdbcType.VARCHAR),
        @Result(column="spell", property="spell", jdbcType=JdbcType.VARCHAR),
        @Result(column="en_name", property="enName", jdbcType=JdbcType.VARCHAR),
        @Result(column="code", property="code", jdbcType=JdbcType.CHAR),
        @Result(column="timezone", property="timezone", jdbcType=JdbcType.REAL),
        @Result(column="location", property="location", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_hot", property="isHot", jdbcType=JdbcType.INTEGER),
        @Result(column="status", property="status", jdbcType=JdbcType.INTEGER),
        @Result(column="hotzone_radius", property="hotzoneRadius", jdbcType=JdbcType.INTEGER),
        @Result(column="dst", property="dst", jdbcType=JdbcType.INTEGER),
        @Result(column="dst_start_time", property="dstStartTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="dst_end_time", property="dstEndTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="created_at", property="createdAt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="updated_at", property="updatedAt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="deleted_at", property="deletedAt", jdbcType=JdbcType.TIMESTAMP)
    })
    List<CityBean> selectByExample(CityBeanExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `basedata_cities`
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "city_id, city_name, continent_id, continent_name, country_id, country_name, ",
        "spell, en_name, code, timezone, location, is_hot, status, hotzone_radius, dst, ",
        "dst_start_time, dst_end_time, created_at, updated_at, deleted_at",
        "from `basedata_cities`",
        "where city_id = #{cityId,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="city_id", property="cityId", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="city_name", property="cityName", jdbcType=JdbcType.VARCHAR),
        @Result(column="continent_id", property="continentId", jdbcType=JdbcType.INTEGER),
        @Result(column="continent_name", property="continentName", jdbcType=JdbcType.VARCHAR),
        @Result(column="country_id", property="countryId", jdbcType=JdbcType.INTEGER),
        @Result(column="country_name", property="countryName", jdbcType=JdbcType.VARCHAR),
        @Result(column="spell", property="spell", jdbcType=JdbcType.VARCHAR),
        @Result(column="en_name", property="enName", jdbcType=JdbcType.VARCHAR),
        @Result(column="code", property="code", jdbcType=JdbcType.CHAR),
        @Result(column="timezone", property="timezone", jdbcType=JdbcType.REAL),
        @Result(column="location", property="location", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_hot", property="isHot", jdbcType=JdbcType.INTEGER),
        @Result(column="status", property="status", jdbcType=JdbcType.INTEGER),
        @Result(column="hotzone_radius", property="hotzoneRadius", jdbcType=JdbcType.INTEGER),
        @Result(column="dst", property="dst", jdbcType=JdbcType.INTEGER),
        @Result(column="dst_start_time", property="dstStartTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="dst_end_time", property="dstEndTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="created_at", property="createdAt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="updated_at", property="updatedAt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="deleted_at", property="deletedAt", jdbcType=JdbcType.TIMESTAMP)
    })
    CityBean selectByPrimaryKey(Integer cityId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `basedata_cities`
     *
     * @mbggenerated
     */
    @UpdateProvider(type=CityBeanSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") CityBean record, @Param("example") CityBeanExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `basedata_cities`
     *
     * @mbggenerated
     */
    @UpdateProvider(type=CityBeanSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(CityBean record);
}