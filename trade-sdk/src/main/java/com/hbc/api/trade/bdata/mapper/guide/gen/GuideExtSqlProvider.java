package com.hbc.api.trade.bdata.mapper.guide.gen;

import com.hbc.api.trade.bdata.mapper.guide.gen.bean.GuideExt;
import com.hbc.api.trade.bdata.mapper.guide.gen.bean.GuideExtExample.Criteria;
import com.hbc.api.trade.bdata.mapper.guide.gen.bean.GuideExtExample.Criterion;
import com.hbc.api.trade.bdata.mapper.guide.gen.bean.GuideExtExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class GuideExtSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guide_ext`
     *
     * @mbggenerated
     */
    public String countByExample(GuideExtExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("`guide_ext`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guide_ext`
     *
     * @mbggenerated
     */
    public String deleteByExample(GuideExtExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("`guide_ext`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guide_ext`
     *
     * @mbggenerated
     */
    public String insertSelective(GuideExt record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("`guide_ext`");
        
        if (record.getGuideExtId() != null) {
            sql.VALUES("guide_ext_id", "#{guideExtId,jdbcType=INTEGER}");
        }
        
        if (record.getGuideId() != null) {
            sql.VALUES("guide_id", "#{guideId,jdbcType=VARCHAR}");
        }
        
        if (record.getSeniority() != null) {
            sql.VALUES("seniority", "#{seniority,jdbcType=TINYINT}");
        }
        
        if (record.getIntegral() != null) {
            sql.VALUES("integral", "#{integral,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceStar() != null) {
            sql.VALUES("service_star", "#{serviceStar,jdbcType=REAL}");
        }
        
        if (record.getCuserCollectionNum() != null) {
            sql.VALUES("cuser_collection_num", "#{cuserCollectionNum,jdbcType=INTEGER}");
        }
        
        if (record.getActiveDayNum() != null) {
            sql.VALUES("active_day_num", "#{activeDayNum,jdbcType=INTEGER}");
        }
        
        if (record.getSuccessReceiveNum() != null) {
            sql.VALUES("success_receive_num", "#{successReceiveNum,jdbcType=INTEGER}");
        }
        
        if (record.getCompleteNum() != null) {
            sql.VALUES("complete_num", "#{completeNum,jdbcType=INTEGER}");
        }
        
        if (record.getResassignNum() != null) {
            sql.VALUES("resassign_num", "#{resassignNum,jdbcType=INTEGER}");
        }
        
        if (record.getAssignNum() != null) {
            sql.VALUES("assign_num", "#{assignNum,jdbcType=INTEGER}");
        }
        
        if (record.getDeclareNum() != null) {
            sql.VALUES("declare_num", "#{declareNum,jdbcType=INTEGER}");
        }
        
        if (record.getShowPurposeNum() != null) {
            sql.VALUES("show_purpose_num", "#{showPurposeNum,jdbcType=INTEGER}");
        }
        
        if (record.getLastestReceiveTime() != null) {
            sql.VALUES("lastest_receive_time", "#{lastestReceiveTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getServiceProjectId() != null) {
            sql.VALUES("service_project_id", "#{serviceProjectId,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceProjects() != null) {
            sql.VALUES("service_projects", "#{serviceProjects,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceLanguageId() != null) {
            sql.VALUES("service_language_id", "#{serviceLanguageId,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceLanguages() != null) {
            sql.VALUES("service_languages", "#{serviceLanguages,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderDailyCitys() != null) {
            sql.VALUES("order_daily_citys", "#{orderDailyCitys,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guide_ext`
     *
     * @mbggenerated
     */
    public String selectByExample(GuideExtExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("guide_ext_id");
        } else {
            sql.SELECT("guide_ext_id");
        }
        sql.SELECT("guide_id");
        sql.SELECT("seniority");
        sql.SELECT("integral");
        sql.SELECT("service_star");
        sql.SELECT("cuser_collection_num");
        sql.SELECT("active_day_num");
        sql.SELECT("success_receive_num");
        sql.SELECT("complete_num");
        sql.SELECT("resassign_num");
        sql.SELECT("assign_num");
        sql.SELECT("declare_num");
        sql.SELECT("show_purpose_num");
        sql.SELECT("lastest_receive_time");
        sql.SELECT("service_project_id");
        sql.SELECT("service_projects");
        sql.SELECT("service_language_id");
        sql.SELECT("service_languages");
        sql.SELECT("order_daily_citys");
        sql.SELECT("create_time");
        sql.SELECT("update_time");
        sql.FROM("`guide_ext`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guide_ext`
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        GuideExt record = (GuideExt) parameter.get("record");
        GuideExtExample example = (GuideExtExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("`guide_ext`");
        
        if (record.getGuideExtId() != null) {
            sql.SET("guide_ext_id = #{record.guideExtId,jdbcType=INTEGER}");
        }
        
        if (record.getGuideId() != null) {
            sql.SET("guide_id = #{record.guideId,jdbcType=VARCHAR}");
        }
        
        if (record.getSeniority() != null) {
            sql.SET("seniority = #{record.seniority,jdbcType=TINYINT}");
        }
        
        if (record.getIntegral() != null) {
            sql.SET("integral = #{record.integral,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceStar() != null) {
            sql.SET("service_star = #{record.serviceStar,jdbcType=REAL}");
        }
        
        if (record.getCuserCollectionNum() != null) {
            sql.SET("cuser_collection_num = #{record.cuserCollectionNum,jdbcType=INTEGER}");
        }
        
        if (record.getActiveDayNum() != null) {
            sql.SET("active_day_num = #{record.activeDayNum,jdbcType=INTEGER}");
        }
        
        if (record.getSuccessReceiveNum() != null) {
            sql.SET("success_receive_num = #{record.successReceiveNum,jdbcType=INTEGER}");
        }
        
        if (record.getCompleteNum() != null) {
            sql.SET("complete_num = #{record.completeNum,jdbcType=INTEGER}");
        }
        
        if (record.getResassignNum() != null) {
            sql.SET("resassign_num = #{record.resassignNum,jdbcType=INTEGER}");
        }
        
        if (record.getAssignNum() != null) {
            sql.SET("assign_num = #{record.assignNum,jdbcType=INTEGER}");
        }
        
        if (record.getDeclareNum() != null) {
            sql.SET("declare_num = #{record.declareNum,jdbcType=INTEGER}");
        }
        
        if (record.getShowPurposeNum() != null) {
            sql.SET("show_purpose_num = #{record.showPurposeNum,jdbcType=INTEGER}");
        }
        
        if (record.getLastestReceiveTime() != null) {
            sql.SET("lastest_receive_time = #{record.lastestReceiveTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getServiceProjectId() != null) {
            sql.SET("service_project_id = #{record.serviceProjectId,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceProjects() != null) {
            sql.SET("service_projects = #{record.serviceProjects,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceLanguageId() != null) {
            sql.SET("service_language_id = #{record.serviceLanguageId,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceLanguages() != null) {
            sql.SET("service_languages = #{record.serviceLanguages,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderDailyCitys() != null) {
            sql.SET("order_daily_citys = #{record.orderDailyCitys,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guide_ext`
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`guide_ext`");
        
        sql.SET("guide_ext_id = #{record.guideExtId,jdbcType=INTEGER}");
        sql.SET("guide_id = #{record.guideId,jdbcType=VARCHAR}");
        sql.SET("seniority = #{record.seniority,jdbcType=TINYINT}");
        sql.SET("integral = #{record.integral,jdbcType=VARCHAR}");
        sql.SET("service_star = #{record.serviceStar,jdbcType=REAL}");
        sql.SET("cuser_collection_num = #{record.cuserCollectionNum,jdbcType=INTEGER}");
        sql.SET("active_day_num = #{record.activeDayNum,jdbcType=INTEGER}");
        sql.SET("success_receive_num = #{record.successReceiveNum,jdbcType=INTEGER}");
        sql.SET("complete_num = #{record.completeNum,jdbcType=INTEGER}");
        sql.SET("resassign_num = #{record.resassignNum,jdbcType=INTEGER}");
        sql.SET("assign_num = #{record.assignNum,jdbcType=INTEGER}");
        sql.SET("declare_num = #{record.declareNum,jdbcType=INTEGER}");
        sql.SET("show_purpose_num = #{record.showPurposeNum,jdbcType=INTEGER}");
        sql.SET("lastest_receive_time = #{record.lastestReceiveTime,jdbcType=TIMESTAMP}");
        sql.SET("service_project_id = #{record.serviceProjectId,jdbcType=VARCHAR}");
        sql.SET("service_projects = #{record.serviceProjects,jdbcType=VARCHAR}");
        sql.SET("service_language_id = #{record.serviceLanguageId,jdbcType=VARCHAR}");
        sql.SET("service_languages = #{record.serviceLanguages,jdbcType=VARCHAR}");
        sql.SET("order_daily_citys = #{record.orderDailyCitys,jdbcType=VARCHAR}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        
        GuideExtExample example = (GuideExtExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guide_ext`
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(GuideExt record) {
        SQL sql = new SQL();
        sql.UPDATE("`guide_ext`");
        
        if (record.getGuideId() != null) {
            sql.SET("guide_id = #{guideId,jdbcType=VARCHAR}");
        }
        
        if (record.getSeniority() != null) {
            sql.SET("seniority = #{seniority,jdbcType=TINYINT}");
        }
        
        if (record.getIntegral() != null) {
            sql.SET("integral = #{integral,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceStar() != null) {
            sql.SET("service_star = #{serviceStar,jdbcType=REAL}");
        }
        
        if (record.getCuserCollectionNum() != null) {
            sql.SET("cuser_collection_num = #{cuserCollectionNum,jdbcType=INTEGER}");
        }
        
        if (record.getActiveDayNum() != null) {
            sql.SET("active_day_num = #{activeDayNum,jdbcType=INTEGER}");
        }
        
        if (record.getSuccessReceiveNum() != null) {
            sql.SET("success_receive_num = #{successReceiveNum,jdbcType=INTEGER}");
        }
        
        if (record.getCompleteNum() != null) {
            sql.SET("complete_num = #{completeNum,jdbcType=INTEGER}");
        }
        
        if (record.getResassignNum() != null) {
            sql.SET("resassign_num = #{resassignNum,jdbcType=INTEGER}");
        }
        
        if (record.getAssignNum() != null) {
            sql.SET("assign_num = #{assignNum,jdbcType=INTEGER}");
        }
        
        if (record.getDeclareNum() != null) {
            sql.SET("declare_num = #{declareNum,jdbcType=INTEGER}");
        }
        
        if (record.getShowPurposeNum() != null) {
            sql.SET("show_purpose_num = #{showPurposeNum,jdbcType=INTEGER}");
        }
        
        if (record.getLastestReceiveTime() != null) {
            sql.SET("lastest_receive_time = #{lastestReceiveTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getServiceProjectId() != null) {
            sql.SET("service_project_id = #{serviceProjectId,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceProjects() != null) {
            sql.SET("service_projects = #{serviceProjects,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceLanguageId() != null) {
            sql.SET("service_language_id = #{serviceLanguageId,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceLanguages() != null) {
            sql.SET("service_languages = #{serviceLanguages,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderDailyCitys() != null) {
            sql.SET("order_daily_citys = #{orderDailyCitys,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("guide_ext_id = #{guideExtId,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guide_ext`
     *
     * @mbggenerated
     */
    protected void applyWhere(SQL sql, GuideExtExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}