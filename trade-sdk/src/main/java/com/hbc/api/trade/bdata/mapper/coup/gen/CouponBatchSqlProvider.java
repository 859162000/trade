package com.hbc.api.trade.bdata.mapper.coup.gen;

import com.hbc.api.trade.bdata.mapper.coup.gen.bean.CouponBatch;
import com.hbc.api.trade.bdata.mapper.coup.gen.bean.CouponBatchExample.Criteria;
import com.hbc.api.trade.bdata.mapper.coup.gen.bean.CouponBatchExample.Criterion;
import com.hbc.api.trade.bdata.mapper.coup.gen.bean.CouponBatchExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class CouponBatchSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `coupon_batch`
     *
     * @mbggenerated
     */
    public String countByExample(CouponBatchExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("`coupon_batch`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `coupon_batch`
     *
     * @mbggenerated
     */
    public String deleteByExample(CouponBatchExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("`coupon_batch`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `coupon_batch`
     *
     * @mbggenerated
     */
    public String insertSelective(CouponBatch record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("`coupon_batch`");
        
        if (record.getCouponBatchId() != null) {
            sql.VALUES("coupon_batch_id", "#{couponBatchId,jdbcType=VARCHAR}");
        }
        
        if (record.getBatchNo() != null) {
            sql.VALUES("batch_no", "#{batchNo,jdbcType=VARCHAR}");
        }
        
        if (record.getBatchName() != null) {
            sql.VALUES("batch_name", "#{batchName,jdbcType=VARCHAR}");
        }
        
        if (record.getBatchChannel() != null) {
            sql.VALUES("batch_channel", "#{batchChannel,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponType() != null) {
            sql.VALUES("coupon_type", "#{couponType,jdbcType=TINYINT}");
        }
        
        if (record.getCouponTotal() != null) {
            sql.VALUES("coupon_total", "#{couponTotal,jdbcType=INTEGER}");
        }
        
        if (record.getCouponPrice() != null) {
            sql.VALUES("coupon_price", "#{couponPrice,jdbcType=INTEGER}");
        }
        
        if (record.getCouponDiscount() != null) {
            sql.VALUES("coupon_discount", "#{couponDiscount,jdbcType=INTEGER}");
        }
        
        if (record.getDaysLimit() != null) {
            sql.VALUES("days_limit", "#{daysLimit,jdbcType=INTEGER}");
        }
        
        if (record.getEndDate() != null) {
            sql.VALUES("end_date", "#{endDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getMeetPrice() != null) {
            sql.VALUES("meet_price", "#{meetPrice,jdbcType=INTEGER}");
        }
        
        if (record.getDistanceUpperLimit() != null) {
            sql.VALUES("distance_upper_limit", "#{distanceUpperLimit,jdbcType=INTEGER}");
        }
        
        if (record.getDurationUpperLimit() != null) {
            sql.VALUES("duration_upper_limit", "#{durationUpperLimit,jdbcType=INTEGER}");
        }
        
        if (record.getRemark() != null) {
            sql.VALUES("remark", "#{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponPic() != null) {
            sql.VALUES("coupon_pic", "#{couponPic,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponUrl() != null) {
            sql.VALUES("coupon_url", "#{couponUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getBindCount() != null) {
            sql.VALUES("bind_count", "#{bindCount,jdbcType=INTEGER}");
        }
        
        if (record.getUseCount() != null) {
            sql.VALUES("use_count", "#{useCount,jdbcType=INTEGER}");
        }
        
        if (record.getAllowTransferCount() != null) {
            sql.VALUES("allow_transfer_count", "#{allowTransferCount,jdbcType=INTEGER}");
        }
        
        if (record.getCouponScopJson() != null) {
            sql.VALUES("coupon_scop_json", "#{couponScopJson,jdbcType=VARCHAR}");
        }
        
        if (record.getDistrictNames() != null) {
            sql.VALUES("district_names", "#{districtNames,jdbcType=VARCHAR}");
        }
        
        if (record.getCropTypes() != null) {
            sql.VALUES("crop_types", "#{cropTypes,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `coupon_batch`
     *
     * @mbggenerated
     */
    public String selectByExample(CouponBatchExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("coupon_batch_id");
        } else {
            sql.SELECT("coupon_batch_id");
        }
        sql.SELECT("batch_no");
        sql.SELECT("batch_name");
        sql.SELECT("batch_channel");
        sql.SELECT("coupon_type");
        sql.SELECT("coupon_total");
        sql.SELECT("coupon_price");
        sql.SELECT("coupon_discount");
        sql.SELECT("days_limit");
        sql.SELECT("end_date");
        sql.SELECT("meet_price");
        sql.SELECT("distance_upper_limit");
        sql.SELECT("duration_upper_limit");
        sql.SELECT("remark");
        sql.SELECT("coupon_pic");
        sql.SELECT("coupon_url");
        sql.SELECT("bind_count");
        sql.SELECT("use_count");
        sql.SELECT("allow_transfer_count");
        sql.SELECT("coupon_scop_json");
        sql.SELECT("district_names");
        sql.SELECT("crop_types");
        sql.SELECT("update_time");
        sql.SELECT("create_time");
        sql.FROM("`coupon_batch`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `coupon_batch`
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        CouponBatch record = (CouponBatch) parameter.get("record");
        CouponBatchExample example = (CouponBatchExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("`coupon_batch`");
        
        if (record.getCouponBatchId() != null) {
            sql.SET("coupon_batch_id = #{record.couponBatchId,jdbcType=VARCHAR}");
        }
        
        if (record.getBatchNo() != null) {
            sql.SET("batch_no = #{record.batchNo,jdbcType=VARCHAR}");
        }
        
        if (record.getBatchName() != null) {
            sql.SET("batch_name = #{record.batchName,jdbcType=VARCHAR}");
        }
        
        if (record.getBatchChannel() != null) {
            sql.SET("batch_channel = #{record.batchChannel,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponType() != null) {
            sql.SET("coupon_type = #{record.couponType,jdbcType=TINYINT}");
        }
        
        if (record.getCouponTotal() != null) {
            sql.SET("coupon_total = #{record.couponTotal,jdbcType=INTEGER}");
        }
        
        if (record.getCouponPrice() != null) {
            sql.SET("coupon_price = #{record.couponPrice,jdbcType=INTEGER}");
        }
        
        if (record.getCouponDiscount() != null) {
            sql.SET("coupon_discount = #{record.couponDiscount,jdbcType=INTEGER}");
        }
        
        if (record.getDaysLimit() != null) {
            sql.SET("days_limit = #{record.daysLimit,jdbcType=INTEGER}");
        }
        
        if (record.getEndDate() != null) {
            sql.SET("end_date = #{record.endDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getMeetPrice() != null) {
            sql.SET("meet_price = #{record.meetPrice,jdbcType=INTEGER}");
        }
        
        if (record.getDistanceUpperLimit() != null) {
            sql.SET("distance_upper_limit = #{record.distanceUpperLimit,jdbcType=INTEGER}");
        }
        
        if (record.getDurationUpperLimit() != null) {
            sql.SET("duration_upper_limit = #{record.durationUpperLimit,jdbcType=INTEGER}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponPic() != null) {
            sql.SET("coupon_pic = #{record.couponPic,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponUrl() != null) {
            sql.SET("coupon_url = #{record.couponUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getBindCount() != null) {
            sql.SET("bind_count = #{record.bindCount,jdbcType=INTEGER}");
        }
        
        if (record.getUseCount() != null) {
            sql.SET("use_count = #{record.useCount,jdbcType=INTEGER}");
        }
        
        if (record.getAllowTransferCount() != null) {
            sql.SET("allow_transfer_count = #{record.allowTransferCount,jdbcType=INTEGER}");
        }
        
        if (record.getCouponScopJson() != null) {
            sql.SET("coupon_scop_json = #{record.couponScopJson,jdbcType=VARCHAR}");
        }
        
        if (record.getDistrictNames() != null) {
            sql.SET("district_names = #{record.districtNames,jdbcType=VARCHAR}");
        }
        
        if (record.getCropTypes() != null) {
            sql.SET("crop_types = #{record.cropTypes,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `coupon_batch`
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`coupon_batch`");
        
        sql.SET("coupon_batch_id = #{record.couponBatchId,jdbcType=VARCHAR}");
        sql.SET("batch_no = #{record.batchNo,jdbcType=VARCHAR}");
        sql.SET("batch_name = #{record.batchName,jdbcType=VARCHAR}");
        sql.SET("batch_channel = #{record.batchChannel,jdbcType=VARCHAR}");
        sql.SET("coupon_type = #{record.couponType,jdbcType=TINYINT}");
        sql.SET("coupon_total = #{record.couponTotal,jdbcType=INTEGER}");
        sql.SET("coupon_price = #{record.couponPrice,jdbcType=INTEGER}");
        sql.SET("coupon_discount = #{record.couponDiscount,jdbcType=INTEGER}");
        sql.SET("days_limit = #{record.daysLimit,jdbcType=INTEGER}");
        sql.SET("end_date = #{record.endDate,jdbcType=TIMESTAMP}");
        sql.SET("meet_price = #{record.meetPrice,jdbcType=INTEGER}");
        sql.SET("distance_upper_limit = #{record.distanceUpperLimit,jdbcType=INTEGER}");
        sql.SET("duration_upper_limit = #{record.durationUpperLimit,jdbcType=INTEGER}");
        sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        sql.SET("coupon_pic = #{record.couponPic,jdbcType=VARCHAR}");
        sql.SET("coupon_url = #{record.couponUrl,jdbcType=VARCHAR}");
        sql.SET("bind_count = #{record.bindCount,jdbcType=INTEGER}");
        sql.SET("use_count = #{record.useCount,jdbcType=INTEGER}");
        sql.SET("allow_transfer_count = #{record.allowTransferCount,jdbcType=INTEGER}");
        sql.SET("coupon_scop_json = #{record.couponScopJson,jdbcType=VARCHAR}");
        sql.SET("district_names = #{record.districtNames,jdbcType=VARCHAR}");
        sql.SET("crop_types = #{record.cropTypes,jdbcType=VARCHAR}");
        sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        
        CouponBatchExample example = (CouponBatchExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `coupon_batch`
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(CouponBatch record) {
        SQL sql = new SQL();
        sql.UPDATE("`coupon_batch`");
        
        if (record.getBatchNo() != null) {
            sql.SET("batch_no = #{batchNo,jdbcType=VARCHAR}");
        }
        
        if (record.getBatchName() != null) {
            sql.SET("batch_name = #{batchName,jdbcType=VARCHAR}");
        }
        
        if (record.getBatchChannel() != null) {
            sql.SET("batch_channel = #{batchChannel,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponType() != null) {
            sql.SET("coupon_type = #{couponType,jdbcType=TINYINT}");
        }
        
        if (record.getCouponTotal() != null) {
            sql.SET("coupon_total = #{couponTotal,jdbcType=INTEGER}");
        }
        
        if (record.getCouponPrice() != null) {
            sql.SET("coupon_price = #{couponPrice,jdbcType=INTEGER}");
        }
        
        if (record.getCouponDiscount() != null) {
            sql.SET("coupon_discount = #{couponDiscount,jdbcType=INTEGER}");
        }
        
        if (record.getDaysLimit() != null) {
            sql.SET("days_limit = #{daysLimit,jdbcType=INTEGER}");
        }
        
        if (record.getEndDate() != null) {
            sql.SET("end_date = #{endDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getMeetPrice() != null) {
            sql.SET("meet_price = #{meetPrice,jdbcType=INTEGER}");
        }
        
        if (record.getDistanceUpperLimit() != null) {
            sql.SET("distance_upper_limit = #{distanceUpperLimit,jdbcType=INTEGER}");
        }
        
        if (record.getDurationUpperLimit() != null) {
            sql.SET("duration_upper_limit = #{durationUpperLimit,jdbcType=INTEGER}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("remark = #{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponPic() != null) {
            sql.SET("coupon_pic = #{couponPic,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponUrl() != null) {
            sql.SET("coupon_url = #{couponUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getBindCount() != null) {
            sql.SET("bind_count = #{bindCount,jdbcType=INTEGER}");
        }
        
        if (record.getUseCount() != null) {
            sql.SET("use_count = #{useCount,jdbcType=INTEGER}");
        }
        
        if (record.getAllowTransferCount() != null) {
            sql.SET("allow_transfer_count = #{allowTransferCount,jdbcType=INTEGER}");
        }
        
        if (record.getCouponScopJson() != null) {
            sql.SET("coupon_scop_json = #{couponScopJson,jdbcType=VARCHAR}");
        }
        
        if (record.getDistrictNames() != null) {
            sql.SET("district_names = #{districtNames,jdbcType=VARCHAR}");
        }
        
        if (record.getCropTypes() != null) {
            sql.SET("crop_types = #{cropTypes,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("coupon_batch_id = #{couponBatchId,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `coupon_batch`
     *
     * @mbggenerated
     */
    protected void applyWhere(SQL sql, CouponBatchExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}