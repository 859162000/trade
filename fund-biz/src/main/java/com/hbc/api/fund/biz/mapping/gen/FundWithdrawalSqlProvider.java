package com.hbc.api.fund.biz.mapping.gen;

import com.hbc.api.fund.biz.mapping.gen.bean.FundWithdrawal;
import com.hbc.api.fund.biz.mapping.gen.bean.FundWithdrawalExample.Criteria;
import com.hbc.api.fund.biz.mapping.gen.bean.FundWithdrawalExample.Criterion;
import com.hbc.api.fund.biz.mapping.gen.bean.FundWithdrawalExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class FundWithdrawalSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw`
     *
     * @mbggenerated
     */
    public String countByExample(FundWithdrawalExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("`fund_withdraw`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw`
     *
     * @mbggenerated
     */
    public String deleteByExample(FundWithdrawalExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("`fund_withdraw`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw`
     *
     * @mbggenerated
     */
    public String insertSelective(FundWithdrawal record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("`fund_withdraw`");
        
        if (record.getDrawNo() != null) {
            sql.VALUES("draw_no", "#{drawNo,jdbcType=VARCHAR}");
        }
        
        if (record.getBachNo() != null) {
            sql.VALUES("bach_no", "#{bachNo,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideId() != null) {
            sql.VALUES("guide_id", "#{guideId,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideName() != null) {
            sql.VALUES("guide_name", "#{guideName,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideAgencyId() != null) {
            sql.VALUES("guide_agency_id", "#{guideAgencyId,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideAgencyName() != null) {
            sql.VALUES("guide_agency_name", "#{guideAgencyName,jdbcType=VARCHAR}");
        }
        
        if (record.getApplyTime() != null) {
            sql.VALUES("apply_time", "#{applyTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPrice() != null) {
            sql.VALUES("price", "#{price,jdbcType=DOUBLE}");
        }
        
        if (record.getFinBankNo() != null) {
            sql.VALUES("fin_bank_no", "#{finBankNo,jdbcType=VARCHAR}");
        }
        
        if (record.getFinName() != null) {
            sql.VALUES("fin_name", "#{finName,jdbcType=VARCHAR}");
        }
        
        if (record.getFinAccount() != null) {
            sql.VALUES("fin_account", "#{finAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getFinBank() != null) {
            sql.VALUES("fin_bank", "#{finBank,jdbcType=VARCHAR}");
        }
        
        if (record.getFinCurrency() != null) {
            sql.VALUES("fin_currency", "#{finCurrency,jdbcType=VARCHAR}");
        }
        
        if (record.getFinType() != null) {
            sql.VALUES("fin_type", "#{finType,jdbcType=INTEGER}");
        }
        
        if (record.getAdminId() != null) {
            sql.VALUES("admin_id", "#{adminId,jdbcType=VARCHAR}");
        }
        
        if (record.getAdminName() != null) {
            sql.VALUES("admin_name", "#{adminName,jdbcType=VARCHAR}");
        }
        
        if (record.getActualPrice() != null) {
            sql.VALUES("actual_price", "#{actualPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getTransferTime() != null) {
            sql.VALUES("transfer_time", "#{transferTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getAccount() != null) {
            sql.VALUES("account", "#{account,jdbcType=VARCHAR}");
        }
        
        if (record.getDrawComment() != null) {
            sql.VALUES("draw_comment", "#{drawComment,jdbcType=VARCHAR}");
        }
        
        if (record.getDrawStatus() != null) {
            sql.VALUES("draw_status", "#{drawStatus,jdbcType=INTEGER}");
        }
        
        if (record.getIsAuto() != null) {
            sql.VALUES("is_auto", "#{isAuto,jdbcType=INTEGER}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getProcessStatus() != null) {
            sql.VALUES("process_status", "#{processStatus,jdbcType=INTEGER}");
        }
        
        if (record.getGuideNo() != null) {
            sql.VALUES("guide_no", "#{guideNo,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw`
     *
     * @mbggenerated
     */
    public String selectByExample(FundWithdrawalExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("draw_no");
        } else {
            sql.SELECT("draw_no");
        }
        sql.SELECT("bach_no");
        sql.SELECT("guide_id");
        sql.SELECT("guide_name");
        sql.SELECT("guide_agency_id");
        sql.SELECT("guide_agency_name");
        sql.SELECT("apply_time");
        sql.SELECT("price");
        sql.SELECT("fin_bank_no");
        sql.SELECT("fin_name");
        sql.SELECT("fin_account");
        sql.SELECT("fin_bank");
        sql.SELECT("fin_currency");
        sql.SELECT("fin_type");
        sql.SELECT("admin_id");
        sql.SELECT("admin_name");
        sql.SELECT("actual_price");
        sql.SELECT("transfer_time");
        sql.SELECT("account");
        sql.SELECT("draw_comment");
        sql.SELECT("draw_status");
        sql.SELECT("is_auto");
        sql.SELECT("update_time");
        sql.SELECT("create_time");
        sql.SELECT("process_status");
        sql.SELECT("guide_no");
        sql.FROM("`fund_withdraw`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw`
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        FundWithdrawal record = (FundWithdrawal) parameter.get("record");
        FundWithdrawalExample example = (FundWithdrawalExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("`fund_withdraw`");
        
        if (record.getDrawNo() != null) {
            sql.SET("draw_no = #{record.drawNo,jdbcType=VARCHAR}");
        }
        
        if (record.getBachNo() != null) {
            sql.SET("bach_no = #{record.bachNo,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideId() != null) {
            sql.SET("guide_id = #{record.guideId,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideName() != null) {
            sql.SET("guide_name = #{record.guideName,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideAgencyId() != null) {
            sql.SET("guide_agency_id = #{record.guideAgencyId,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideAgencyName() != null) {
            sql.SET("guide_agency_name = #{record.guideAgencyName,jdbcType=VARCHAR}");
        }
        
        if (record.getApplyTime() != null) {
            sql.SET("apply_time = #{record.applyTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPrice() != null) {
            sql.SET("price = #{record.price,jdbcType=DOUBLE}");
        }
        
        if (record.getFinBankNo() != null) {
            sql.SET("fin_bank_no = #{record.finBankNo,jdbcType=VARCHAR}");
        }
        
        if (record.getFinName() != null) {
            sql.SET("fin_name = #{record.finName,jdbcType=VARCHAR}");
        }
        
        if (record.getFinAccount() != null) {
            sql.SET("fin_account = #{record.finAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getFinBank() != null) {
            sql.SET("fin_bank = #{record.finBank,jdbcType=VARCHAR}");
        }
        
        if (record.getFinCurrency() != null) {
            sql.SET("fin_currency = #{record.finCurrency,jdbcType=VARCHAR}");
        }
        
        if (record.getFinType() != null) {
            sql.SET("fin_type = #{record.finType,jdbcType=INTEGER}");
        }
        
        if (record.getAdminId() != null) {
            sql.SET("admin_id = #{record.adminId,jdbcType=VARCHAR}");
        }
        
        if (record.getAdminName() != null) {
            sql.SET("admin_name = #{record.adminName,jdbcType=VARCHAR}");
        }
        
        if (record.getActualPrice() != null) {
            sql.SET("actual_price = #{record.actualPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getTransferTime() != null) {
            sql.SET("transfer_time = #{record.transferTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getAccount() != null) {
            sql.SET("account = #{record.account,jdbcType=VARCHAR}");
        }
        
        if (record.getDrawComment() != null) {
            sql.SET("draw_comment = #{record.drawComment,jdbcType=VARCHAR}");
        }
        
        if (record.getDrawStatus() != null) {
            sql.SET("draw_status = #{record.drawStatus,jdbcType=INTEGER}");
        }
        
        if (record.getIsAuto() != null) {
            sql.SET("is_auto = #{record.isAuto,jdbcType=INTEGER}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getProcessStatus() != null) {
            sql.SET("process_status = #{record.processStatus,jdbcType=INTEGER}");
        }
        
        if (record.getGuideNo() != null) {
            sql.SET("guide_no = #{record.guideNo,jdbcType=VARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw`
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`fund_withdraw`");
        
        sql.SET("draw_no = #{record.drawNo,jdbcType=VARCHAR}");
        sql.SET("bach_no = #{record.bachNo,jdbcType=VARCHAR}");
        sql.SET("guide_id = #{record.guideId,jdbcType=VARCHAR}");
        sql.SET("guide_name = #{record.guideName,jdbcType=VARCHAR}");
        sql.SET("guide_agency_id = #{record.guideAgencyId,jdbcType=VARCHAR}");
        sql.SET("guide_agency_name = #{record.guideAgencyName,jdbcType=VARCHAR}");
        sql.SET("apply_time = #{record.applyTime,jdbcType=TIMESTAMP}");
        sql.SET("price = #{record.price,jdbcType=DOUBLE}");
        sql.SET("fin_bank_no = #{record.finBankNo,jdbcType=VARCHAR}");
        sql.SET("fin_name = #{record.finName,jdbcType=VARCHAR}");
        sql.SET("fin_account = #{record.finAccount,jdbcType=VARCHAR}");
        sql.SET("fin_bank = #{record.finBank,jdbcType=VARCHAR}");
        sql.SET("fin_currency = #{record.finCurrency,jdbcType=VARCHAR}");
        sql.SET("fin_type = #{record.finType,jdbcType=INTEGER}");
        sql.SET("admin_id = #{record.adminId,jdbcType=VARCHAR}");
        sql.SET("admin_name = #{record.adminName,jdbcType=VARCHAR}");
        sql.SET("actual_price = #{record.actualPrice,jdbcType=DOUBLE}");
        sql.SET("transfer_time = #{record.transferTime,jdbcType=TIMESTAMP}");
        sql.SET("account = #{record.account,jdbcType=VARCHAR}");
        sql.SET("draw_comment = #{record.drawComment,jdbcType=VARCHAR}");
        sql.SET("draw_status = #{record.drawStatus,jdbcType=INTEGER}");
        sql.SET("is_auto = #{record.isAuto,jdbcType=INTEGER}");
        sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        sql.SET("process_status = #{record.processStatus,jdbcType=INTEGER}");
        sql.SET("guide_no = #{record.guideNo,jdbcType=VARCHAR}");
        
        FundWithdrawalExample example = (FundWithdrawalExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw`
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(FundWithdrawal record) {
        SQL sql = new SQL();
        sql.UPDATE("`fund_withdraw`");
        
        if (record.getBachNo() != null) {
            sql.SET("bach_no = #{bachNo,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideId() != null) {
            sql.SET("guide_id = #{guideId,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideName() != null) {
            sql.SET("guide_name = #{guideName,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideAgencyId() != null) {
            sql.SET("guide_agency_id = #{guideAgencyId,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideAgencyName() != null) {
            sql.SET("guide_agency_name = #{guideAgencyName,jdbcType=VARCHAR}");
        }
        
        if (record.getApplyTime() != null) {
            sql.SET("apply_time = #{applyTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPrice() != null) {
            sql.SET("price = #{price,jdbcType=DOUBLE}");
        }
        
        if (record.getFinBankNo() != null) {
            sql.SET("fin_bank_no = #{finBankNo,jdbcType=VARCHAR}");
        }
        
        if (record.getFinName() != null) {
            sql.SET("fin_name = #{finName,jdbcType=VARCHAR}");
        }
        
        if (record.getFinAccount() != null) {
            sql.SET("fin_account = #{finAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getFinBank() != null) {
            sql.SET("fin_bank = #{finBank,jdbcType=VARCHAR}");
        }
        
        if (record.getFinCurrency() != null) {
            sql.SET("fin_currency = #{finCurrency,jdbcType=VARCHAR}");
        }
        
        if (record.getFinType() != null) {
            sql.SET("fin_type = #{finType,jdbcType=INTEGER}");
        }
        
        if (record.getAdminId() != null) {
            sql.SET("admin_id = #{adminId,jdbcType=VARCHAR}");
        }
        
        if (record.getAdminName() != null) {
            sql.SET("admin_name = #{adminName,jdbcType=VARCHAR}");
        }
        
        if (record.getActualPrice() != null) {
            sql.SET("actual_price = #{actualPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getTransferTime() != null) {
            sql.SET("transfer_time = #{transferTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getAccount() != null) {
            sql.SET("account = #{account,jdbcType=VARCHAR}");
        }
        
        if (record.getDrawComment() != null) {
            sql.SET("draw_comment = #{drawComment,jdbcType=VARCHAR}");
        }
        
        if (record.getDrawStatus() != null) {
            sql.SET("draw_status = #{drawStatus,jdbcType=INTEGER}");
        }
        
        if (record.getIsAuto() != null) {
            sql.SET("is_auto = #{isAuto,jdbcType=INTEGER}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getProcessStatus() != null) {
            sql.SET("process_status = #{processStatus,jdbcType=INTEGER}");
        }
        
        if (record.getGuideNo() != null) {
            sql.SET("guide_no = #{guideNo,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("draw_no = #{drawNo,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw`
     *
     * @mbggenerated
     */
    protected void applyWhere(SQL sql, FundWithdrawalExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}