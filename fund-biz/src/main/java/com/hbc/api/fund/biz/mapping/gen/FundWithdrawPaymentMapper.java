package com.hbc.api.fund.biz.mapping.gen;

import com.hbc.api.fund.biz.mapping.gen.bean.FundWithdrawPayment;
import com.hbc.api.fund.biz.mapping.gen.bean.FundWithdrawPaymentExample;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface FundWithdrawPaymentMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw_payment`
     *
     * @mbggenerated
     */
    @SelectProvider(type=FundWithdrawPaymentSqlProvider.class, method="countByExample")
    int countByExample(FundWithdrawPaymentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw_payment`
     *
     * @mbggenerated
     */
    @DeleteProvider(type=FundWithdrawPaymentSqlProvider.class, method="deleteByExample")
    int deleteByExample(FundWithdrawPaymentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw_payment`
     *
     * @mbggenerated
     */
    @Delete({
        "delete from `fund_withdraw_payment`",
        "where payment_id = #{paymentId,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String paymentId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw_payment`
     *
     * @mbggenerated
     */
    @Insert({
        "insert into `fund_withdraw_payment` (payment_id, draw_no, ",
        "batch_no, payment_method, ",
        "guide_id, payee_account, ",
        "payee_name, transfer_amount, ",
        "actual_amount, transfer_datetime, ",
        "payer_account, operator_id, ",
        "operator_name, transfer_status, ",
        "create_time, update_time, ",
        "remark)",
        "values (#{paymentId,jdbcType=VARCHAR}, #{drawNo,jdbcType=VARCHAR}, ",
        "#{batchNo,jdbcType=VARCHAR}, #{paymentMethod,jdbcType=TINYINT}, ",
        "#{guideId,jdbcType=VARCHAR}, #{payeeAccount,jdbcType=VARCHAR}, ",
        "#{payeeName,jdbcType=VARCHAR}, #{transferAmount,jdbcType=DOUBLE}, ",
        "#{actualAmount,jdbcType=DOUBLE}, #{transferDatetime,jdbcType=TIMESTAMP}, ",
        "#{payerAccount,jdbcType=VARCHAR}, #{operatorId,jdbcType=VARCHAR}, ",
        "#{operatorName,jdbcType=VARCHAR}, #{transferStatus,jdbcType=INTEGER}, ",
        "#{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, ",
        "#{remark,jdbcType=VARCHAR})"
    })
    int insert(FundWithdrawPayment record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw_payment`
     *
     * @mbggenerated
     */
    @InsertProvider(type=FundWithdrawPaymentSqlProvider.class, method="insertSelective")
    int insertSelective(FundWithdrawPayment record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw_payment`
     *
     * @mbggenerated
     */
    @SelectProvider(type=FundWithdrawPaymentSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="payment_id", property="paymentId", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="draw_no", property="drawNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="batch_no", property="batchNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="payment_method", property="paymentMethod", jdbcType=JdbcType.TINYINT),
        @Result(column="guide_id", property="guideId", jdbcType=JdbcType.VARCHAR),
        @Result(column="payee_account", property="payeeAccount", jdbcType=JdbcType.VARCHAR),
        @Result(column="payee_name", property="payeeName", jdbcType=JdbcType.VARCHAR),
        @Result(column="transfer_amount", property="transferAmount", jdbcType=JdbcType.DOUBLE),
        @Result(column="actual_amount", property="actualAmount", jdbcType=JdbcType.DOUBLE),
        @Result(column="transfer_datetime", property="transferDatetime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="payer_account", property="payerAccount", jdbcType=JdbcType.VARCHAR),
        @Result(column="operator_id", property="operatorId", jdbcType=JdbcType.VARCHAR),
        @Result(column="operator_name", property="operatorName", jdbcType=JdbcType.VARCHAR),
        @Result(column="transfer_status", property="transferStatus", jdbcType=JdbcType.INTEGER),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="remark", property="remark", jdbcType=JdbcType.VARCHAR)
    })
    List<FundWithdrawPayment> selectByExample(FundWithdrawPaymentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw_payment`
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "payment_id, draw_no, batch_no, payment_method, guide_id, payee_account, payee_name, ",
        "transfer_amount, actual_amount, transfer_datetime, payer_account, operator_id, ",
        "operator_name, transfer_status, create_time, update_time, remark",
        "from `fund_withdraw_payment`",
        "where payment_id = #{paymentId,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="payment_id", property="paymentId", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="draw_no", property="drawNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="batch_no", property="batchNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="payment_method", property="paymentMethod", jdbcType=JdbcType.TINYINT),
        @Result(column="guide_id", property="guideId", jdbcType=JdbcType.VARCHAR),
        @Result(column="payee_account", property="payeeAccount", jdbcType=JdbcType.VARCHAR),
        @Result(column="payee_name", property="payeeName", jdbcType=JdbcType.VARCHAR),
        @Result(column="transfer_amount", property="transferAmount", jdbcType=JdbcType.DOUBLE),
        @Result(column="actual_amount", property="actualAmount", jdbcType=JdbcType.DOUBLE),
        @Result(column="transfer_datetime", property="transferDatetime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="payer_account", property="payerAccount", jdbcType=JdbcType.VARCHAR),
        @Result(column="operator_id", property="operatorId", jdbcType=JdbcType.VARCHAR),
        @Result(column="operator_name", property="operatorName", jdbcType=JdbcType.VARCHAR),
        @Result(column="transfer_status", property="transferStatus", jdbcType=JdbcType.INTEGER),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="remark", property="remark", jdbcType=JdbcType.VARCHAR)
    })
    FundWithdrawPayment selectByPrimaryKey(String paymentId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw_payment`
     *
     * @mbggenerated
     */
    @UpdateProvider(type=FundWithdrawPaymentSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") FundWithdrawPayment record, @Param("example") FundWithdrawPaymentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `fund_withdraw_payment`
     *
     * @mbggenerated
     */
    @UpdateProvider(type=FundWithdrawPaymentSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(FundWithdrawPayment record);
}