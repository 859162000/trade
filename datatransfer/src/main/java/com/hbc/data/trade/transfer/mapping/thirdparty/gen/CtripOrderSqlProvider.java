package com.hbc.data.trade.transfer.mapping.thirdparty.gen;

import com.hbc.data.trade.transfer.mapping.thirdparty.gen.bean.CtripOrder;
import com.hbc.data.trade.transfer.mapping.thirdparty.gen.bean.CtripOrderCriteria.Criteria;
import com.hbc.data.trade.transfer.mapping.thirdparty.gen.bean.CtripOrderCriteria.Criterion;
import com.hbc.data.trade.transfer.mapping.thirdparty.gen.bean.CtripOrderCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class CtripOrderSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `ctriporder`
     *
     * @mbggenerated
     */
    public String countByExample(CtripOrderCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("`ctriporder`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `ctriporder`
     *
     * @mbggenerated
     */
    public String deleteByExample(CtripOrderCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("`ctriporder`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `ctriporder`
     *
     * @mbggenerated
     */
    public String insertSelective(CtripOrder record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("`ctriporder`");
        
        if (record.getCtriporderid() != null) {
            sql.VALUES("ctripOrderId", "#{ctriporderid,jdbcType=VARCHAR}");
        }
        
        if (record.getVorderid() != null) {
            sql.VALUES("vOrderId", "#{vorderid,jdbcType=VARCHAR}");
        }
        
        if (record.getFlightno() != null) {
            sql.VALUES("flightNo", "#{flightno,jdbcType=VARCHAR}");
        }
        
        if (record.getAirportname() != null) {
            sql.VALUES("airportName", "#{airportname,jdbcType=VARCHAR}");
        }
        
        if (record.getCartype() != null) {
            sql.VALUES("carType", "#{cartype,jdbcType=INTEGER}");
        }
        
        if (record.getOrdertype() != null) {
            sql.VALUES("orderType", "#{ordertype,jdbcType=INTEGER}");
        }
        
        if (record.getTotalprice() != null) {
            sql.VALUES("totalPrice", "#{totalprice,jdbcType=DECIMAL}");
        }
        
        if (record.getDistance() != null) {
            sql.VALUES("distance", "#{distance,jdbcType=INTEGER}");
        }
        
        if (record.getEstimatedtime() != null) {
            sql.VALUES("estimatedTime", "#{estimatedtime,jdbcType=INTEGER}");
        }
        
        if (record.getGuideid() != null) {
            sql.VALUES("guideId", "#{guideid,jdbcType=INTEGER}");
        }
        
        if (record.getCountry() != null) {
            sql.VALUES("country", "#{country,jdbcType=VARCHAR}");
        }
        
        if (record.getCity() != null) {
            sql.VALUES("city", "#{city,jdbcType=VARCHAR}");
        }
        
        if (record.getFromaddrname() != null) {
            sql.VALUES("fromAddrName", "#{fromaddrname,jdbcType=VARCHAR}");
        }
        
        if (record.getFromlong() != null) {
            sql.VALUES("fromLong", "#{fromlong,jdbcType=DOUBLE}");
        }
        
        if (record.getFromlat() != null) {
            sql.VALUES("fromLat", "#{fromlat,jdbcType=DOUBLE}");
        }
        
        if (record.getToaddrname() != null) {
            sql.VALUES("toAddrName", "#{toaddrname,jdbcType=VARCHAR}");
        }
        
        if (record.getTolong() != null) {
            sql.VALUES("toLong", "#{tolong,jdbcType=DOUBLE}");
        }
        
        if (record.getTolat() != null) {
            sql.VALUES("toLat", "#{tolat,jdbcType=DOUBLE}");
        }
        
        if (record.getStatus() != null) {
            sql.VALUES("status", "#{status,jdbcType=INTEGER}");
        }
        
        if (record.getAirportthreecode() != null) {
            sql.VALUES("airportThreeCode", "#{airportthreecode,jdbcType=VARCHAR}");
        }
        
        if (record.getDepflighttime() != null) {
            sql.VALUES("depFlightTime", "#{depflighttime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getFromaddrdetail() != null) {
            sql.VALUES("fromAddrDetail", "#{fromaddrdetail,jdbcType=VARCHAR}");
        }
        
        if (record.getToaddrdetail() != null) {
            sql.VALUES("toAddrDetail", "#{toaddrdetail,jdbcType=VARCHAR}");
        }
        
        if (record.getPricemark() != null) {
            sql.VALUES("priceMark", "#{pricemark,jdbcType=VARCHAR}");
        }
        
        if (record.getCtrippurchaseorderid() != null) {
            sql.VALUES("ctripPurchaseOrderID", "#{ctrippurchaseorderid,jdbcType=VARCHAR}");
        }
        
        if (record.getIssupportpickup() != null) {
            sql.VALUES("isSupportPickup", "#{issupportpickup,jdbcType=INTEGER}");
        }
        
        if (record.getPickupcardmsg() != null) {
            sql.VALUES("pickupCardMsg", "#{pickupcardmsg,jdbcType=VARCHAR}");
        }
        
        if (record.getChildseatcount() != null) {
            sql.VALUES("ChildSeatCount", "#{childseatcount,jdbcType=INTEGER}");
        }
        
        if (record.getAreacode() != null) {
            sql.VALUES("areaCode", "#{areacode,jdbcType=VARCHAR}");
        }
        
        if (record.getSalecode() != null) {
            sql.VALUES("saleCode", "#{salecode,jdbcType=VARCHAR}");
        }
        
        if (record.getSaleprice() != null) {
            sql.VALUES("salePrice", "#{saleprice,jdbcType=DECIMAL}");
        }
        
        if (record.getData() != null) {
            sql.VALUES("data", "#{data,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.VALUES("updated_at", "#{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.VALUES("created_at", "#{createdAt,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `ctriporder`
     *
     * @mbggenerated
     */
    public String selectByExample(CtripOrderCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("ctripOrderId");
        } else {
            sql.SELECT("ctripOrderId");
        }
        sql.SELECT("vOrderId");
        sql.SELECT("flightNo");
        sql.SELECT("airportName");
        sql.SELECT("carType");
        sql.SELECT("orderType");
        sql.SELECT("totalPrice");
        sql.SELECT("distance");
        sql.SELECT("estimatedTime");
        sql.SELECT("guideId");
        sql.SELECT("country");
        sql.SELECT("city");
        sql.SELECT("fromAddrName");
        sql.SELECT("fromLong");
        sql.SELECT("fromLat");
        sql.SELECT("toAddrName");
        sql.SELECT("toLong");
        sql.SELECT("toLat");
        sql.SELECT("status");
        sql.SELECT("airportThreeCode");
        sql.SELECT("depFlightTime");
        sql.SELECT("fromAddrDetail");
        sql.SELECT("toAddrDetail");
        sql.SELECT("priceMark");
        sql.SELECT("ctripPurchaseOrderID");
        sql.SELECT("isSupportPickup");
        sql.SELECT("pickupCardMsg");
        sql.SELECT("ChildSeatCount");
        sql.SELECT("areaCode");
        sql.SELECT("saleCode");
        sql.SELECT("salePrice");
        sql.SELECT("data");
        sql.SELECT("updated_at");
        sql.SELECT("created_at");
        sql.FROM("`ctriporder`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `ctriporder`
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        CtripOrder record = (CtripOrder) parameter.get("record");
        CtripOrderCriteria example = (CtripOrderCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("`ctriporder`");
        
        if (record.getCtriporderid() != null) {
            sql.SET("ctripOrderId = #{record.ctriporderid,jdbcType=VARCHAR}");
        }
        
        if (record.getVorderid() != null) {
            sql.SET("vOrderId = #{record.vorderid,jdbcType=VARCHAR}");
        }
        
        if (record.getFlightno() != null) {
            sql.SET("flightNo = #{record.flightno,jdbcType=VARCHAR}");
        }
        
        if (record.getAirportname() != null) {
            sql.SET("airportName = #{record.airportname,jdbcType=VARCHAR}");
        }
        
        if (record.getCartype() != null) {
            sql.SET("carType = #{record.cartype,jdbcType=INTEGER}");
        }
        
        if (record.getOrdertype() != null) {
            sql.SET("orderType = #{record.ordertype,jdbcType=INTEGER}");
        }
        
        if (record.getTotalprice() != null) {
            sql.SET("totalPrice = #{record.totalprice,jdbcType=DECIMAL}");
        }
        
        if (record.getDistance() != null) {
            sql.SET("distance = #{record.distance,jdbcType=INTEGER}");
        }
        
        if (record.getEstimatedtime() != null) {
            sql.SET("estimatedTime = #{record.estimatedtime,jdbcType=INTEGER}");
        }
        
        if (record.getGuideid() != null) {
            sql.SET("guideId = #{record.guideid,jdbcType=INTEGER}");
        }
        
        if (record.getCountry() != null) {
            sql.SET("country = #{record.country,jdbcType=VARCHAR}");
        }
        
        if (record.getCity() != null) {
            sql.SET("city = #{record.city,jdbcType=VARCHAR}");
        }
        
        if (record.getFromaddrname() != null) {
            sql.SET("fromAddrName = #{record.fromaddrname,jdbcType=VARCHAR}");
        }
        
        if (record.getFromlong() != null) {
            sql.SET("fromLong = #{record.fromlong,jdbcType=DOUBLE}");
        }
        
        if (record.getFromlat() != null) {
            sql.SET("fromLat = #{record.fromlat,jdbcType=DOUBLE}");
        }
        
        if (record.getToaddrname() != null) {
            sql.SET("toAddrName = #{record.toaddrname,jdbcType=VARCHAR}");
        }
        
        if (record.getTolong() != null) {
            sql.SET("toLong = #{record.tolong,jdbcType=DOUBLE}");
        }
        
        if (record.getTolat() != null) {
            sql.SET("toLat = #{record.tolat,jdbcType=DOUBLE}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{record.status,jdbcType=INTEGER}");
        }
        
        if (record.getAirportthreecode() != null) {
            sql.SET("airportThreeCode = #{record.airportthreecode,jdbcType=VARCHAR}");
        }
        
        if (record.getDepflighttime() != null) {
            sql.SET("depFlightTime = #{record.depflighttime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getFromaddrdetail() != null) {
            sql.SET("fromAddrDetail = #{record.fromaddrdetail,jdbcType=VARCHAR}");
        }
        
        if (record.getToaddrdetail() != null) {
            sql.SET("toAddrDetail = #{record.toaddrdetail,jdbcType=VARCHAR}");
        }
        
        if (record.getPricemark() != null) {
            sql.SET("priceMark = #{record.pricemark,jdbcType=VARCHAR}");
        }
        
        if (record.getCtrippurchaseorderid() != null) {
            sql.SET("ctripPurchaseOrderID = #{record.ctrippurchaseorderid,jdbcType=VARCHAR}");
        }
        
        if (record.getIssupportpickup() != null) {
            sql.SET("isSupportPickup = #{record.issupportpickup,jdbcType=INTEGER}");
        }
        
        if (record.getPickupcardmsg() != null) {
            sql.SET("pickupCardMsg = #{record.pickupcardmsg,jdbcType=VARCHAR}");
        }
        
        if (record.getChildseatcount() != null) {
            sql.SET("ChildSeatCount = #{record.childseatcount,jdbcType=INTEGER}");
        }
        
        if (record.getAreacode() != null) {
            sql.SET("areaCode = #{record.areacode,jdbcType=VARCHAR}");
        }
        
        if (record.getSalecode() != null) {
            sql.SET("saleCode = #{record.salecode,jdbcType=VARCHAR}");
        }
        
        if (record.getSaleprice() != null) {
            sql.SET("salePrice = #{record.saleprice,jdbcType=DECIMAL}");
        }
        
        if (record.getData() != null) {
            sql.SET("data = #{record.data,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `ctriporder`
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`ctriporder`");
        
        sql.SET("ctripOrderId = #{record.ctriporderid,jdbcType=VARCHAR}");
        sql.SET("vOrderId = #{record.vorderid,jdbcType=VARCHAR}");
        sql.SET("flightNo = #{record.flightno,jdbcType=VARCHAR}");
        sql.SET("airportName = #{record.airportname,jdbcType=VARCHAR}");
        sql.SET("carType = #{record.cartype,jdbcType=INTEGER}");
        sql.SET("orderType = #{record.ordertype,jdbcType=INTEGER}");
        sql.SET("totalPrice = #{record.totalprice,jdbcType=DECIMAL}");
        sql.SET("distance = #{record.distance,jdbcType=INTEGER}");
        sql.SET("estimatedTime = #{record.estimatedtime,jdbcType=INTEGER}");
        sql.SET("guideId = #{record.guideid,jdbcType=INTEGER}");
        sql.SET("country = #{record.country,jdbcType=VARCHAR}");
        sql.SET("city = #{record.city,jdbcType=VARCHAR}");
        sql.SET("fromAddrName = #{record.fromaddrname,jdbcType=VARCHAR}");
        sql.SET("fromLong = #{record.fromlong,jdbcType=DOUBLE}");
        sql.SET("fromLat = #{record.fromlat,jdbcType=DOUBLE}");
        sql.SET("toAddrName = #{record.toaddrname,jdbcType=VARCHAR}");
        sql.SET("toLong = #{record.tolong,jdbcType=DOUBLE}");
        sql.SET("toLat = #{record.tolat,jdbcType=DOUBLE}");
        sql.SET("status = #{record.status,jdbcType=INTEGER}");
        sql.SET("airportThreeCode = #{record.airportthreecode,jdbcType=VARCHAR}");
        sql.SET("depFlightTime = #{record.depflighttime,jdbcType=TIMESTAMP}");
        sql.SET("fromAddrDetail = #{record.fromaddrdetail,jdbcType=VARCHAR}");
        sql.SET("toAddrDetail = #{record.toaddrdetail,jdbcType=VARCHAR}");
        sql.SET("priceMark = #{record.pricemark,jdbcType=VARCHAR}");
        sql.SET("ctripPurchaseOrderID = #{record.ctrippurchaseorderid,jdbcType=VARCHAR}");
        sql.SET("isSupportPickup = #{record.issupportpickup,jdbcType=INTEGER}");
        sql.SET("pickupCardMsg = #{record.pickupcardmsg,jdbcType=VARCHAR}");
        sql.SET("ChildSeatCount = #{record.childseatcount,jdbcType=INTEGER}");
        sql.SET("areaCode = #{record.areacode,jdbcType=VARCHAR}");
        sql.SET("saleCode = #{record.salecode,jdbcType=VARCHAR}");
        sql.SET("salePrice = #{record.saleprice,jdbcType=DECIMAL}");
        sql.SET("data = #{record.data,jdbcType=VARCHAR}");
        sql.SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        sql.SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        
        CtripOrderCriteria example = (CtripOrderCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `ctriporder`
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(CtripOrder record) {
        SQL sql = new SQL();
        sql.UPDATE("`ctriporder`");
        
        if (record.getVorderid() != null) {
            sql.SET("vOrderId = #{vorderid,jdbcType=VARCHAR}");
        }
        
        if (record.getFlightno() != null) {
            sql.SET("flightNo = #{flightno,jdbcType=VARCHAR}");
        }
        
        if (record.getAirportname() != null) {
            sql.SET("airportName = #{airportname,jdbcType=VARCHAR}");
        }
        
        if (record.getCartype() != null) {
            sql.SET("carType = #{cartype,jdbcType=INTEGER}");
        }
        
        if (record.getOrdertype() != null) {
            sql.SET("orderType = #{ordertype,jdbcType=INTEGER}");
        }
        
        if (record.getTotalprice() != null) {
            sql.SET("totalPrice = #{totalprice,jdbcType=DECIMAL}");
        }
        
        if (record.getDistance() != null) {
            sql.SET("distance = #{distance,jdbcType=INTEGER}");
        }
        
        if (record.getEstimatedtime() != null) {
            sql.SET("estimatedTime = #{estimatedtime,jdbcType=INTEGER}");
        }
        
        if (record.getGuideid() != null) {
            sql.SET("guideId = #{guideid,jdbcType=INTEGER}");
        }
        
        if (record.getCountry() != null) {
            sql.SET("country = #{country,jdbcType=VARCHAR}");
        }
        
        if (record.getCity() != null) {
            sql.SET("city = #{city,jdbcType=VARCHAR}");
        }
        
        if (record.getFromaddrname() != null) {
            sql.SET("fromAddrName = #{fromaddrname,jdbcType=VARCHAR}");
        }
        
        if (record.getFromlong() != null) {
            sql.SET("fromLong = #{fromlong,jdbcType=DOUBLE}");
        }
        
        if (record.getFromlat() != null) {
            sql.SET("fromLat = #{fromlat,jdbcType=DOUBLE}");
        }
        
        if (record.getToaddrname() != null) {
            sql.SET("toAddrName = #{toaddrname,jdbcType=VARCHAR}");
        }
        
        if (record.getTolong() != null) {
            sql.SET("toLong = #{tolong,jdbcType=DOUBLE}");
        }
        
        if (record.getTolat() != null) {
            sql.SET("toLat = #{tolat,jdbcType=DOUBLE}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=INTEGER}");
        }
        
        if (record.getAirportthreecode() != null) {
            sql.SET("airportThreeCode = #{airportthreecode,jdbcType=VARCHAR}");
        }
        
        if (record.getDepflighttime() != null) {
            sql.SET("depFlightTime = #{depflighttime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getFromaddrdetail() != null) {
            sql.SET("fromAddrDetail = #{fromaddrdetail,jdbcType=VARCHAR}");
        }
        
        if (record.getToaddrdetail() != null) {
            sql.SET("toAddrDetail = #{toaddrdetail,jdbcType=VARCHAR}");
        }
        
        if (record.getPricemark() != null) {
            sql.SET("priceMark = #{pricemark,jdbcType=VARCHAR}");
        }
        
        if (record.getCtrippurchaseorderid() != null) {
            sql.SET("ctripPurchaseOrderID = #{ctrippurchaseorderid,jdbcType=VARCHAR}");
        }
        
        if (record.getIssupportpickup() != null) {
            sql.SET("isSupportPickup = #{issupportpickup,jdbcType=INTEGER}");
        }
        
        if (record.getPickupcardmsg() != null) {
            sql.SET("pickupCardMsg = #{pickupcardmsg,jdbcType=VARCHAR}");
        }
        
        if (record.getChildseatcount() != null) {
            sql.SET("ChildSeatCount = #{childseatcount,jdbcType=INTEGER}");
        }
        
        if (record.getAreacode() != null) {
            sql.SET("areaCode = #{areacode,jdbcType=VARCHAR}");
        }
        
        if (record.getSalecode() != null) {
            sql.SET("saleCode = #{salecode,jdbcType=VARCHAR}");
        }
        
        if (record.getSaleprice() != null) {
            sql.SET("salePrice = #{saleprice,jdbcType=DECIMAL}");
        }
        
        if (record.getData() != null) {
            sql.SET("data = #{data,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.SET("updated_at = #{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.SET("created_at = #{createdAt,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("ctripOrderId = #{ctriporderid,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `ctriporder`
     *
     * @mbggenerated
     */
    protected void applyWhere(SQL sql, CtripOrderCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}