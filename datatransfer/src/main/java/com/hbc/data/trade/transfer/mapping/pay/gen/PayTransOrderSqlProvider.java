package com.hbc.data.trade.transfer.mapping.pay.gen;

import com.hbc.data.trade.transfer.mapping.pay.gen.bean.PayTransOrder;
import com.hbc.data.trade.transfer.mapping.pay.gen.bean.PayTransOrderCriteria.Criteria;
import com.hbc.data.trade.transfer.mapping.pay.gen.bean.PayTransOrderCriteria.Criterion;
import com.hbc.data.trade.transfer.mapping.pay.gen.bean.PayTransOrderCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class PayTransOrderSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `pay_trans_order`
     *
     * @mbggenerated
     */
    public String countByExample(PayTransOrderCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("`pay_trans_order`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `pay_trans_order`
     *
     * @mbggenerated
     */
    public String deleteByExample(PayTransOrderCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("`pay_trans_order`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `pay_trans_order`
     *
     * @mbggenerated
     */
    public String insertSelective(PayTransOrder record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("`pay_trans_order`");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=VARCHAR}");
        }
        
        if (record.getUserId() != null) {
            sql.VALUES("user_id", "#{userId,jdbcType=VARCHAR}");
        }
        
        if (record.getAccountId() != null) {
            sql.VALUES("account_id", "#{accountId,jdbcType=VARCHAR}");
        }
        
        if (record.getChannel() != null) {
            sql.VALUES("channel", "#{channel,jdbcType=INTEGER}");
        }
        
        if (record.getGateway() != null) {
            sql.VALUES("gateway", "#{gateway,jdbcType=OTHER}");
        }
        
        if (record.getMerTransNo() != null) {
            sql.VALUES("mer_trans_no", "#{merTransNo,jdbcType=VARCHAR}");
        }
        
        if (record.getSerTransNo() != null) {
            sql.VALUES("ser_trans_no", "#{serTransNo,jdbcType=VARCHAR}");
        }
        
        if (record.getBusiTransNo() != null) {
            sql.VALUES("busi_trans_no", "#{busiTransNo,jdbcType=VARCHAR}");
        }
        
        if (record.getBatchNo() != null) {
            sql.VALUES("batch_no", "#{batchNo,jdbcType=VARCHAR}");
        }
        
        if (record.getPersonAccount() != null) {
            sql.VALUES("person_account", "#{personAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getPersonName() != null) {
            sql.VALUES("person_name", "#{personName,jdbcType=VARCHAR}");
        }
        
        if (record.getMobileNo() != null) {
            sql.VALUES("mobile_no", "#{mobileNo,jdbcType=CHAR}");
        }
        
        if (record.getBankCode() != null) {
            sql.VALUES("bank_code", "#{bankCode,jdbcType=VARCHAR}");
        }
        
        if (record.getTransAmount() != null) {
            sql.VALUES("trans_amount", "#{transAmount,jdbcType=INTEGER}");
        }
        
        if (record.getSubject() != null) {
            sql.VALUES("subject", "#{subject,jdbcType=VARCHAR}");
        }
        
        if (record.getBody() != null) {
            sql.VALUES("body", "#{body,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=INTEGER}");
        }
        
        if (record.getPayTime() != null) {
            sql.VALUES("pay_time", "#{payTime,jdbcType=INTEGER}");
        }
        
        if (record.getSerNotifyTime() != null) {
            sql.VALUES("ser_notify_time", "#{serNotifyTime,jdbcType=INTEGER}");
        }
        
        if (record.getSerNotifyStatus() != null) {
            sql.VALUES("ser_notify_status", "#{serNotifyStatus,jdbcType=OTHER}");
        }
        
        if (record.getSerNotifyLog() != null) {
            sql.VALUES("ser_notify_log", "#{serNotifyLog,jdbcType=VARCHAR}");
        }
        
        if (record.getCallbackUrl() != null) {
            sql.VALUES("callback_url", "#{callbackUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getCallbackStatus() != null) {
            sql.VALUES("callback_status", "#{callbackStatus,jdbcType=OTHER}");
        }
        
        if (record.getCallbackCount() != null) {
            sql.VALUES("callback_count", "#{callbackCount,jdbcType=OTHER}");
        }
        
        if (record.getCallbackTime() != null) {
            sql.VALUES("callback_time", "#{callbackTime,jdbcType=INTEGER}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `pay_trans_order`
     *
     * @mbggenerated
     */
    public String selectByExample(PayTransOrderCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("user_id");
        sql.SELECT("account_id");
        sql.SELECT("channel");
        sql.SELECT("gateway");
        sql.SELECT("mer_trans_no");
        sql.SELECT("ser_trans_no");
        sql.SELECT("busi_trans_no");
        sql.SELECT("batch_no");
        sql.SELECT("person_account");
        sql.SELECT("person_name");
        sql.SELECT("mobile_no");
        sql.SELECT("bank_code");
        sql.SELECT("trans_amount");
        sql.SELECT("subject");
        sql.SELECT("body");
        sql.SELECT("create_time");
        sql.SELECT("pay_time");
        sql.SELECT("ser_notify_time");
        sql.SELECT("ser_notify_status");
        sql.SELECT("ser_notify_log");
        sql.SELECT("callback_url");
        sql.SELECT("callback_status");
        sql.SELECT("callback_count");
        sql.SELECT("callback_time");
        sql.FROM("`pay_trans_order`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `pay_trans_order`
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        PayTransOrder record = (PayTransOrder) parameter.get("record");
        PayTransOrderCriteria example = (PayTransOrderCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("`pay_trans_order`");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=VARCHAR}");
        }
        
        if (record.getUserId() != null) {
            sql.SET("user_id = #{record.userId,jdbcType=VARCHAR}");
        }
        
        if (record.getAccountId() != null) {
            sql.SET("account_id = #{record.accountId,jdbcType=VARCHAR}");
        }
        
        if (record.getChannel() != null) {
            sql.SET("channel = #{record.channel,jdbcType=INTEGER}");
        }
        
        if (record.getGateway() != null) {
            sql.SET("gateway = #{record.gateway,jdbcType=OTHER}");
        }
        
        if (record.getMerTransNo() != null) {
            sql.SET("mer_trans_no = #{record.merTransNo,jdbcType=VARCHAR}");
        }
        
        if (record.getSerTransNo() != null) {
            sql.SET("ser_trans_no = #{record.serTransNo,jdbcType=VARCHAR}");
        }
        
        if (record.getBusiTransNo() != null) {
            sql.SET("busi_trans_no = #{record.busiTransNo,jdbcType=VARCHAR}");
        }
        
        if (record.getBatchNo() != null) {
            sql.SET("batch_no = #{record.batchNo,jdbcType=VARCHAR}");
        }
        
        if (record.getPersonAccount() != null) {
            sql.SET("person_account = #{record.personAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getPersonName() != null) {
            sql.SET("person_name = #{record.personName,jdbcType=VARCHAR}");
        }
        
        if (record.getMobileNo() != null) {
            sql.SET("mobile_no = #{record.mobileNo,jdbcType=CHAR}");
        }
        
        if (record.getBankCode() != null) {
            sql.SET("bank_code = #{record.bankCode,jdbcType=VARCHAR}");
        }
        
        if (record.getTransAmount() != null) {
            sql.SET("trans_amount = #{record.transAmount,jdbcType=INTEGER}");
        }
        
        if (record.getSubject() != null) {
            sql.SET("subject = #{record.subject,jdbcType=VARCHAR}");
        }
        
        if (record.getBody() != null) {
            sql.SET("body = #{record.body,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=INTEGER}");
        }
        
        if (record.getPayTime() != null) {
            sql.SET("pay_time = #{record.payTime,jdbcType=INTEGER}");
        }
        
        if (record.getSerNotifyTime() != null) {
            sql.SET("ser_notify_time = #{record.serNotifyTime,jdbcType=INTEGER}");
        }
        
        if (record.getSerNotifyStatus() != null) {
            sql.SET("ser_notify_status = #{record.serNotifyStatus,jdbcType=OTHER}");
        }
        
        if (record.getSerNotifyLog() != null) {
            sql.SET("ser_notify_log = #{record.serNotifyLog,jdbcType=VARCHAR}");
        }
        
        if (record.getCallbackUrl() != null) {
            sql.SET("callback_url = #{record.callbackUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getCallbackStatus() != null) {
            sql.SET("callback_status = #{record.callbackStatus,jdbcType=OTHER}");
        }
        
        if (record.getCallbackCount() != null) {
            sql.SET("callback_count = #{record.callbackCount,jdbcType=OTHER}");
        }
        
        if (record.getCallbackTime() != null) {
            sql.SET("callback_time = #{record.callbackTime,jdbcType=INTEGER}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `pay_trans_order`
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`pay_trans_order`");
        
        sql.SET("id = #{record.id,jdbcType=VARCHAR}");
        sql.SET("user_id = #{record.userId,jdbcType=VARCHAR}");
        sql.SET("account_id = #{record.accountId,jdbcType=VARCHAR}");
        sql.SET("channel = #{record.channel,jdbcType=INTEGER}");
        sql.SET("gateway = #{record.gateway,jdbcType=OTHER}");
        sql.SET("mer_trans_no = #{record.merTransNo,jdbcType=VARCHAR}");
        sql.SET("ser_trans_no = #{record.serTransNo,jdbcType=VARCHAR}");
        sql.SET("busi_trans_no = #{record.busiTransNo,jdbcType=VARCHAR}");
        sql.SET("batch_no = #{record.batchNo,jdbcType=VARCHAR}");
        sql.SET("person_account = #{record.personAccount,jdbcType=VARCHAR}");
        sql.SET("person_name = #{record.personName,jdbcType=VARCHAR}");
        sql.SET("mobile_no = #{record.mobileNo,jdbcType=CHAR}");
        sql.SET("bank_code = #{record.bankCode,jdbcType=VARCHAR}");
        sql.SET("trans_amount = #{record.transAmount,jdbcType=INTEGER}");
        sql.SET("subject = #{record.subject,jdbcType=VARCHAR}");
        sql.SET("body = #{record.body,jdbcType=VARCHAR}");
        sql.SET("create_time = #{record.createTime,jdbcType=INTEGER}");
        sql.SET("pay_time = #{record.payTime,jdbcType=INTEGER}");
        sql.SET("ser_notify_time = #{record.serNotifyTime,jdbcType=INTEGER}");
        sql.SET("ser_notify_status = #{record.serNotifyStatus,jdbcType=OTHER}");
        sql.SET("ser_notify_log = #{record.serNotifyLog,jdbcType=VARCHAR}");
        sql.SET("callback_url = #{record.callbackUrl,jdbcType=VARCHAR}");
        sql.SET("callback_status = #{record.callbackStatus,jdbcType=OTHER}");
        sql.SET("callback_count = #{record.callbackCount,jdbcType=OTHER}");
        sql.SET("callback_time = #{record.callbackTime,jdbcType=INTEGER}");
        
        PayTransOrderCriteria example = (PayTransOrderCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `pay_trans_order`
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(PayTransOrder record) {
        SQL sql = new SQL();
        sql.UPDATE("`pay_trans_order`");
        
        if (record.getUserId() != null) {
            sql.SET("user_id = #{userId,jdbcType=VARCHAR}");
        }
        
        if (record.getAccountId() != null) {
            sql.SET("account_id = #{accountId,jdbcType=VARCHAR}");
        }
        
        if (record.getChannel() != null) {
            sql.SET("channel = #{channel,jdbcType=INTEGER}");
        }
        
        if (record.getGateway() != null) {
            sql.SET("gateway = #{gateway,jdbcType=OTHER}");
        }
        
        if (record.getMerTransNo() != null) {
            sql.SET("mer_trans_no = #{merTransNo,jdbcType=VARCHAR}");
        }
        
        if (record.getSerTransNo() != null) {
            sql.SET("ser_trans_no = #{serTransNo,jdbcType=VARCHAR}");
        }
        
        if (record.getBusiTransNo() != null) {
            sql.SET("busi_trans_no = #{busiTransNo,jdbcType=VARCHAR}");
        }
        
        if (record.getBatchNo() != null) {
            sql.SET("batch_no = #{batchNo,jdbcType=VARCHAR}");
        }
        
        if (record.getPersonAccount() != null) {
            sql.SET("person_account = #{personAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getPersonName() != null) {
            sql.SET("person_name = #{personName,jdbcType=VARCHAR}");
        }
        
        if (record.getMobileNo() != null) {
            sql.SET("mobile_no = #{mobileNo,jdbcType=CHAR}");
        }
        
        if (record.getBankCode() != null) {
            sql.SET("bank_code = #{bankCode,jdbcType=VARCHAR}");
        }
        
        if (record.getTransAmount() != null) {
            sql.SET("trans_amount = #{transAmount,jdbcType=INTEGER}");
        }
        
        if (record.getSubject() != null) {
            sql.SET("subject = #{subject,jdbcType=VARCHAR}");
        }
        
        if (record.getBody() != null) {
            sql.SET("body = #{body,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=INTEGER}");
        }
        
        if (record.getPayTime() != null) {
            sql.SET("pay_time = #{payTime,jdbcType=INTEGER}");
        }
        
        if (record.getSerNotifyTime() != null) {
            sql.SET("ser_notify_time = #{serNotifyTime,jdbcType=INTEGER}");
        }
        
        if (record.getSerNotifyStatus() != null) {
            sql.SET("ser_notify_status = #{serNotifyStatus,jdbcType=OTHER}");
        }
        
        if (record.getSerNotifyLog() != null) {
            sql.SET("ser_notify_log = #{serNotifyLog,jdbcType=VARCHAR}");
        }
        
        if (record.getCallbackUrl() != null) {
            sql.SET("callback_url = #{callbackUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getCallbackStatus() != null) {
            sql.SET("callback_status = #{callbackStatus,jdbcType=OTHER}");
        }
        
        if (record.getCallbackCount() != null) {
            sql.SET("callback_count = #{callbackCount,jdbcType=OTHER}");
        }
        
        if (record.getCallbackTime() != null) {
            sql.SET("callback_time = #{callbackTime,jdbcType=INTEGER}");
        }
        
        sql.WHERE("id = #{id,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `pay_trans_order`
     *
     * @mbggenerated
     */
    protected void applyWhere(SQL sql, PayTransOrderCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}