package com.hbc.data.trade.transfer.mapping.hbcfinal.gen;

import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalGuideorderCostapply;
import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalGuideorderCostapplyCriteria.Criteria;
import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalGuideorderCostapplyCriteria.Criterion;
import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalGuideorderCostapplyCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class FinalGuideorderCostapplySqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guideordercostapply`
     *
     * @mbggenerated
     */
    public String countByExample(FinalGuideorderCostapplyCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("`guideordercostapply`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guideordercostapply`
     *
     * @mbggenerated
     */
    public String deleteByExample(FinalGuideorderCostapplyCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("`guideordercostapply`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guideordercostapply`
     *
     * @mbggenerated
     */
    public String insertSelective(FinalGuideorderCostapply record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("`guideordercostapply`");
        
        if (record.getGuideordercostapplyid() != null) {
            sql.VALUES("guideOrderCostApplyId", "#{guideordercostapplyid,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideid() != null) {
            sql.VALUES("guideId", "#{guideid,jdbcType=INTEGER}");
        }
        
        if (record.getOrderid() != null) {
            sql.VALUES("orderId", "#{orderid,jdbcType=VARCHAR}");
        }
        
        if (record.getApplyprice() != null) {
            sql.VALUES("applyPrice", "#{applyprice,jdbcType=INTEGER}");
        }
        
        if (record.getOvertimefee() != null) {
            sql.VALUES("overTimeFee", "#{overtimefee,jdbcType=INTEGER}");
        }
        
        if (record.getOverdistancefee() != null) {
            sql.VALUES("overDistanceFee", "#{overdistancefee,jdbcType=INTEGER}");
        }
        
        if (record.getOverdayfee() != null) {
            sql.VALUES("overDayFee", "#{overdayfee,jdbcType=INTEGER}");
        }
        
        if (record.getOverpayfee() != null) {
            sql.VALUES("overPayFee", "#{overpayfee,jdbcType=INTEGER}");
        }
        
        if (record.getOverwaittimefee() != null) {
            sql.VALUES("overWaitTimeFee", "#{overwaittimefee,jdbcType=INTEGER}");
        }
        
        if (record.getReason() != null) {
            sql.VALUES("reason", "#{reason,jdbcType=VARCHAR}");
        }
        
        if (record.getCfmprice() != null) {
            sql.VALUES("cfmPrice", "#{cfmprice,jdbcType=INTEGER}");
        }
        
        if (record.getCfmovertimefee() != null) {
            sql.VALUES("cfmOverTimeFee", "#{cfmovertimefee,jdbcType=INTEGER}");
        }
        
        if (record.getCfmoverdistancefee() != null) {
            sql.VALUES("cfmOverDistanceFee", "#{cfmoverdistancefee,jdbcType=INTEGER}");
        }
        
        if (record.getCfmoverdayfee() != null) {
            sql.VALUES("cfmOverDayFee", "#{cfmoverdayfee,jdbcType=INTEGER}");
        }
        
        if (record.getCfmoverpayfee() != null) {
            sql.VALUES("cfmOverPayFee", "#{cfmoverpayfee,jdbcType=INTEGER}");
        }
        
        if (record.getCfmoverwaittimefee() != null) {
            sql.VALUES("cfmOverWaitTimeFee", "#{cfmoverwaittimefee,jdbcType=INTEGER}");
        }
        
        if (record.getComment() != null) {
            sql.VALUES("comment", "#{comment,jdbcType=VARCHAR}");
        }
        
        if (record.getActualprice() != null) {
            sql.VALUES("actualPrice", "#{actualprice,jdbcType=INTEGER}");
        }
        
        if (record.getCfmdatetime() != null) {
            sql.VALUES("cfmDateTime", "#{cfmdatetime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPaystatus() != null) {
            sql.VALUES("payStatus", "#{paystatus,jdbcType=INTEGER}");
        }
        
        if (record.getSyspayment() != null) {
            sql.VALUES("sysPayMent", "#{syspayment,jdbcType=INTEGER}");
        }
        
        if (record.getDebtcomment() != null) {
            sql.VALUES("debtComment", "#{debtcomment,jdbcType=VARCHAR}");
        }
        
        if (record.getIsclose() != null) {
            sql.VALUES("isClose", "#{isclose,jdbcType=INTEGER}");
        }
        
        if (record.getOpuserid() != null) {
            sql.VALUES("opUserId", "#{opuserid,jdbcType=INTEGER}");
        }
        
        if (record.getOpusername() != null) {
            sql.VALUES("opUserName", "#{opusername,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.VALUES("updated_at", "#{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.VALUES("created_at", "#{createdAt,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guideordercostapply`
     *
     * @mbggenerated
     */
    public String selectByExample(FinalGuideorderCostapplyCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("guideOrderCostApplyId");
        } else {
            sql.SELECT("guideOrderCostApplyId");
        }
        sql.SELECT("guideId");
        sql.SELECT("orderId");
        sql.SELECT("applyPrice");
        sql.SELECT("overTimeFee");
        sql.SELECT("overDistanceFee");
        sql.SELECT("overDayFee");
        sql.SELECT("overPayFee");
        sql.SELECT("overWaitTimeFee");
        sql.SELECT("reason");
        sql.SELECT("cfmPrice");
        sql.SELECT("cfmOverTimeFee");
        sql.SELECT("cfmOverDistanceFee");
        sql.SELECT("cfmOverDayFee");
        sql.SELECT("cfmOverPayFee");
        sql.SELECT("cfmOverWaitTimeFee");
        sql.SELECT("comment");
        sql.SELECT("actualPrice");
        sql.SELECT("cfmDateTime");
        sql.SELECT("payStatus");
        sql.SELECT("sysPayMent");
        sql.SELECT("debtComment");
        sql.SELECT("isClose");
        sql.SELECT("opUserId");
        sql.SELECT("opUserName");
        sql.SELECT("updated_at");
        sql.SELECT("created_at");
        sql.FROM("`guideordercostapply`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guideordercostapply`
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        FinalGuideorderCostapply record = (FinalGuideorderCostapply) parameter.get("record");
        FinalGuideorderCostapplyCriteria example = (FinalGuideorderCostapplyCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("`guideordercostapply`");
        
        if (record.getGuideordercostapplyid() != null) {
            sql.SET("guideOrderCostApplyId = #{record.guideordercostapplyid,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideid() != null) {
            sql.SET("guideId = #{record.guideid,jdbcType=INTEGER}");
        }
        
        if (record.getOrderid() != null) {
            sql.SET("orderId = #{record.orderid,jdbcType=VARCHAR}");
        }
        
        if (record.getApplyprice() != null) {
            sql.SET("applyPrice = #{record.applyprice,jdbcType=INTEGER}");
        }
        
        if (record.getOvertimefee() != null) {
            sql.SET("overTimeFee = #{record.overtimefee,jdbcType=INTEGER}");
        }
        
        if (record.getOverdistancefee() != null) {
            sql.SET("overDistanceFee = #{record.overdistancefee,jdbcType=INTEGER}");
        }
        
        if (record.getOverdayfee() != null) {
            sql.SET("overDayFee = #{record.overdayfee,jdbcType=INTEGER}");
        }
        
        if (record.getOverpayfee() != null) {
            sql.SET("overPayFee = #{record.overpayfee,jdbcType=INTEGER}");
        }
        
        if (record.getOverwaittimefee() != null) {
            sql.SET("overWaitTimeFee = #{record.overwaittimefee,jdbcType=INTEGER}");
        }
        
        if (record.getReason() != null) {
            sql.SET("reason = #{record.reason,jdbcType=VARCHAR}");
        }
        
        if (record.getCfmprice() != null) {
            sql.SET("cfmPrice = #{record.cfmprice,jdbcType=INTEGER}");
        }
        
        if (record.getCfmovertimefee() != null) {
            sql.SET("cfmOverTimeFee = #{record.cfmovertimefee,jdbcType=INTEGER}");
        }
        
        if (record.getCfmoverdistancefee() != null) {
            sql.SET("cfmOverDistanceFee = #{record.cfmoverdistancefee,jdbcType=INTEGER}");
        }
        
        if (record.getCfmoverdayfee() != null) {
            sql.SET("cfmOverDayFee = #{record.cfmoverdayfee,jdbcType=INTEGER}");
        }
        
        if (record.getCfmoverpayfee() != null) {
            sql.SET("cfmOverPayFee = #{record.cfmoverpayfee,jdbcType=INTEGER}");
        }
        
        if (record.getCfmoverwaittimefee() != null) {
            sql.SET("cfmOverWaitTimeFee = #{record.cfmoverwaittimefee,jdbcType=INTEGER}");
        }
        
        if (record.getComment() != null) {
            sql.SET("comment = #{record.comment,jdbcType=VARCHAR}");
        }
        
        if (record.getActualprice() != null) {
            sql.SET("actualPrice = #{record.actualprice,jdbcType=INTEGER}");
        }
        
        if (record.getCfmdatetime() != null) {
            sql.SET("cfmDateTime = #{record.cfmdatetime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPaystatus() != null) {
            sql.SET("payStatus = #{record.paystatus,jdbcType=INTEGER}");
        }
        
        if (record.getSyspayment() != null) {
            sql.SET("sysPayMent = #{record.syspayment,jdbcType=INTEGER}");
        }
        
        if (record.getDebtcomment() != null) {
            sql.SET("debtComment = #{record.debtcomment,jdbcType=VARCHAR}");
        }
        
        if (record.getIsclose() != null) {
            sql.SET("isClose = #{record.isclose,jdbcType=INTEGER}");
        }
        
        if (record.getOpuserid() != null) {
            sql.SET("opUserId = #{record.opuserid,jdbcType=INTEGER}");
        }
        
        if (record.getOpusername() != null) {
            sql.SET("opUserName = #{record.opusername,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guideordercostapply`
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`guideordercostapply`");
        
        sql.SET("guideOrderCostApplyId = #{record.guideordercostapplyid,jdbcType=VARCHAR}");
        sql.SET("guideId = #{record.guideid,jdbcType=INTEGER}");
        sql.SET("orderId = #{record.orderid,jdbcType=VARCHAR}");
        sql.SET("applyPrice = #{record.applyprice,jdbcType=INTEGER}");
        sql.SET("overTimeFee = #{record.overtimefee,jdbcType=INTEGER}");
        sql.SET("overDistanceFee = #{record.overdistancefee,jdbcType=INTEGER}");
        sql.SET("overDayFee = #{record.overdayfee,jdbcType=INTEGER}");
        sql.SET("overPayFee = #{record.overpayfee,jdbcType=INTEGER}");
        sql.SET("overWaitTimeFee = #{record.overwaittimefee,jdbcType=INTEGER}");
        sql.SET("reason = #{record.reason,jdbcType=VARCHAR}");
        sql.SET("cfmPrice = #{record.cfmprice,jdbcType=INTEGER}");
        sql.SET("cfmOverTimeFee = #{record.cfmovertimefee,jdbcType=INTEGER}");
        sql.SET("cfmOverDistanceFee = #{record.cfmoverdistancefee,jdbcType=INTEGER}");
        sql.SET("cfmOverDayFee = #{record.cfmoverdayfee,jdbcType=INTEGER}");
        sql.SET("cfmOverPayFee = #{record.cfmoverpayfee,jdbcType=INTEGER}");
        sql.SET("cfmOverWaitTimeFee = #{record.cfmoverwaittimefee,jdbcType=INTEGER}");
        sql.SET("comment = #{record.comment,jdbcType=VARCHAR}");
        sql.SET("actualPrice = #{record.actualprice,jdbcType=INTEGER}");
        sql.SET("cfmDateTime = #{record.cfmdatetime,jdbcType=TIMESTAMP}");
        sql.SET("payStatus = #{record.paystatus,jdbcType=INTEGER}");
        sql.SET("sysPayMent = #{record.syspayment,jdbcType=INTEGER}");
        sql.SET("debtComment = #{record.debtcomment,jdbcType=VARCHAR}");
        sql.SET("isClose = #{record.isclose,jdbcType=INTEGER}");
        sql.SET("opUserId = #{record.opuserid,jdbcType=INTEGER}");
        sql.SET("opUserName = #{record.opusername,jdbcType=VARCHAR}");
        sql.SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        sql.SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        
        FinalGuideorderCostapplyCriteria example = (FinalGuideorderCostapplyCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guideordercostapply`
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(FinalGuideorderCostapply record) {
        SQL sql = new SQL();
        sql.UPDATE("`guideordercostapply`");
        
        if (record.getGuideid() != null) {
            sql.SET("guideId = #{guideid,jdbcType=INTEGER}");
        }
        
        if (record.getOrderid() != null) {
            sql.SET("orderId = #{orderid,jdbcType=VARCHAR}");
        }
        
        if (record.getApplyprice() != null) {
            sql.SET("applyPrice = #{applyprice,jdbcType=INTEGER}");
        }
        
        if (record.getOvertimefee() != null) {
            sql.SET("overTimeFee = #{overtimefee,jdbcType=INTEGER}");
        }
        
        if (record.getOverdistancefee() != null) {
            sql.SET("overDistanceFee = #{overdistancefee,jdbcType=INTEGER}");
        }
        
        if (record.getOverdayfee() != null) {
            sql.SET("overDayFee = #{overdayfee,jdbcType=INTEGER}");
        }
        
        if (record.getOverpayfee() != null) {
            sql.SET("overPayFee = #{overpayfee,jdbcType=INTEGER}");
        }
        
        if (record.getOverwaittimefee() != null) {
            sql.SET("overWaitTimeFee = #{overwaittimefee,jdbcType=INTEGER}");
        }
        
        if (record.getReason() != null) {
            sql.SET("reason = #{reason,jdbcType=VARCHAR}");
        }
        
        if (record.getCfmprice() != null) {
            sql.SET("cfmPrice = #{cfmprice,jdbcType=INTEGER}");
        }
        
        if (record.getCfmovertimefee() != null) {
            sql.SET("cfmOverTimeFee = #{cfmovertimefee,jdbcType=INTEGER}");
        }
        
        if (record.getCfmoverdistancefee() != null) {
            sql.SET("cfmOverDistanceFee = #{cfmoverdistancefee,jdbcType=INTEGER}");
        }
        
        if (record.getCfmoverdayfee() != null) {
            sql.SET("cfmOverDayFee = #{cfmoverdayfee,jdbcType=INTEGER}");
        }
        
        if (record.getCfmoverpayfee() != null) {
            sql.SET("cfmOverPayFee = #{cfmoverpayfee,jdbcType=INTEGER}");
        }
        
        if (record.getCfmoverwaittimefee() != null) {
            sql.SET("cfmOverWaitTimeFee = #{cfmoverwaittimefee,jdbcType=INTEGER}");
        }
        
        if (record.getComment() != null) {
            sql.SET("comment = #{comment,jdbcType=VARCHAR}");
        }
        
        if (record.getActualprice() != null) {
            sql.SET("actualPrice = #{actualprice,jdbcType=INTEGER}");
        }
        
        if (record.getCfmdatetime() != null) {
            sql.SET("cfmDateTime = #{cfmdatetime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPaystatus() != null) {
            sql.SET("payStatus = #{paystatus,jdbcType=INTEGER}");
        }
        
        if (record.getSyspayment() != null) {
            sql.SET("sysPayMent = #{syspayment,jdbcType=INTEGER}");
        }
        
        if (record.getDebtcomment() != null) {
            sql.SET("debtComment = #{debtcomment,jdbcType=VARCHAR}");
        }
        
        if (record.getIsclose() != null) {
            sql.SET("isClose = #{isclose,jdbcType=INTEGER}");
        }
        
        if (record.getOpuserid() != null) {
            sql.SET("opUserId = #{opuserid,jdbcType=INTEGER}");
        }
        
        if (record.getOpusername() != null) {
            sql.SET("opUserName = #{opusername,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.SET("updated_at = #{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.SET("created_at = #{createdAt,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("guideOrderCostApplyId = #{guideordercostapplyid,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guideordercostapply`
     *
     * @mbggenerated
     */
    protected void applyWhere(SQL sql, FinalGuideorderCostapplyCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}