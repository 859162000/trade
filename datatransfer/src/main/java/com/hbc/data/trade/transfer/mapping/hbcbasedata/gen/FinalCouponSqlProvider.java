package com.hbc.data.trade.transfer.mapping.hbcbasedata.gen;

import com.hbc.data.trade.transfer.mapping.hbcbasedata.gen.bean.FinalCoupon;
import com.hbc.data.trade.transfer.mapping.hbcbasedata.gen.bean.FinalCouponCriteria.Criteria;
import com.hbc.data.trade.transfer.mapping.hbcbasedata.gen.bean.FinalCouponCriteria.Criterion;
import com.hbc.data.trade.transfer.mapping.hbcbasedata.gen.bean.FinalCouponCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class FinalCouponSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `coupon`
     *
     * @mbggenerated
     */
    public String countByExample(FinalCouponCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("`coupon`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `coupon`
     *
     * @mbggenerated
     */
    public String deleteByExample(FinalCouponCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("`coupon`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `coupon`
     *
     * @mbggenerated
     */
    public String insertSelective(FinalCoupon record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("`coupon`");
        
        if (record.getCouponid() != null) {
            sql.VALUES("couponId", "#{couponid,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponbatchid() != null) {
            sql.VALUES("couponBatchId", "#{couponbatchid,jdbcType=VARCHAR}");
        }
        
        if (record.getPackageId() != null) {
            sql.VALUES("package_id", "#{packageId,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponcode() != null) {
            sql.VALUES("couponCode", "#{couponcode,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderId() != null) {
            sql.VALUES("order_id", "#{orderId,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponprice() != null) {
            sql.VALUES("couponPrice", "#{couponprice,jdbcType=INTEGER}");
        }
        
        if (record.getCoupondiscount() != null) {
            sql.VALUES("couponDiscount", "#{coupondiscount,jdbcType=INTEGER}");
        }
        
        if (record.getPassword() != null) {
            sql.VALUES("password", "#{password,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.VALUES("status", "#{status,jdbcType=INTEGER}");
        }
        
        if (record.getBindusertype() != null) {
            sql.VALUES("bindUserType", "#{bindusertype,jdbcType=INTEGER}");
        }
        
        if (record.getBinduserid() != null) {
            sql.VALUES("bindUserId", "#{binduserid,jdbcType=VARCHAR}");
        }
        
        if (record.getBinddatetime() != null) {
            sql.VALUES("bindDateTime", "#{binddatetime,jdbcType=INTEGER}");
        }
        
        if (record.getUseuserid() != null) {
            sql.VALUES("useUserId", "#{useuserid,jdbcType=VARCHAR}");
        }
        
        if (record.getUsedatetime() != null) {
            sql.VALUES("useDateTIme", "#{usedatetime,jdbcType=INTEGER}");
        }
        
        if (record.getCoupontype() != null) {
            sql.VALUES("couponType", "#{coupontype,jdbcType=INTEGER}");
        }
        
        if (record.getTransfercount() != null) {
            sql.VALUES("transferCount", "#{transfercount,jdbcType=INTEGER}");
        }
        
        if (record.getFromusertype() != null) {
            sql.VALUES("fromUserType", "#{fromusertype,jdbcType=INTEGER}");
        }
        
        if (record.getFromuserid() != null) {
            sql.VALUES("fromUserId", "#{fromuserid,jdbcType=VARCHAR}");
        }
        
        if (record.getVendorid() != null) {
            sql.VALUES("vendorId", "#{vendorid,jdbcType=VARCHAR}");
        }
        
        if (record.getVendortype() != null) {
            sql.VALUES("vendorType", "#{vendortype,jdbcType=INTEGER}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.VALUES("updated_at", "#{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.VALUES("created_at", "#{createdAt,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `coupon`
     *
     * @mbggenerated
     */
    public String selectByExample(FinalCouponCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("couponId");
        } else {
            sql.SELECT("couponId");
        }
        sql.SELECT("couponBatchId");
        sql.SELECT("package_id");
        sql.SELECT("couponCode");
        sql.SELECT("order_id");
        sql.SELECT("couponPrice");
        sql.SELECT("couponDiscount");
        sql.SELECT("password");
        sql.SELECT("status");
        sql.SELECT("bindUserType");
        sql.SELECT("bindUserId");
        sql.SELECT("bindDateTime");
        sql.SELECT("useUserId");
        sql.SELECT("useDateTIme");
        sql.SELECT("couponType");
        sql.SELECT("transferCount");
        sql.SELECT("fromUserType");
        sql.SELECT("fromUserId");
        sql.SELECT("vendorId");
        sql.SELECT("vendorType");
        sql.SELECT("updated_at");
        sql.SELECT("created_at");
        sql.FROM("`coupon`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `coupon`
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        FinalCoupon record = (FinalCoupon) parameter.get("record");
        FinalCouponCriteria example = (FinalCouponCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("`coupon`");
        
        if (record.getCouponid() != null) {
            sql.SET("couponId = #{record.couponid,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponbatchid() != null) {
            sql.SET("couponBatchId = #{record.couponbatchid,jdbcType=VARCHAR}");
        }
        
        if (record.getPackageId() != null) {
            sql.SET("package_id = #{record.packageId,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponcode() != null) {
            sql.SET("couponCode = #{record.couponcode,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderId() != null) {
            sql.SET("order_id = #{record.orderId,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponprice() != null) {
            sql.SET("couponPrice = #{record.couponprice,jdbcType=INTEGER}");
        }
        
        if (record.getCoupondiscount() != null) {
            sql.SET("couponDiscount = #{record.coupondiscount,jdbcType=INTEGER}");
        }
        
        if (record.getPassword() != null) {
            sql.SET("password = #{record.password,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{record.status,jdbcType=INTEGER}");
        }
        
        if (record.getBindusertype() != null) {
            sql.SET("bindUserType = #{record.bindusertype,jdbcType=INTEGER}");
        }
        
        if (record.getBinduserid() != null) {
            sql.SET("bindUserId = #{record.binduserid,jdbcType=VARCHAR}");
        }
        
        if (record.getBinddatetime() != null) {
            sql.SET("bindDateTime = #{record.binddatetime,jdbcType=INTEGER}");
        }
        
        if (record.getUseuserid() != null) {
            sql.SET("useUserId = #{record.useuserid,jdbcType=VARCHAR}");
        }
        
        if (record.getUsedatetime() != null) {
            sql.SET("useDateTIme = #{record.usedatetime,jdbcType=INTEGER}");
        }
        
        if (record.getCoupontype() != null) {
            sql.SET("couponType = #{record.coupontype,jdbcType=INTEGER}");
        }
        
        if (record.getTransfercount() != null) {
            sql.SET("transferCount = #{record.transfercount,jdbcType=INTEGER}");
        }
        
        if (record.getFromusertype() != null) {
            sql.SET("fromUserType = #{record.fromusertype,jdbcType=INTEGER}");
        }
        
        if (record.getFromuserid() != null) {
            sql.SET("fromUserId = #{record.fromuserid,jdbcType=VARCHAR}");
        }
        
        if (record.getVendorid() != null) {
            sql.SET("vendorId = #{record.vendorid,jdbcType=VARCHAR}");
        }
        
        if (record.getVendortype() != null) {
            sql.SET("vendorType = #{record.vendortype,jdbcType=INTEGER}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `coupon`
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`coupon`");
        
        sql.SET("couponId = #{record.couponid,jdbcType=VARCHAR}");
        sql.SET("couponBatchId = #{record.couponbatchid,jdbcType=VARCHAR}");
        sql.SET("package_id = #{record.packageId,jdbcType=VARCHAR}");
        sql.SET("couponCode = #{record.couponcode,jdbcType=VARCHAR}");
        sql.SET("order_id = #{record.orderId,jdbcType=VARCHAR}");
        sql.SET("couponPrice = #{record.couponprice,jdbcType=INTEGER}");
        sql.SET("couponDiscount = #{record.coupondiscount,jdbcType=INTEGER}");
        sql.SET("password = #{record.password,jdbcType=VARCHAR}");
        sql.SET("status = #{record.status,jdbcType=INTEGER}");
        sql.SET("bindUserType = #{record.bindusertype,jdbcType=INTEGER}");
        sql.SET("bindUserId = #{record.binduserid,jdbcType=VARCHAR}");
        sql.SET("bindDateTime = #{record.binddatetime,jdbcType=INTEGER}");
        sql.SET("useUserId = #{record.useuserid,jdbcType=VARCHAR}");
        sql.SET("useDateTIme = #{record.usedatetime,jdbcType=INTEGER}");
        sql.SET("couponType = #{record.coupontype,jdbcType=INTEGER}");
        sql.SET("transferCount = #{record.transfercount,jdbcType=INTEGER}");
        sql.SET("fromUserType = #{record.fromusertype,jdbcType=INTEGER}");
        sql.SET("fromUserId = #{record.fromuserid,jdbcType=VARCHAR}");
        sql.SET("vendorId = #{record.vendorid,jdbcType=VARCHAR}");
        sql.SET("vendorType = #{record.vendortype,jdbcType=INTEGER}");
        sql.SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        sql.SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        
        FinalCouponCriteria example = (FinalCouponCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `coupon`
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(FinalCoupon record) {
        SQL sql = new SQL();
        sql.UPDATE("`coupon`");
        
        if (record.getCouponbatchid() != null) {
            sql.SET("couponBatchId = #{couponbatchid,jdbcType=VARCHAR}");
        }
        
        if (record.getPackageId() != null) {
            sql.SET("package_id = #{packageId,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponcode() != null) {
            sql.SET("couponCode = #{couponcode,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderId() != null) {
            sql.SET("order_id = #{orderId,jdbcType=VARCHAR}");
        }
        
        if (record.getCouponprice() != null) {
            sql.SET("couponPrice = #{couponprice,jdbcType=INTEGER}");
        }
        
        if (record.getCoupondiscount() != null) {
            sql.SET("couponDiscount = #{coupondiscount,jdbcType=INTEGER}");
        }
        
        if (record.getPassword() != null) {
            sql.SET("password = #{password,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=INTEGER}");
        }
        
        if (record.getBindusertype() != null) {
            sql.SET("bindUserType = #{bindusertype,jdbcType=INTEGER}");
        }
        
        if (record.getBinduserid() != null) {
            sql.SET("bindUserId = #{binduserid,jdbcType=VARCHAR}");
        }
        
        if (record.getBinddatetime() != null) {
            sql.SET("bindDateTime = #{binddatetime,jdbcType=INTEGER}");
        }
        
        if (record.getUseuserid() != null) {
            sql.SET("useUserId = #{useuserid,jdbcType=VARCHAR}");
        }
        
        if (record.getUsedatetime() != null) {
            sql.SET("useDateTIme = #{usedatetime,jdbcType=INTEGER}");
        }
        
        if (record.getCoupontype() != null) {
            sql.SET("couponType = #{coupontype,jdbcType=INTEGER}");
        }
        
        if (record.getTransfercount() != null) {
            sql.SET("transferCount = #{transfercount,jdbcType=INTEGER}");
        }
        
        if (record.getFromusertype() != null) {
            sql.SET("fromUserType = #{fromusertype,jdbcType=INTEGER}");
        }
        
        if (record.getFromuserid() != null) {
            sql.SET("fromUserId = #{fromuserid,jdbcType=VARCHAR}");
        }
        
        if (record.getVendorid() != null) {
            sql.SET("vendorId = #{vendorid,jdbcType=VARCHAR}");
        }
        
        if (record.getVendortype() != null) {
            sql.SET("vendorType = #{vendortype,jdbcType=INTEGER}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.SET("updated_at = #{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.SET("created_at = #{createdAt,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("couponId = #{couponid,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `coupon`
     *
     * @mbggenerated
     */
    protected void applyWhere(SQL sql, FinalCouponCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}