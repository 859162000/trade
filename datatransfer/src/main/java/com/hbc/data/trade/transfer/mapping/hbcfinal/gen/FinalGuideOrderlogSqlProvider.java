package com.hbc.data.trade.transfer.mapping.hbcfinal.gen;

import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalGuideOrderlog;
import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalGuideOrderlogCriteria.Criteria;
import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalGuideOrderlogCriteria.Criterion;
import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalGuideOrderlogCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class FinalGuideOrderlogSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guideorderlog`
     *
     * @mbggenerated
     */
    public String countByExample(FinalGuideOrderlogCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("`guideorderlog`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guideorderlog`
     *
     * @mbggenerated
     */
    public String deleteByExample(FinalGuideOrderlogCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("`guideorderlog`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guideorderlog`
     *
     * @mbggenerated
     */
    public String insertSelective(FinalGuideOrderlog record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("`guideorderlog`");
        
        if (record.getGuideorderlogid() != null) {
            sql.VALUES("guideOrderLogId", "#{guideorderlogid,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideid() != null) {
            sql.VALUES("guideId", "#{guideid,jdbcType=INTEGER}");
        }
        
        if (record.getOrderid() != null) {
            sql.VALUES("orderId", "#{orderid,jdbcType=VARCHAR}");
        }
        
        if (record.getOptype() != null) {
            sql.VALUES("opType", "#{optype,jdbcType=INTEGER}");
        }
        
        if (record.getGuideno() != null) {
            sql.VALUES("guideNo", "#{guideno,jdbcType=VARCHAR}");
        }
        
        if (record.getGuidename() != null) {
            sql.VALUES("guideName", "#{guidename,jdbcType=VARCHAR}");
        }
        
        if (record.getOrdertype() != null) {
            sql.VALUES("orderType", "#{ordertype,jdbcType=TINYINT}");
        }
        
        if (record.getOptime() != null) {
            sql.VALUES("opTime", "#{optime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getOplocaltime() != null) {
            sql.VALUES("opLocalTime", "#{oplocaltime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getOpapptime() != null) {
            sql.VALUES("opAppTime", "#{opapptime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getContent() != null) {
            sql.VALUES("content", "#{content,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.VALUES("updated_at", "#{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.VALUES("created_at", "#{createdAt,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guideorderlog`
     *
     * @mbggenerated
     */
    public String selectByExample(FinalGuideOrderlogCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("guideOrderLogId");
        } else {
            sql.SELECT("guideOrderLogId");
        }
        sql.SELECT("guideId");
        sql.SELECT("orderId");
        sql.SELECT("opType");
        sql.SELECT("guideNo");
        sql.SELECT("guideName");
        sql.SELECT("orderType");
        sql.SELECT("opTime");
        sql.SELECT("opLocalTime");
        sql.SELECT("opAppTime");
        sql.SELECT("content");
        sql.SELECT("updated_at");
        sql.SELECT("created_at");
        sql.FROM("`guideorderlog`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guideorderlog`
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        FinalGuideOrderlog record = (FinalGuideOrderlog) parameter.get("record");
        FinalGuideOrderlogCriteria example = (FinalGuideOrderlogCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("`guideorderlog`");
        
        if (record.getGuideorderlogid() != null) {
            sql.SET("guideOrderLogId = #{record.guideorderlogid,jdbcType=VARCHAR}");
        }
        
        if (record.getGuideid() != null) {
            sql.SET("guideId = #{record.guideid,jdbcType=INTEGER}");
        }
        
        if (record.getOrderid() != null) {
            sql.SET("orderId = #{record.orderid,jdbcType=VARCHAR}");
        }
        
        if (record.getOptype() != null) {
            sql.SET("opType = #{record.optype,jdbcType=INTEGER}");
        }
        
        if (record.getGuideno() != null) {
            sql.SET("guideNo = #{record.guideno,jdbcType=VARCHAR}");
        }
        
        if (record.getGuidename() != null) {
            sql.SET("guideName = #{record.guidename,jdbcType=VARCHAR}");
        }
        
        if (record.getOrdertype() != null) {
            sql.SET("orderType = #{record.ordertype,jdbcType=TINYINT}");
        }
        
        if (record.getOptime() != null) {
            sql.SET("opTime = #{record.optime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getOplocaltime() != null) {
            sql.SET("opLocalTime = #{record.oplocaltime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getOpapptime() != null) {
            sql.SET("opAppTime = #{record.opapptime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getContent() != null) {
            sql.SET("content = #{record.content,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guideorderlog`
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`guideorderlog`");
        
        sql.SET("guideOrderLogId = #{record.guideorderlogid,jdbcType=VARCHAR}");
        sql.SET("guideId = #{record.guideid,jdbcType=INTEGER}");
        sql.SET("orderId = #{record.orderid,jdbcType=VARCHAR}");
        sql.SET("opType = #{record.optype,jdbcType=INTEGER}");
        sql.SET("guideNo = #{record.guideno,jdbcType=VARCHAR}");
        sql.SET("guideName = #{record.guidename,jdbcType=VARCHAR}");
        sql.SET("orderType = #{record.ordertype,jdbcType=TINYINT}");
        sql.SET("opTime = #{record.optime,jdbcType=TIMESTAMP}");
        sql.SET("opLocalTime = #{record.oplocaltime,jdbcType=TIMESTAMP}");
        sql.SET("opAppTime = #{record.opapptime,jdbcType=TIMESTAMP}");
        sql.SET("content = #{record.content,jdbcType=VARCHAR}");
        sql.SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        sql.SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        
        FinalGuideOrderlogCriteria example = (FinalGuideOrderlogCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guideorderlog`
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(FinalGuideOrderlog record) {
        SQL sql = new SQL();
        sql.UPDATE("`guideorderlog`");
        
        if (record.getGuideid() != null) {
            sql.SET("guideId = #{guideid,jdbcType=INTEGER}");
        }
        
        if (record.getOrderid() != null) {
            sql.SET("orderId = #{orderid,jdbcType=VARCHAR}");
        }
        
        if (record.getOptype() != null) {
            sql.SET("opType = #{optype,jdbcType=INTEGER}");
        }
        
        if (record.getGuideno() != null) {
            sql.SET("guideNo = #{guideno,jdbcType=VARCHAR}");
        }
        
        if (record.getGuidename() != null) {
            sql.SET("guideName = #{guidename,jdbcType=VARCHAR}");
        }
        
        if (record.getOrdertype() != null) {
            sql.SET("orderType = #{ordertype,jdbcType=TINYINT}");
        }
        
        if (record.getOptime() != null) {
            sql.SET("opTime = #{optime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getOplocaltime() != null) {
            sql.SET("opLocalTime = #{oplocaltime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getOpapptime() != null) {
            sql.SET("opAppTime = #{opapptime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getContent() != null) {
            sql.SET("content = #{content,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.SET("updated_at = #{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.SET("created_at = #{createdAt,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("guideOrderLogId = #{guideorderlogid,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guideorderlog`
     *
     * @mbggenerated
     */
    protected void applyWhere(SQL sql, FinalGuideOrderlogCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}