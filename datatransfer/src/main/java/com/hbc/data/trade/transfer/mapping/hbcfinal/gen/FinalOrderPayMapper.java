package com.hbc.data.trade.transfer.mapping.hbcfinal.gen;

import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalOrderPay;
import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalOrderPayCriteria;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.type.JdbcType;

public interface FinalOrderPayMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpay`
     *
     * @mbggenerated
     */
    @SelectProvider(type=FinalOrderPaySqlProvider.class, method="countByExample")
    int countByExample(FinalOrderPayCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpay`
     *
     * @mbggenerated
     */
    @DeleteProvider(type=FinalOrderPaySqlProvider.class, method="deleteByExample")
    int deleteByExample(FinalOrderPayCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpay`
     *
     * @mbggenerated
     */
    @Delete({
        "delete from `orderpay`",
        "where orderId = #{orderid,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String orderid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpay`
     *
     * @mbggenerated
     */
    @Insert({
        "insert into `orderpay` (orderId, payType, ",
        "orderPrice, costPrice, ",
        "actualPay, couponPay, ",
        "refundPrice, couponId, ",
        "updated_at, created_at)",
        "values (#{orderid,jdbcType=VARCHAR}, #{paytype,jdbcType=INTEGER}, ",
        "#{orderprice,jdbcType=INTEGER}, #{costprice,jdbcType=INTEGER}, ",
        "#{actualpay,jdbcType=INTEGER}, #{couponpay,jdbcType=INTEGER}, ",
        "#{refundprice,jdbcType=INTEGER}, #{couponid,jdbcType=VARCHAR}, ",
        "#{updatedAt,jdbcType=TIMESTAMP}, #{createdAt,jdbcType=TIMESTAMP})"
    })
    int insert(FinalOrderPay record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpay`
     *
     * @mbggenerated
     */
    @InsertProvider(type=FinalOrderPaySqlProvider.class, method="insertSelective")
    int insertSelective(FinalOrderPay record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpay`
     *
     * @mbggenerated
     */
    @SelectProvider(type=FinalOrderPaySqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="orderId", property="orderid", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="payType", property="paytype", jdbcType=JdbcType.INTEGER),
        @Result(column="orderPrice", property="orderprice", jdbcType=JdbcType.INTEGER),
        @Result(column="costPrice", property="costprice", jdbcType=JdbcType.INTEGER),
        @Result(column="actualPay", property="actualpay", jdbcType=JdbcType.INTEGER),
        @Result(column="couponPay", property="couponpay", jdbcType=JdbcType.INTEGER),
        @Result(column="refundPrice", property="refundprice", jdbcType=JdbcType.INTEGER),
        @Result(column="couponId", property="couponid", jdbcType=JdbcType.VARCHAR),
        @Result(column="updated_at", property="updatedAt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="created_at", property="createdAt", jdbcType=JdbcType.TIMESTAMP)
    })
    List<FinalOrderPay> selectByExampleWithRowbounds(FinalOrderPayCriteria example, RowBounds rowBounds);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpay`
     *
     * @mbggenerated
     */
    @SelectProvider(type=FinalOrderPaySqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="orderId", property="orderid", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="payType", property="paytype", jdbcType=JdbcType.INTEGER),
        @Result(column="orderPrice", property="orderprice", jdbcType=JdbcType.INTEGER),
        @Result(column="costPrice", property="costprice", jdbcType=JdbcType.INTEGER),
        @Result(column="actualPay", property="actualpay", jdbcType=JdbcType.INTEGER),
        @Result(column="couponPay", property="couponpay", jdbcType=JdbcType.INTEGER),
        @Result(column="refundPrice", property="refundprice", jdbcType=JdbcType.INTEGER),
        @Result(column="couponId", property="couponid", jdbcType=JdbcType.VARCHAR),
        @Result(column="updated_at", property="updatedAt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="created_at", property="createdAt", jdbcType=JdbcType.TIMESTAMP)
    })
    List<FinalOrderPay> selectByExample(FinalOrderPayCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpay`
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "orderId, payType, orderPrice, costPrice, actualPay, couponPay, refundPrice, ",
        "couponId, updated_at, created_at",
        "from `orderpay`",
        "where orderId = #{orderid,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="orderId", property="orderid", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="payType", property="paytype", jdbcType=JdbcType.INTEGER),
        @Result(column="orderPrice", property="orderprice", jdbcType=JdbcType.INTEGER),
        @Result(column="costPrice", property="costprice", jdbcType=JdbcType.INTEGER),
        @Result(column="actualPay", property="actualpay", jdbcType=JdbcType.INTEGER),
        @Result(column="couponPay", property="couponpay", jdbcType=JdbcType.INTEGER),
        @Result(column="refundPrice", property="refundprice", jdbcType=JdbcType.INTEGER),
        @Result(column="couponId", property="couponid", jdbcType=JdbcType.VARCHAR),
        @Result(column="updated_at", property="updatedAt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="created_at", property="createdAt", jdbcType=JdbcType.TIMESTAMP)
    })
    FinalOrderPay selectByPrimaryKey(String orderid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpay`
     *
     * @mbggenerated
     */
    @UpdateProvider(type=FinalOrderPaySqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") FinalOrderPay record, @Param("example") FinalOrderPayCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpay`
     *
     * @mbggenerated
     */
    @UpdateProvider(type=FinalOrderPaySqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") FinalOrderPay record, @Param("example") FinalOrderPayCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpay`
     *
     * @mbggenerated
     */
    @UpdateProvider(type=FinalOrderPaySqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(FinalOrderPay record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpay`
     *
     * @mbggenerated
     */
    @Update({
        "update `orderpay`",
        "set payType = #{paytype,jdbcType=INTEGER},",
          "orderPrice = #{orderprice,jdbcType=INTEGER},",
          "costPrice = #{costprice,jdbcType=INTEGER},",
          "actualPay = #{actualpay,jdbcType=INTEGER},",
          "couponPay = #{couponpay,jdbcType=INTEGER},",
          "refundPrice = #{refundprice,jdbcType=INTEGER},",
          "couponId = #{couponid,jdbcType=VARCHAR},",
          "updated_at = #{updatedAt,jdbcType=TIMESTAMP},",
          "created_at = #{createdAt,jdbcType=TIMESTAMP}",
        "where orderId = #{orderid,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(FinalOrderPay record);
}