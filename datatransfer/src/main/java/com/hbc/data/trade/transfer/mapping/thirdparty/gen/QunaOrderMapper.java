package com.hbc.data.trade.transfer.mapping.thirdparty.gen;

import com.hbc.data.trade.transfer.mapping.thirdparty.gen.bean.QunaOrder;
import com.hbc.data.trade.transfer.mapping.thirdparty.gen.bean.QunaOrderCriteria;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.type.JdbcType;

public interface QunaOrderMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `qorder`
     *
     * @mbggenerated
     */
    @SelectProvider(type=QunaOrderSqlProvider.class, method="countByExample")
    int countByExample(QunaOrderCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `qorder`
     *
     * @mbggenerated
     */
    @DeleteProvider(type=QunaOrderSqlProvider.class, method="deleteByExample")
    int deleteByExample(QunaOrderCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `qorder`
     *
     * @mbggenerated
     */
    @Delete({
        "delete from `qorder`",
        "where qOrderId = #{qorderid,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String qorderid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `qorder`
     *
     * @mbggenerated
     */
    @Insert({
        "insert into `qorder` (qOrderId, vOrderId, ",
        "flightNo, airportCode, ",
        "depFlightTime, depCityName, ",
        "depAirportThreeCode, serviceType, ",
        "serviceTypeRefine, carType, ",
        "currency, orderType, ",
        "totalPrice, distance, ",
        "estimatedTime, country, ",
        "city, fromAddrName, ",
        "fromAddrDetail, fromLong, ",
        "fromLat, toAddrName, ",
        "toAddrDetail, toLong, ",
        "toLat, orderTime, ",
        "orderTimeMs, createTime, ",
        "createTimeMs, cancelType, ",
        "cancelTime, cancelTimeMs, ",
        "status, remark, ",
        "updated_at, created_at)",
        "values (#{qorderid,jdbcType=VARCHAR}, #{vorderid,jdbcType=VARCHAR}, ",
        "#{flightno,jdbcType=VARCHAR}, #{airportcode,jdbcType=VARCHAR}, ",
        "#{depflighttime,jdbcType=TIMESTAMP}, #{depcityname,jdbcType=VARCHAR}, ",
        "#{depairportthreecode,jdbcType=VARCHAR}, #{servicetype,jdbcType=INTEGER}, ",
        "#{servicetyperefine,jdbcType=INTEGER}, #{cartype,jdbcType=INTEGER}, ",
        "#{currency,jdbcType=VARCHAR}, #{ordertype,jdbcType=INTEGER}, ",
        "#{totalprice,jdbcType=DECIMAL}, #{distance,jdbcType=INTEGER}, ",
        "#{estimatedtime,jdbcType=INTEGER}, #{country,jdbcType=VARCHAR}, ",
        "#{city,jdbcType=VARCHAR}, #{fromaddrname,jdbcType=VARCHAR}, ",
        "#{fromaddrdetail,jdbcType=VARCHAR}, #{fromlong,jdbcType=DOUBLE}, ",
        "#{fromlat,jdbcType=DOUBLE}, #{toaddrname,jdbcType=VARCHAR}, ",
        "#{toaddrdetail,jdbcType=VARCHAR}, #{tolong,jdbcType=DOUBLE}, ",
        "#{tolat,jdbcType=DOUBLE}, #{ordertime,jdbcType=VARCHAR}, ",
        "#{ordertimems,jdbcType=BIGINT}, #{createtime,jdbcType=VARCHAR}, ",
        "#{createtimems,jdbcType=BIGINT}, #{canceltype,jdbcType=INTEGER}, ",
        "#{canceltime,jdbcType=TIMESTAMP}, #{canceltimems,jdbcType=BIGINT}, ",
        "#{status,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, ",
        "#{updatedAt,jdbcType=TIMESTAMP}, #{createdAt,jdbcType=TIMESTAMP})"
    })
    int insert(QunaOrder record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `qorder`
     *
     * @mbggenerated
     */
    @InsertProvider(type=QunaOrderSqlProvider.class, method="insertSelective")
    int insertSelective(QunaOrder record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `qorder`
     *
     * @mbggenerated
     */
    @SelectProvider(type=QunaOrderSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="qOrderId", property="qorderid", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="vOrderId", property="vorderid", jdbcType=JdbcType.VARCHAR),
        @Result(column="flightNo", property="flightno", jdbcType=JdbcType.VARCHAR),
        @Result(column="airportCode", property="airportcode", jdbcType=JdbcType.VARCHAR),
        @Result(column="depFlightTime", property="depflighttime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="depCityName", property="depcityname", jdbcType=JdbcType.VARCHAR),
        @Result(column="depAirportThreeCode", property="depairportthreecode", jdbcType=JdbcType.VARCHAR),
        @Result(column="serviceType", property="servicetype", jdbcType=JdbcType.INTEGER),
        @Result(column="serviceTypeRefine", property="servicetyperefine", jdbcType=JdbcType.INTEGER),
        @Result(column="carType", property="cartype", jdbcType=JdbcType.INTEGER),
        @Result(column="currency", property="currency", jdbcType=JdbcType.VARCHAR),
        @Result(column="orderType", property="ordertype", jdbcType=JdbcType.INTEGER),
        @Result(column="totalPrice", property="totalprice", jdbcType=JdbcType.DECIMAL),
        @Result(column="distance", property="distance", jdbcType=JdbcType.INTEGER),
        @Result(column="estimatedTime", property="estimatedtime", jdbcType=JdbcType.INTEGER),
        @Result(column="country", property="country", jdbcType=JdbcType.VARCHAR),
        @Result(column="city", property="city", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromAddrName", property="fromaddrname", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromAddrDetail", property="fromaddrdetail", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromLong", property="fromlong", jdbcType=JdbcType.DOUBLE),
        @Result(column="fromLat", property="fromlat", jdbcType=JdbcType.DOUBLE),
        @Result(column="toAddrName", property="toaddrname", jdbcType=JdbcType.VARCHAR),
        @Result(column="toAddrDetail", property="toaddrdetail", jdbcType=JdbcType.VARCHAR),
        @Result(column="toLong", property="tolong", jdbcType=JdbcType.DOUBLE),
        @Result(column="toLat", property="tolat", jdbcType=JdbcType.DOUBLE),
        @Result(column="orderTime", property="ordertime", jdbcType=JdbcType.VARCHAR),
        @Result(column="orderTimeMs", property="ordertimems", jdbcType=JdbcType.BIGINT),
        @Result(column="createTime", property="createtime", jdbcType=JdbcType.VARCHAR),
        @Result(column="createTimeMs", property="createtimems", jdbcType=JdbcType.BIGINT),
        @Result(column="cancelType", property="canceltype", jdbcType=JdbcType.INTEGER),
        @Result(column="cancelTime", property="canceltime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="cancelTimeMs", property="canceltimems", jdbcType=JdbcType.BIGINT),
        @Result(column="status", property="status", jdbcType=JdbcType.INTEGER),
        @Result(column="remark", property="remark", jdbcType=JdbcType.VARCHAR),
        @Result(column="updated_at", property="updatedAt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="created_at", property="createdAt", jdbcType=JdbcType.TIMESTAMP)
    })
    List<QunaOrder> selectByExampleWithRowbounds(QunaOrderCriteria example, RowBounds rowBounds);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `qorder`
     *
     * @mbggenerated
     */
    @SelectProvider(type=QunaOrderSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="qOrderId", property="qorderid", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="vOrderId", property="vorderid", jdbcType=JdbcType.VARCHAR),
        @Result(column="flightNo", property="flightno", jdbcType=JdbcType.VARCHAR),
        @Result(column="airportCode", property="airportcode", jdbcType=JdbcType.VARCHAR),
        @Result(column="depFlightTime", property="depflighttime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="depCityName", property="depcityname", jdbcType=JdbcType.VARCHAR),
        @Result(column="depAirportThreeCode", property="depairportthreecode", jdbcType=JdbcType.VARCHAR),
        @Result(column="serviceType", property="servicetype", jdbcType=JdbcType.INTEGER),
        @Result(column="serviceTypeRefine", property="servicetyperefine", jdbcType=JdbcType.INTEGER),
        @Result(column="carType", property="cartype", jdbcType=JdbcType.INTEGER),
        @Result(column="currency", property="currency", jdbcType=JdbcType.VARCHAR),
        @Result(column="orderType", property="ordertype", jdbcType=JdbcType.INTEGER),
        @Result(column="totalPrice", property="totalprice", jdbcType=JdbcType.DECIMAL),
        @Result(column="distance", property="distance", jdbcType=JdbcType.INTEGER),
        @Result(column="estimatedTime", property="estimatedtime", jdbcType=JdbcType.INTEGER),
        @Result(column="country", property="country", jdbcType=JdbcType.VARCHAR),
        @Result(column="city", property="city", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromAddrName", property="fromaddrname", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromAddrDetail", property="fromaddrdetail", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromLong", property="fromlong", jdbcType=JdbcType.DOUBLE),
        @Result(column="fromLat", property="fromlat", jdbcType=JdbcType.DOUBLE),
        @Result(column="toAddrName", property="toaddrname", jdbcType=JdbcType.VARCHAR),
        @Result(column="toAddrDetail", property="toaddrdetail", jdbcType=JdbcType.VARCHAR),
        @Result(column="toLong", property="tolong", jdbcType=JdbcType.DOUBLE),
        @Result(column="toLat", property="tolat", jdbcType=JdbcType.DOUBLE),
        @Result(column="orderTime", property="ordertime", jdbcType=JdbcType.VARCHAR),
        @Result(column="orderTimeMs", property="ordertimems", jdbcType=JdbcType.BIGINT),
        @Result(column="createTime", property="createtime", jdbcType=JdbcType.VARCHAR),
        @Result(column="createTimeMs", property="createtimems", jdbcType=JdbcType.BIGINT),
        @Result(column="cancelType", property="canceltype", jdbcType=JdbcType.INTEGER),
        @Result(column="cancelTime", property="canceltime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="cancelTimeMs", property="canceltimems", jdbcType=JdbcType.BIGINT),
        @Result(column="status", property="status", jdbcType=JdbcType.INTEGER),
        @Result(column="remark", property="remark", jdbcType=JdbcType.VARCHAR),
        @Result(column="updated_at", property="updatedAt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="created_at", property="createdAt", jdbcType=JdbcType.TIMESTAMP)
    })
    List<QunaOrder> selectByExample(QunaOrderCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `qorder`
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "qOrderId, vOrderId, flightNo, airportCode, depFlightTime, depCityName, depAirportThreeCode, ",
        "serviceType, serviceTypeRefine, carType, currency, orderType, totalPrice, distance, ",
        "estimatedTime, country, city, fromAddrName, fromAddrDetail, fromLong, fromLat, ",
        "toAddrName, toAddrDetail, toLong, toLat, orderTime, orderTimeMs, createTime, ",
        "createTimeMs, cancelType, cancelTime, cancelTimeMs, status, remark, updated_at, ",
        "created_at",
        "from `qorder`",
        "where qOrderId = #{qorderid,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="qOrderId", property="qorderid", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="vOrderId", property="vorderid", jdbcType=JdbcType.VARCHAR),
        @Result(column="flightNo", property="flightno", jdbcType=JdbcType.VARCHAR),
        @Result(column="airportCode", property="airportcode", jdbcType=JdbcType.VARCHAR),
        @Result(column="depFlightTime", property="depflighttime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="depCityName", property="depcityname", jdbcType=JdbcType.VARCHAR),
        @Result(column="depAirportThreeCode", property="depairportthreecode", jdbcType=JdbcType.VARCHAR),
        @Result(column="serviceType", property="servicetype", jdbcType=JdbcType.INTEGER),
        @Result(column="serviceTypeRefine", property="servicetyperefine", jdbcType=JdbcType.INTEGER),
        @Result(column="carType", property="cartype", jdbcType=JdbcType.INTEGER),
        @Result(column="currency", property="currency", jdbcType=JdbcType.VARCHAR),
        @Result(column="orderType", property="ordertype", jdbcType=JdbcType.INTEGER),
        @Result(column="totalPrice", property="totalprice", jdbcType=JdbcType.DECIMAL),
        @Result(column="distance", property="distance", jdbcType=JdbcType.INTEGER),
        @Result(column="estimatedTime", property="estimatedtime", jdbcType=JdbcType.INTEGER),
        @Result(column="country", property="country", jdbcType=JdbcType.VARCHAR),
        @Result(column="city", property="city", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromAddrName", property="fromaddrname", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromAddrDetail", property="fromaddrdetail", jdbcType=JdbcType.VARCHAR),
        @Result(column="fromLong", property="fromlong", jdbcType=JdbcType.DOUBLE),
        @Result(column="fromLat", property="fromlat", jdbcType=JdbcType.DOUBLE),
        @Result(column="toAddrName", property="toaddrname", jdbcType=JdbcType.VARCHAR),
        @Result(column="toAddrDetail", property="toaddrdetail", jdbcType=JdbcType.VARCHAR),
        @Result(column="toLong", property="tolong", jdbcType=JdbcType.DOUBLE),
        @Result(column="toLat", property="tolat", jdbcType=JdbcType.DOUBLE),
        @Result(column="orderTime", property="ordertime", jdbcType=JdbcType.VARCHAR),
        @Result(column="orderTimeMs", property="ordertimems", jdbcType=JdbcType.BIGINT),
        @Result(column="createTime", property="createtime", jdbcType=JdbcType.VARCHAR),
        @Result(column="createTimeMs", property="createtimems", jdbcType=JdbcType.BIGINT),
        @Result(column="cancelType", property="canceltype", jdbcType=JdbcType.INTEGER),
        @Result(column="cancelTime", property="canceltime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="cancelTimeMs", property="canceltimems", jdbcType=JdbcType.BIGINT),
        @Result(column="status", property="status", jdbcType=JdbcType.INTEGER),
        @Result(column="remark", property="remark", jdbcType=JdbcType.VARCHAR),
        @Result(column="updated_at", property="updatedAt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="created_at", property="createdAt", jdbcType=JdbcType.TIMESTAMP)
    })
    QunaOrder selectByPrimaryKey(String qorderid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `qorder`
     *
     * @mbggenerated
     */
    @UpdateProvider(type=QunaOrderSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") QunaOrder record, @Param("example") QunaOrderCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `qorder`
     *
     * @mbggenerated
     */
    @UpdateProvider(type=QunaOrderSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") QunaOrder record, @Param("example") QunaOrderCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `qorder`
     *
     * @mbggenerated
     */
    @UpdateProvider(type=QunaOrderSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(QunaOrder record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `qorder`
     *
     * @mbggenerated
     */
    @Update({
        "update `qorder`",
        "set vOrderId = #{vorderid,jdbcType=VARCHAR},",
          "flightNo = #{flightno,jdbcType=VARCHAR},",
          "airportCode = #{airportcode,jdbcType=VARCHAR},",
          "depFlightTime = #{depflighttime,jdbcType=TIMESTAMP},",
          "depCityName = #{depcityname,jdbcType=VARCHAR},",
          "depAirportThreeCode = #{depairportthreecode,jdbcType=VARCHAR},",
          "serviceType = #{servicetype,jdbcType=INTEGER},",
          "serviceTypeRefine = #{servicetyperefine,jdbcType=INTEGER},",
          "carType = #{cartype,jdbcType=INTEGER},",
          "currency = #{currency,jdbcType=VARCHAR},",
          "orderType = #{ordertype,jdbcType=INTEGER},",
          "totalPrice = #{totalprice,jdbcType=DECIMAL},",
          "distance = #{distance,jdbcType=INTEGER},",
          "estimatedTime = #{estimatedtime,jdbcType=INTEGER},",
          "country = #{country,jdbcType=VARCHAR},",
          "city = #{city,jdbcType=VARCHAR},",
          "fromAddrName = #{fromaddrname,jdbcType=VARCHAR},",
          "fromAddrDetail = #{fromaddrdetail,jdbcType=VARCHAR},",
          "fromLong = #{fromlong,jdbcType=DOUBLE},",
          "fromLat = #{fromlat,jdbcType=DOUBLE},",
          "toAddrName = #{toaddrname,jdbcType=VARCHAR},",
          "toAddrDetail = #{toaddrdetail,jdbcType=VARCHAR},",
          "toLong = #{tolong,jdbcType=DOUBLE},",
          "toLat = #{tolat,jdbcType=DOUBLE},",
          "orderTime = #{ordertime,jdbcType=VARCHAR},",
          "orderTimeMs = #{ordertimems,jdbcType=BIGINT},",
          "createTime = #{createtime,jdbcType=VARCHAR},",
          "createTimeMs = #{createtimems,jdbcType=BIGINT},",
          "cancelType = #{canceltype,jdbcType=INTEGER},",
          "cancelTime = #{canceltime,jdbcType=TIMESTAMP},",
          "cancelTimeMs = #{canceltimems,jdbcType=BIGINT},",
          "status = #{status,jdbcType=INTEGER},",
          "remark = #{remark,jdbcType=VARCHAR},",
          "updated_at = #{updatedAt,jdbcType=TIMESTAMP},",
          "created_at = #{createdAt,jdbcType=TIMESTAMP}",
        "where qOrderId = #{qorderid,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(QunaOrder record);
}