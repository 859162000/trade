package com.hbc.data.trade.transfer.mapping.hbcbasedata.gen;

import com.hbc.data.trade.transfer.mapping.hbcbasedata.gen.bean.FinalGuide;
import com.hbc.data.trade.transfer.mapping.hbcbasedata.gen.bean.FinalGuideCriteria.Criteria;
import com.hbc.data.trade.transfer.mapping.hbcbasedata.gen.bean.FinalGuideCriteria.Criterion;
import com.hbc.data.trade.transfer.mapping.hbcbasedata.gen.bean.FinalGuideCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class FinalGuideSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guide`
     *
     * @mbggenerated
     */
    public String countByExample(FinalGuideCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("`guide`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guide`
     *
     * @mbggenerated
     */
    public String deleteByExample(FinalGuideCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("`guide`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guide`
     *
     * @mbggenerated
     */
    public String insertSelective(FinalGuide record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("`guide`");
        
        if (record.getGuideid() != null) {
            sql.VALUES("guideId", "#{guideid,jdbcType=INTEGER}");
        }
        
        if (record.getPlaceid() != null) {
            sql.VALUES("placeId", "#{placeid,jdbcType=INTEGER}");
        }
        
        if (record.getPlacecityid() != null) {
            sql.VALUES("placeCityId", "#{placecityid,jdbcType=INTEGER}");
        }
        
        if (record.getGuideno() != null) {
            sql.VALUES("guideNo", "#{guideno,jdbcType=VARCHAR}");
        }
        
        if (record.getName() != null) {
            sql.VALUES("name", "#{name,jdbcType=VARCHAR}");
        }
        
        if (record.getPassword() != null) {
            sql.VALUES("password", "#{password,jdbcType=VARCHAR}");
        }
        
        if (record.getEncryptedpwd() != null) {
            sql.VALUES("encryptedPwd", "#{encryptedpwd,jdbcType=VARCHAR}");
        }
        
        if (record.getAvatar() != null) {
            sql.VALUES("avatar", "#{avatar,jdbcType=VARCHAR}");
        }
        
        if (record.getGender() != null) {
            sql.VALUES("gender", "#{gender,jdbcType=TINYINT}");
        }
        
        if (record.getBirthday() != null) {
            sql.VALUES("birthday", "#{birthday,jdbcType=DATE}");
        }
        
        if (record.getAddress() != null) {
            sql.VALUES("address", "#{address,jdbcType=VARCHAR}");
        }
        
        if (record.getZipcode() != null) {
            sql.VALUES("zipcode", "#{zipcode,jdbcType=VARCHAR}");
        }
        
        if (record.getLivestart() != null) {
            sql.VALUES("liveStart", "#{livestart,jdbcType=TINYINT}");
        }
        
        if (record.getLiveyear() != null) {
            sql.VALUES("liveYear", "#{liveyear,jdbcType=INTEGER}");
        }
        
        if (record.getMobile() != null) {
            sql.VALUES("mobile", "#{mobile,jdbcType=VARCHAR}");
        }
        
        if (record.getAreacode() != null) {
            sql.VALUES("areaCode", "#{areacode,jdbcType=VARCHAR}");
        }
        
        if (record.getAreaplace() != null) {
            sql.VALUES("areaPlace", "#{areaplace,jdbcType=VARCHAR}");
        }
        
        if (record.getIsmobilevalidated() != null) {
            sql.VALUES("isMobileValidated", "#{ismobilevalidated,jdbcType=TINYINT}");
        }
        
        if (record.getEmail() != null) {
            sql.VALUES("email", "#{email,jdbcType=VARCHAR}");
        }
        
        if (record.getIsemailvalidated() != null) {
            sql.VALUES("isEmailValidated", "#{isemailvalidated,jdbcType=TINYINT}");
        }
        
        if (record.getWeixin() != null) {
            sql.VALUES("weixin", "#{weixin,jdbcType=VARCHAR}");
        }
        
        if (record.getIsweixinvalidated() != null) {
            sql.VALUES("isWeixinValidated", "#{isweixinvalidated,jdbcType=TINYINT}");
        }
        
        if (record.getQq() != null) {
            sql.VALUES("qq", "#{qq,jdbcType=VARCHAR}");
        }
        
        if (record.getIsqqvalidated() != null) {
            sql.VALUES("isQQValidated", "#{isqqvalidated,jdbcType=TINYINT}");
        }
        
        if (record.getCompanyid() != null) {
            sql.VALUES("companyId", "#{companyid,jdbcType=INTEGER}");
        }
        
        if (record.getOthercontact() != null) {
            sql.VALUES("otherContact", "#{othercontact,jdbcType=VARCHAR}");
        }
        
        if (record.getContactname() != null) {
            sql.VALUES("contactName", "#{contactname,jdbcType=VARCHAR}");
        }
        
        if (record.getContactareacode() != null) {
            sql.VALUES("contactAreaCode", "#{contactareacode,jdbcType=VARCHAR}");
        }
        
        if (record.getContactareaplace() != null) {
            sql.VALUES("contactAreaPlace", "#{contactareaplace,jdbcType=VARCHAR}");
        }
        
        if (record.getContactmobile() != null) {
            sql.VALUES("contactMobile", "#{contactmobile,jdbcType=VARCHAR}");
        }
        
        if (record.getLevel() != null) {
            sql.VALUES("level", "#{level,jdbcType=INTEGER}");
        }
        
        if (record.getModel() != null) {
            sql.VALUES("model", "#{model,jdbcType=INTEGER}");
        }
        
        if (record.getType() != null) {
            sql.VALUES("type", "#{type,jdbcType=TINYINT}");
        }
        
        if (record.getSource() != null) {
            sql.VALUES("source", "#{source,jdbcType=INTEGER}");
        }
        
        if (record.getDep() != null) {
            sql.VALUES("dep", "#{dep,jdbcType=VARCHAR}");
        }
        
        if (record.getArr() != null) {
            sql.VALUES("arr", "#{arr,jdbcType=VARCHAR}");
        }
        
        if (record.getSigndate() != null) {
            sql.VALUES("signDate", "#{signdate,jdbcType=DATE}");
        }
        
        if (record.getCommentnum() != null) {
            sql.VALUES("commentNum", "#{commentnum,jdbcType=INTEGER}");
        }
        
        if (record.getPickupnum() != null) {
            sql.VALUES("pickupNum", "#{pickupnum,jdbcType=INTEGER}");
        }
        
        if (record.getTransfernum() != null) {
            sql.VALUES("transferNum", "#{transfernum,jdbcType=INTEGER}");
        }
        
        if (record.getDailynum() != null) {
            sql.VALUES("dailyNum", "#{dailynum,jdbcType=INTEGER}");
        }
        
        if (record.getPerusernum() != null) {
            sql.VALUES("peruserNum", "#{perusernum,jdbcType=INTEGER}");
        }
        
        if (record.getCancelnum() != null) {
            sql.VALUES("cancelNum", "#{cancelnum,jdbcType=INTEGER}");
        }
        
        if (record.getComment() != null) {
            sql.VALUES("comment", "#{comment,jdbcType=VARCHAR}");
        }
        
        if (record.getReferrer() != null) {
            sql.VALUES("referrer", "#{referrer,jdbcType=VARCHAR}");
        }
        
        if (record.getCreatedip() != null) {
            sql.VALUES("createdIP", "#{createdip,jdbcType=VARCHAR}");
        }
        
        if (record.getLoginnum() != null) {
            sql.VALUES("loginNum", "#{loginnum,jdbcType=INTEGER}");
        }
        
        if (record.getLastlogin() != null) {
            sql.VALUES("lastLogin", "#{lastlogin,jdbcType=TIMESTAMP}");
        }
        
        if (record.getImtoken() != null) {
            sql.VALUES("imToken", "#{imtoken,jdbcType=VARCHAR}");
        }
        
        if (record.getAgencytype() != null) {
            sql.VALUES("agencyType", "#{agencytype,jdbcType=INTEGER}");
        }
        
        if (record.getSendflag() != null) {
            sql.VALUES("sendFlag", "#{sendflag,jdbcType=INTEGER}");
        }
        
        if (record.getStatus() != null) {
            sql.VALUES("status", "#{status,jdbcType=INTEGER}");
        }
        
        if (record.getReceivestatus() != null) {
            sql.VALUES("receiveStatus", "#{receivestatus,jdbcType=INTEGER}");
        }
        
        if (record.getIdentitycard() != null) {
            sql.VALUES("identityCard", "#{identitycard,jdbcType=VARCHAR}");
        }
        
        if (record.getDrivinglicence() != null) {
            sql.VALUES("drivingLicence", "#{drivinglicence,jdbcType=VARCHAR}");
        }
        
        if (record.getCarlicence() != null) {
            sql.VALUES("carLicence", "#{carlicence,jdbcType=VARCHAR}");
        }
        
        if (record.getOperatepermit() != null) {
            sql.VALUES("operatePermit", "#{operatepermit,jdbcType=VARCHAR}");
        }
        
        if (record.getGuidelevel() != null) {
            sql.VALUES("guideLevel", "#{guidelevel,jdbcType=INTEGER}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.VALUES("updated_at", "#{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getDeletedAt() != null) {
            sql.VALUES("deleted_at", "#{deletedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.VALUES("created_at", "#{createdAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getServicecitys() != null) {
            sql.VALUES("serviceCitys", "#{servicecitys,jdbcType=VARCHAR}");
        }
        
        if (record.getSigningbonus() != null) {
            sql.VALUES("signingBonus", "#{signingbonus,jdbcType=INTEGER}");
        }
        
        if (record.getSigningbonuscomment() != null) {
            sql.VALUES("signingBonusComment", "#{signingbonuscomment,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guide`
     *
     * @mbggenerated
     */
    public String selectByExample(FinalGuideCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("guideId");
        } else {
            sql.SELECT("guideId");
        }
        sql.SELECT("placeId");
        sql.SELECT("placeCityId");
        sql.SELECT("guideNo");
        sql.SELECT("name");
        sql.SELECT("password");
        sql.SELECT("encryptedPwd");
        sql.SELECT("avatar");
        sql.SELECT("gender");
        sql.SELECT("birthday");
        sql.SELECT("address");
        sql.SELECT("zipcode");
        sql.SELECT("liveStart");
        sql.SELECT("liveYear");
        sql.SELECT("mobile");
        sql.SELECT("areaCode");
        sql.SELECT("areaPlace");
        sql.SELECT("isMobileValidated");
        sql.SELECT("email");
        sql.SELECT("isEmailValidated");
        sql.SELECT("weixin");
        sql.SELECT("isWeixinValidated");
        sql.SELECT("qq");
        sql.SELECT("isQQValidated");
        sql.SELECT("companyId");
        sql.SELECT("otherContact");
        sql.SELECT("contactName");
        sql.SELECT("contactAreaCode");
        sql.SELECT("contactAreaPlace");
        sql.SELECT("contactMobile");
        sql.SELECT("level");
        sql.SELECT("model");
        sql.SELECT("type");
        sql.SELECT("source");
        sql.SELECT("dep");
        sql.SELECT("arr");
        sql.SELECT("signDate");
        sql.SELECT("commentNum");
        sql.SELECT("pickupNum");
        sql.SELECT("transferNum");
        sql.SELECT("dailyNum");
        sql.SELECT("peruserNum");
        sql.SELECT("cancelNum");
        sql.SELECT("comment");
        sql.SELECT("referrer");
        sql.SELECT("createdIP");
        sql.SELECT("loginNum");
        sql.SELECT("lastLogin");
        sql.SELECT("imToken");
        sql.SELECT("agencyType");
        sql.SELECT("sendFlag");
        sql.SELECT("status");
        sql.SELECT("receiveStatus");
        sql.SELECT("identityCard");
        sql.SELECT("drivingLicence");
        sql.SELECT("carLicence");
        sql.SELECT("operatePermit");
        sql.SELECT("guideLevel");
        sql.SELECT("updated_at");
        sql.SELECT("deleted_at");
        sql.SELECT("created_at");
        sql.SELECT("serviceCitys");
        sql.SELECT("signingBonus");
        sql.SELECT("signingBonusComment");
        sql.FROM("`guide`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guide`
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        FinalGuide record = (FinalGuide) parameter.get("record");
        FinalGuideCriteria example = (FinalGuideCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("`guide`");
        
        if (record.getGuideid() != null) {
            sql.SET("guideId = #{record.guideid,jdbcType=INTEGER}");
        }
        
        if (record.getPlaceid() != null) {
            sql.SET("placeId = #{record.placeid,jdbcType=INTEGER}");
        }
        
        if (record.getPlacecityid() != null) {
            sql.SET("placeCityId = #{record.placecityid,jdbcType=INTEGER}");
        }
        
        if (record.getGuideno() != null) {
            sql.SET("guideNo = #{record.guideno,jdbcType=VARCHAR}");
        }
        
        if (record.getName() != null) {
            sql.SET("name = #{record.name,jdbcType=VARCHAR}");
        }
        
        if (record.getPassword() != null) {
            sql.SET("password = #{record.password,jdbcType=VARCHAR}");
        }
        
        if (record.getEncryptedpwd() != null) {
            sql.SET("encryptedPwd = #{record.encryptedpwd,jdbcType=VARCHAR}");
        }
        
        if (record.getAvatar() != null) {
            sql.SET("avatar = #{record.avatar,jdbcType=VARCHAR}");
        }
        
        if (record.getGender() != null) {
            sql.SET("gender = #{record.gender,jdbcType=TINYINT}");
        }
        
        if (record.getBirthday() != null) {
            sql.SET("birthday = #{record.birthday,jdbcType=DATE}");
        }
        
        if (record.getAddress() != null) {
            sql.SET("address = #{record.address,jdbcType=VARCHAR}");
        }
        
        if (record.getZipcode() != null) {
            sql.SET("zipcode = #{record.zipcode,jdbcType=VARCHAR}");
        }
        
        if (record.getLivestart() != null) {
            sql.SET("liveStart = #{record.livestart,jdbcType=TINYINT}");
        }
        
        if (record.getLiveyear() != null) {
            sql.SET("liveYear = #{record.liveyear,jdbcType=INTEGER}");
        }
        
        if (record.getMobile() != null) {
            sql.SET("mobile = #{record.mobile,jdbcType=VARCHAR}");
        }
        
        if (record.getAreacode() != null) {
            sql.SET("areaCode = #{record.areacode,jdbcType=VARCHAR}");
        }
        
        if (record.getAreaplace() != null) {
            sql.SET("areaPlace = #{record.areaplace,jdbcType=VARCHAR}");
        }
        
        if (record.getIsmobilevalidated() != null) {
            sql.SET("isMobileValidated = #{record.ismobilevalidated,jdbcType=TINYINT}");
        }
        
        if (record.getEmail() != null) {
            sql.SET("email = #{record.email,jdbcType=VARCHAR}");
        }
        
        if (record.getIsemailvalidated() != null) {
            sql.SET("isEmailValidated = #{record.isemailvalidated,jdbcType=TINYINT}");
        }
        
        if (record.getWeixin() != null) {
            sql.SET("weixin = #{record.weixin,jdbcType=VARCHAR}");
        }
        
        if (record.getIsweixinvalidated() != null) {
            sql.SET("isWeixinValidated = #{record.isweixinvalidated,jdbcType=TINYINT}");
        }
        
        if (record.getQq() != null) {
            sql.SET("qq = #{record.qq,jdbcType=VARCHAR}");
        }
        
        if (record.getIsqqvalidated() != null) {
            sql.SET("isQQValidated = #{record.isqqvalidated,jdbcType=TINYINT}");
        }
        
        if (record.getCompanyid() != null) {
            sql.SET("companyId = #{record.companyid,jdbcType=INTEGER}");
        }
        
        if (record.getOthercontact() != null) {
            sql.SET("otherContact = #{record.othercontact,jdbcType=VARCHAR}");
        }
        
        if (record.getContactname() != null) {
            sql.SET("contactName = #{record.contactname,jdbcType=VARCHAR}");
        }
        
        if (record.getContactareacode() != null) {
            sql.SET("contactAreaCode = #{record.contactareacode,jdbcType=VARCHAR}");
        }
        
        if (record.getContactareaplace() != null) {
            sql.SET("contactAreaPlace = #{record.contactareaplace,jdbcType=VARCHAR}");
        }
        
        if (record.getContactmobile() != null) {
            sql.SET("contactMobile = #{record.contactmobile,jdbcType=VARCHAR}");
        }
        
        if (record.getLevel() != null) {
            sql.SET("level = #{record.level,jdbcType=INTEGER}");
        }
        
        if (record.getModel() != null) {
            sql.SET("model = #{record.model,jdbcType=INTEGER}");
        }
        
        if (record.getType() != null) {
            sql.SET("type = #{record.type,jdbcType=TINYINT}");
        }
        
        if (record.getSource() != null) {
            sql.SET("source = #{record.source,jdbcType=INTEGER}");
        }
        
        if (record.getDep() != null) {
            sql.SET("dep = #{record.dep,jdbcType=VARCHAR}");
        }
        
        if (record.getArr() != null) {
            sql.SET("arr = #{record.arr,jdbcType=VARCHAR}");
        }
        
        if (record.getSigndate() != null) {
            sql.SET("signDate = #{record.signdate,jdbcType=DATE}");
        }
        
        if (record.getCommentnum() != null) {
            sql.SET("commentNum = #{record.commentnum,jdbcType=INTEGER}");
        }
        
        if (record.getPickupnum() != null) {
            sql.SET("pickupNum = #{record.pickupnum,jdbcType=INTEGER}");
        }
        
        if (record.getTransfernum() != null) {
            sql.SET("transferNum = #{record.transfernum,jdbcType=INTEGER}");
        }
        
        if (record.getDailynum() != null) {
            sql.SET("dailyNum = #{record.dailynum,jdbcType=INTEGER}");
        }
        
        if (record.getPerusernum() != null) {
            sql.SET("peruserNum = #{record.perusernum,jdbcType=INTEGER}");
        }
        
        if (record.getCancelnum() != null) {
            sql.SET("cancelNum = #{record.cancelnum,jdbcType=INTEGER}");
        }
        
        if (record.getComment() != null) {
            sql.SET("comment = #{record.comment,jdbcType=VARCHAR}");
        }
        
        if (record.getReferrer() != null) {
            sql.SET("referrer = #{record.referrer,jdbcType=VARCHAR}");
        }
        
        if (record.getCreatedip() != null) {
            sql.SET("createdIP = #{record.createdip,jdbcType=VARCHAR}");
        }
        
        if (record.getLoginnum() != null) {
            sql.SET("loginNum = #{record.loginnum,jdbcType=INTEGER}");
        }
        
        if (record.getLastlogin() != null) {
            sql.SET("lastLogin = #{record.lastlogin,jdbcType=TIMESTAMP}");
        }
        
        if (record.getImtoken() != null) {
            sql.SET("imToken = #{record.imtoken,jdbcType=VARCHAR}");
        }
        
        if (record.getAgencytype() != null) {
            sql.SET("agencyType = #{record.agencytype,jdbcType=INTEGER}");
        }
        
        if (record.getSendflag() != null) {
            sql.SET("sendFlag = #{record.sendflag,jdbcType=INTEGER}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{record.status,jdbcType=INTEGER}");
        }
        
        if (record.getReceivestatus() != null) {
            sql.SET("receiveStatus = #{record.receivestatus,jdbcType=INTEGER}");
        }
        
        if (record.getIdentitycard() != null) {
            sql.SET("identityCard = #{record.identitycard,jdbcType=VARCHAR}");
        }
        
        if (record.getDrivinglicence() != null) {
            sql.SET("drivingLicence = #{record.drivinglicence,jdbcType=VARCHAR}");
        }
        
        if (record.getCarlicence() != null) {
            sql.SET("carLicence = #{record.carlicence,jdbcType=VARCHAR}");
        }
        
        if (record.getOperatepermit() != null) {
            sql.SET("operatePermit = #{record.operatepermit,jdbcType=VARCHAR}");
        }
        
        if (record.getGuidelevel() != null) {
            sql.SET("guideLevel = #{record.guidelevel,jdbcType=INTEGER}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getDeletedAt() != null) {
            sql.SET("deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getServicecitys() != null) {
            sql.SET("serviceCitys = #{record.servicecitys,jdbcType=VARCHAR}");
        }
        
        if (record.getSigningbonus() != null) {
            sql.SET("signingBonus = #{record.signingbonus,jdbcType=INTEGER}");
        }
        
        if (record.getSigningbonuscomment() != null) {
            sql.SET("signingBonusComment = #{record.signingbonuscomment,jdbcType=VARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guide`
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`guide`");
        
        sql.SET("guideId = #{record.guideid,jdbcType=INTEGER}");
        sql.SET("placeId = #{record.placeid,jdbcType=INTEGER}");
        sql.SET("placeCityId = #{record.placecityid,jdbcType=INTEGER}");
        sql.SET("guideNo = #{record.guideno,jdbcType=VARCHAR}");
        sql.SET("name = #{record.name,jdbcType=VARCHAR}");
        sql.SET("password = #{record.password,jdbcType=VARCHAR}");
        sql.SET("encryptedPwd = #{record.encryptedpwd,jdbcType=VARCHAR}");
        sql.SET("avatar = #{record.avatar,jdbcType=VARCHAR}");
        sql.SET("gender = #{record.gender,jdbcType=TINYINT}");
        sql.SET("birthday = #{record.birthday,jdbcType=DATE}");
        sql.SET("address = #{record.address,jdbcType=VARCHAR}");
        sql.SET("zipcode = #{record.zipcode,jdbcType=VARCHAR}");
        sql.SET("liveStart = #{record.livestart,jdbcType=TINYINT}");
        sql.SET("liveYear = #{record.liveyear,jdbcType=INTEGER}");
        sql.SET("mobile = #{record.mobile,jdbcType=VARCHAR}");
        sql.SET("areaCode = #{record.areacode,jdbcType=VARCHAR}");
        sql.SET("areaPlace = #{record.areaplace,jdbcType=VARCHAR}");
        sql.SET("isMobileValidated = #{record.ismobilevalidated,jdbcType=TINYINT}");
        sql.SET("email = #{record.email,jdbcType=VARCHAR}");
        sql.SET("isEmailValidated = #{record.isemailvalidated,jdbcType=TINYINT}");
        sql.SET("weixin = #{record.weixin,jdbcType=VARCHAR}");
        sql.SET("isWeixinValidated = #{record.isweixinvalidated,jdbcType=TINYINT}");
        sql.SET("qq = #{record.qq,jdbcType=VARCHAR}");
        sql.SET("isQQValidated = #{record.isqqvalidated,jdbcType=TINYINT}");
        sql.SET("companyId = #{record.companyid,jdbcType=INTEGER}");
        sql.SET("otherContact = #{record.othercontact,jdbcType=VARCHAR}");
        sql.SET("contactName = #{record.contactname,jdbcType=VARCHAR}");
        sql.SET("contactAreaCode = #{record.contactareacode,jdbcType=VARCHAR}");
        sql.SET("contactAreaPlace = #{record.contactareaplace,jdbcType=VARCHAR}");
        sql.SET("contactMobile = #{record.contactmobile,jdbcType=VARCHAR}");
        sql.SET("level = #{record.level,jdbcType=INTEGER}");
        sql.SET("model = #{record.model,jdbcType=INTEGER}");
        sql.SET("type = #{record.type,jdbcType=TINYINT}");
        sql.SET("source = #{record.source,jdbcType=INTEGER}");
        sql.SET("dep = #{record.dep,jdbcType=VARCHAR}");
        sql.SET("arr = #{record.arr,jdbcType=VARCHAR}");
        sql.SET("signDate = #{record.signdate,jdbcType=DATE}");
        sql.SET("commentNum = #{record.commentnum,jdbcType=INTEGER}");
        sql.SET("pickupNum = #{record.pickupnum,jdbcType=INTEGER}");
        sql.SET("transferNum = #{record.transfernum,jdbcType=INTEGER}");
        sql.SET("dailyNum = #{record.dailynum,jdbcType=INTEGER}");
        sql.SET("peruserNum = #{record.perusernum,jdbcType=INTEGER}");
        sql.SET("cancelNum = #{record.cancelnum,jdbcType=INTEGER}");
        sql.SET("comment = #{record.comment,jdbcType=VARCHAR}");
        sql.SET("referrer = #{record.referrer,jdbcType=VARCHAR}");
        sql.SET("createdIP = #{record.createdip,jdbcType=VARCHAR}");
        sql.SET("loginNum = #{record.loginnum,jdbcType=INTEGER}");
        sql.SET("lastLogin = #{record.lastlogin,jdbcType=TIMESTAMP}");
        sql.SET("imToken = #{record.imtoken,jdbcType=VARCHAR}");
        sql.SET("agencyType = #{record.agencytype,jdbcType=INTEGER}");
        sql.SET("sendFlag = #{record.sendflag,jdbcType=INTEGER}");
        sql.SET("status = #{record.status,jdbcType=INTEGER}");
        sql.SET("receiveStatus = #{record.receivestatus,jdbcType=INTEGER}");
        sql.SET("identityCard = #{record.identitycard,jdbcType=VARCHAR}");
        sql.SET("drivingLicence = #{record.drivinglicence,jdbcType=VARCHAR}");
        sql.SET("carLicence = #{record.carlicence,jdbcType=VARCHAR}");
        sql.SET("operatePermit = #{record.operatepermit,jdbcType=VARCHAR}");
        sql.SET("guideLevel = #{record.guidelevel,jdbcType=INTEGER}");
        sql.SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        sql.SET("deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP}");
        sql.SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        sql.SET("serviceCitys = #{record.servicecitys,jdbcType=VARCHAR}");
        sql.SET("signingBonus = #{record.signingbonus,jdbcType=INTEGER}");
        sql.SET("signingBonusComment = #{record.signingbonuscomment,jdbcType=VARCHAR}");
        
        FinalGuideCriteria example = (FinalGuideCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guide`
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(FinalGuide record) {
        SQL sql = new SQL();
        sql.UPDATE("`guide`");
        
        if (record.getPlaceid() != null) {
            sql.SET("placeId = #{placeid,jdbcType=INTEGER}");
        }
        
        if (record.getPlacecityid() != null) {
            sql.SET("placeCityId = #{placecityid,jdbcType=INTEGER}");
        }
        
        if (record.getGuideno() != null) {
            sql.SET("guideNo = #{guideno,jdbcType=VARCHAR}");
        }
        
        if (record.getName() != null) {
            sql.SET("name = #{name,jdbcType=VARCHAR}");
        }
        
        if (record.getPassword() != null) {
            sql.SET("password = #{password,jdbcType=VARCHAR}");
        }
        
        if (record.getEncryptedpwd() != null) {
            sql.SET("encryptedPwd = #{encryptedpwd,jdbcType=VARCHAR}");
        }
        
        if (record.getAvatar() != null) {
            sql.SET("avatar = #{avatar,jdbcType=VARCHAR}");
        }
        
        if (record.getGender() != null) {
            sql.SET("gender = #{gender,jdbcType=TINYINT}");
        }
        
        if (record.getBirthday() != null) {
            sql.SET("birthday = #{birthday,jdbcType=DATE}");
        }
        
        if (record.getAddress() != null) {
            sql.SET("address = #{address,jdbcType=VARCHAR}");
        }
        
        if (record.getZipcode() != null) {
            sql.SET("zipcode = #{zipcode,jdbcType=VARCHAR}");
        }
        
        if (record.getLivestart() != null) {
            sql.SET("liveStart = #{livestart,jdbcType=TINYINT}");
        }
        
        if (record.getLiveyear() != null) {
            sql.SET("liveYear = #{liveyear,jdbcType=INTEGER}");
        }
        
        if (record.getMobile() != null) {
            sql.SET("mobile = #{mobile,jdbcType=VARCHAR}");
        }
        
        if (record.getAreacode() != null) {
            sql.SET("areaCode = #{areacode,jdbcType=VARCHAR}");
        }
        
        if (record.getAreaplace() != null) {
            sql.SET("areaPlace = #{areaplace,jdbcType=VARCHAR}");
        }
        
        if (record.getIsmobilevalidated() != null) {
            sql.SET("isMobileValidated = #{ismobilevalidated,jdbcType=TINYINT}");
        }
        
        if (record.getEmail() != null) {
            sql.SET("email = #{email,jdbcType=VARCHAR}");
        }
        
        if (record.getIsemailvalidated() != null) {
            sql.SET("isEmailValidated = #{isemailvalidated,jdbcType=TINYINT}");
        }
        
        if (record.getWeixin() != null) {
            sql.SET("weixin = #{weixin,jdbcType=VARCHAR}");
        }
        
        if (record.getIsweixinvalidated() != null) {
            sql.SET("isWeixinValidated = #{isweixinvalidated,jdbcType=TINYINT}");
        }
        
        if (record.getQq() != null) {
            sql.SET("qq = #{qq,jdbcType=VARCHAR}");
        }
        
        if (record.getIsqqvalidated() != null) {
            sql.SET("isQQValidated = #{isqqvalidated,jdbcType=TINYINT}");
        }
        
        if (record.getCompanyid() != null) {
            sql.SET("companyId = #{companyid,jdbcType=INTEGER}");
        }
        
        if (record.getOthercontact() != null) {
            sql.SET("otherContact = #{othercontact,jdbcType=VARCHAR}");
        }
        
        if (record.getContactname() != null) {
            sql.SET("contactName = #{contactname,jdbcType=VARCHAR}");
        }
        
        if (record.getContactareacode() != null) {
            sql.SET("contactAreaCode = #{contactareacode,jdbcType=VARCHAR}");
        }
        
        if (record.getContactareaplace() != null) {
            sql.SET("contactAreaPlace = #{contactareaplace,jdbcType=VARCHAR}");
        }
        
        if (record.getContactmobile() != null) {
            sql.SET("contactMobile = #{contactmobile,jdbcType=VARCHAR}");
        }
        
        if (record.getLevel() != null) {
            sql.SET("level = #{level,jdbcType=INTEGER}");
        }
        
        if (record.getModel() != null) {
            sql.SET("model = #{model,jdbcType=INTEGER}");
        }
        
        if (record.getType() != null) {
            sql.SET("type = #{type,jdbcType=TINYINT}");
        }
        
        if (record.getSource() != null) {
            sql.SET("source = #{source,jdbcType=INTEGER}");
        }
        
        if (record.getDep() != null) {
            sql.SET("dep = #{dep,jdbcType=VARCHAR}");
        }
        
        if (record.getArr() != null) {
            sql.SET("arr = #{arr,jdbcType=VARCHAR}");
        }
        
        if (record.getSigndate() != null) {
            sql.SET("signDate = #{signdate,jdbcType=DATE}");
        }
        
        if (record.getCommentnum() != null) {
            sql.SET("commentNum = #{commentnum,jdbcType=INTEGER}");
        }
        
        if (record.getPickupnum() != null) {
            sql.SET("pickupNum = #{pickupnum,jdbcType=INTEGER}");
        }
        
        if (record.getTransfernum() != null) {
            sql.SET("transferNum = #{transfernum,jdbcType=INTEGER}");
        }
        
        if (record.getDailynum() != null) {
            sql.SET("dailyNum = #{dailynum,jdbcType=INTEGER}");
        }
        
        if (record.getPerusernum() != null) {
            sql.SET("peruserNum = #{perusernum,jdbcType=INTEGER}");
        }
        
        if (record.getCancelnum() != null) {
            sql.SET("cancelNum = #{cancelnum,jdbcType=INTEGER}");
        }
        
        if (record.getComment() != null) {
            sql.SET("comment = #{comment,jdbcType=VARCHAR}");
        }
        
        if (record.getReferrer() != null) {
            sql.SET("referrer = #{referrer,jdbcType=VARCHAR}");
        }
        
        if (record.getCreatedip() != null) {
            sql.SET("createdIP = #{createdip,jdbcType=VARCHAR}");
        }
        
        if (record.getLoginnum() != null) {
            sql.SET("loginNum = #{loginnum,jdbcType=INTEGER}");
        }
        
        if (record.getLastlogin() != null) {
            sql.SET("lastLogin = #{lastlogin,jdbcType=TIMESTAMP}");
        }
        
        if (record.getImtoken() != null) {
            sql.SET("imToken = #{imtoken,jdbcType=VARCHAR}");
        }
        
        if (record.getAgencytype() != null) {
            sql.SET("agencyType = #{agencytype,jdbcType=INTEGER}");
        }
        
        if (record.getSendflag() != null) {
            sql.SET("sendFlag = #{sendflag,jdbcType=INTEGER}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=INTEGER}");
        }
        
        if (record.getReceivestatus() != null) {
            sql.SET("receiveStatus = #{receivestatus,jdbcType=INTEGER}");
        }
        
        if (record.getIdentitycard() != null) {
            sql.SET("identityCard = #{identitycard,jdbcType=VARCHAR}");
        }
        
        if (record.getDrivinglicence() != null) {
            sql.SET("drivingLicence = #{drivinglicence,jdbcType=VARCHAR}");
        }
        
        if (record.getCarlicence() != null) {
            sql.SET("carLicence = #{carlicence,jdbcType=VARCHAR}");
        }
        
        if (record.getOperatepermit() != null) {
            sql.SET("operatePermit = #{operatepermit,jdbcType=VARCHAR}");
        }
        
        if (record.getGuidelevel() != null) {
            sql.SET("guideLevel = #{guidelevel,jdbcType=INTEGER}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.SET("updated_at = #{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getDeletedAt() != null) {
            sql.SET("deleted_at = #{deletedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.SET("created_at = #{createdAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getServicecitys() != null) {
            sql.SET("serviceCitys = #{servicecitys,jdbcType=VARCHAR}");
        }
        
        if (record.getSigningbonus() != null) {
            sql.SET("signingBonus = #{signingbonus,jdbcType=INTEGER}");
        }
        
        if (record.getSigningbonuscomment() != null) {
            sql.SET("signingBonusComment = #{signingbonuscomment,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("guideId = #{guideid,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `guide`
     *
     * @mbggenerated
     */
    protected void applyWhere(SQL sql, FinalGuideCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}