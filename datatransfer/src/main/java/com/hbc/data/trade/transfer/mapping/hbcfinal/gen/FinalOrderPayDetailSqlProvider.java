package com.hbc.data.trade.transfer.mapping.hbcfinal.gen;

import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalOrderPayDetail;
import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalOrderPayDetailCriteria.Criteria;
import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalOrderPayDetailCriteria.Criterion;
import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalOrderPayDetailCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class FinalOrderPayDetailSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpaydetail`
     *
     * @mbggenerated
     */
    public String countByExample(FinalOrderPayDetailCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("`orderpaydetail`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpaydetail`
     *
     * @mbggenerated
     */
    public String deleteByExample(FinalOrderPayDetailCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("`orderpaydetail`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpaydetail`
     *
     * @mbggenerated
     */
    public String insertSelective(FinalOrderPayDetail record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("`orderpaydetail`");
        
        if (record.getOrderpaydetailid() != null) {
            sql.VALUES("orderPayDetailId", "#{orderpaydetailid,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderid() != null) {
            sql.VALUES("orderId", "#{orderid,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderpaytype() != null) {
            sql.VALUES("orderPayType", "#{orderpaytype,jdbcType=INTEGER}");
        }
        
        if (record.getClienttype() != null) {
            sql.VALUES("clientType", "#{clienttype,jdbcType=VARCHAR}");
        }
        
        if (record.getClientid() != null) {
            sql.VALUES("clientId", "#{clientid,jdbcType=VARCHAR}");
        }
        
        if (record.getClientname() != null) {
            sql.VALUES("clientName", "#{clientname,jdbcType=VARCHAR}");
        }
        
        if (record.getChannel() != null) {
            sql.VALUES("channel", "#{channel,jdbcType=VARCHAR}");
        }
        
        if (record.getGateway() != null) {
            sql.VALUES("gateway", "#{gateway,jdbcType=INTEGER}");
        }
        
        if (record.getPlat() != null) {
            sql.VALUES("plat", "#{plat,jdbcType=INTEGER}");
        }
        
        if (record.getConsumeamount() != null) {
            sql.VALUES("consumeAmount", "#{consumeamount,jdbcType=INTEGER}");
        }
        
        if (record.getRechargeamount() != null) {
            sql.VALUES("rechargeAmount", "#{rechargeamount,jdbcType=INTEGER}");
        }
        
        if (record.getRefundamount() != null) {
            sql.VALUES("refundAmount", "#{refundamount,jdbcType=INTEGER}");
        }
        
        if (record.getPayconsumeid() != null) {
            sql.VALUES("payConsumeId", "#{payconsumeid,jdbcType=VARCHAR}");
        }
        
        if (record.getPayrechargeid() != null) {
            sql.VALUES("payRechargeId", "#{payrechargeid,jdbcType=VARCHAR}");
        }
        
        if (record.getPayrefundid() != null) {
            sql.VALUES("payRefundId", "#{payrefundid,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.VALUES("status", "#{status,jdbcType=INTEGER}");
        }
        
        if (record.getRawdata() != null) {
            sql.VALUES("rawData", "#{rawdata,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.VALUES("updated_at", "#{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.VALUES("created_at", "#{createdAt,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpaydetail`
     *
     * @mbggenerated
     */
    public String selectByExample(FinalOrderPayDetailCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("orderPayDetailId");
        } else {
            sql.SELECT("orderPayDetailId");
        }
        sql.SELECT("orderId");
        sql.SELECT("orderPayType");
        sql.SELECT("clientType");
        sql.SELECT("clientId");
        sql.SELECT("clientName");
        sql.SELECT("channel");
        sql.SELECT("gateway");
        sql.SELECT("plat");
        sql.SELECT("consumeAmount");
        sql.SELECT("rechargeAmount");
        sql.SELECT("refundAmount");
        sql.SELECT("payConsumeId");
        sql.SELECT("payRechargeId");
        sql.SELECT("payRefundId");
        sql.SELECT("status");
        sql.SELECT("rawData");
        sql.SELECT("updated_at");
        sql.SELECT("created_at");
        sql.FROM("`orderpaydetail`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpaydetail`
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        FinalOrderPayDetail record = (FinalOrderPayDetail) parameter.get("record");
        FinalOrderPayDetailCriteria example = (FinalOrderPayDetailCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("`orderpaydetail`");
        
        if (record.getOrderpaydetailid() != null) {
            sql.SET("orderPayDetailId = #{record.orderpaydetailid,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderid() != null) {
            sql.SET("orderId = #{record.orderid,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderpaytype() != null) {
            sql.SET("orderPayType = #{record.orderpaytype,jdbcType=INTEGER}");
        }
        
        if (record.getClienttype() != null) {
            sql.SET("clientType = #{record.clienttype,jdbcType=VARCHAR}");
        }
        
        if (record.getClientid() != null) {
            sql.SET("clientId = #{record.clientid,jdbcType=VARCHAR}");
        }
        
        if (record.getClientname() != null) {
            sql.SET("clientName = #{record.clientname,jdbcType=VARCHAR}");
        }
        
        if (record.getChannel() != null) {
            sql.SET("channel = #{record.channel,jdbcType=VARCHAR}");
        }
        
        if (record.getGateway() != null) {
            sql.SET("gateway = #{record.gateway,jdbcType=INTEGER}");
        }
        
        if (record.getPlat() != null) {
            sql.SET("plat = #{record.plat,jdbcType=INTEGER}");
        }
        
        if (record.getConsumeamount() != null) {
            sql.SET("consumeAmount = #{record.consumeamount,jdbcType=INTEGER}");
        }
        
        if (record.getRechargeamount() != null) {
            sql.SET("rechargeAmount = #{record.rechargeamount,jdbcType=INTEGER}");
        }
        
        if (record.getRefundamount() != null) {
            sql.SET("refundAmount = #{record.refundamount,jdbcType=INTEGER}");
        }
        
        if (record.getPayconsumeid() != null) {
            sql.SET("payConsumeId = #{record.payconsumeid,jdbcType=VARCHAR}");
        }
        
        if (record.getPayrechargeid() != null) {
            sql.SET("payRechargeId = #{record.payrechargeid,jdbcType=VARCHAR}");
        }
        
        if (record.getPayrefundid() != null) {
            sql.SET("payRefundId = #{record.payrefundid,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{record.status,jdbcType=INTEGER}");
        }
        
        if (record.getRawdata() != null) {
            sql.SET("rawData = #{record.rawdata,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpaydetail`
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`orderpaydetail`");
        
        sql.SET("orderPayDetailId = #{record.orderpaydetailid,jdbcType=VARCHAR}");
        sql.SET("orderId = #{record.orderid,jdbcType=VARCHAR}");
        sql.SET("orderPayType = #{record.orderpaytype,jdbcType=INTEGER}");
        sql.SET("clientType = #{record.clienttype,jdbcType=VARCHAR}");
        sql.SET("clientId = #{record.clientid,jdbcType=VARCHAR}");
        sql.SET("clientName = #{record.clientname,jdbcType=VARCHAR}");
        sql.SET("channel = #{record.channel,jdbcType=VARCHAR}");
        sql.SET("gateway = #{record.gateway,jdbcType=INTEGER}");
        sql.SET("plat = #{record.plat,jdbcType=INTEGER}");
        sql.SET("consumeAmount = #{record.consumeamount,jdbcType=INTEGER}");
        sql.SET("rechargeAmount = #{record.rechargeamount,jdbcType=INTEGER}");
        sql.SET("refundAmount = #{record.refundamount,jdbcType=INTEGER}");
        sql.SET("payConsumeId = #{record.payconsumeid,jdbcType=VARCHAR}");
        sql.SET("payRechargeId = #{record.payrechargeid,jdbcType=VARCHAR}");
        sql.SET("payRefundId = #{record.payrefundid,jdbcType=VARCHAR}");
        sql.SET("status = #{record.status,jdbcType=INTEGER}");
        sql.SET("rawData = #{record.rawdata,jdbcType=VARCHAR}");
        sql.SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        sql.SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        
        FinalOrderPayDetailCriteria example = (FinalOrderPayDetailCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpaydetail`
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(FinalOrderPayDetail record) {
        SQL sql = new SQL();
        sql.UPDATE("`orderpaydetail`");
        
        if (record.getOrderid() != null) {
            sql.SET("orderId = #{orderid,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderpaytype() != null) {
            sql.SET("orderPayType = #{orderpaytype,jdbcType=INTEGER}");
        }
        
        if (record.getClienttype() != null) {
            sql.SET("clientType = #{clienttype,jdbcType=VARCHAR}");
        }
        
        if (record.getClientid() != null) {
            sql.SET("clientId = #{clientid,jdbcType=VARCHAR}");
        }
        
        if (record.getClientname() != null) {
            sql.SET("clientName = #{clientname,jdbcType=VARCHAR}");
        }
        
        if (record.getChannel() != null) {
            sql.SET("channel = #{channel,jdbcType=VARCHAR}");
        }
        
        if (record.getGateway() != null) {
            sql.SET("gateway = #{gateway,jdbcType=INTEGER}");
        }
        
        if (record.getPlat() != null) {
            sql.SET("plat = #{plat,jdbcType=INTEGER}");
        }
        
        if (record.getConsumeamount() != null) {
            sql.SET("consumeAmount = #{consumeamount,jdbcType=INTEGER}");
        }
        
        if (record.getRechargeamount() != null) {
            sql.SET("rechargeAmount = #{rechargeamount,jdbcType=INTEGER}");
        }
        
        if (record.getRefundamount() != null) {
            sql.SET("refundAmount = #{refundamount,jdbcType=INTEGER}");
        }
        
        if (record.getPayconsumeid() != null) {
            sql.SET("payConsumeId = #{payconsumeid,jdbcType=VARCHAR}");
        }
        
        if (record.getPayrechargeid() != null) {
            sql.SET("payRechargeId = #{payrechargeid,jdbcType=VARCHAR}");
        }
        
        if (record.getPayrefundid() != null) {
            sql.SET("payRefundId = #{payrefundid,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=INTEGER}");
        }
        
        if (record.getRawdata() != null) {
            sql.SET("rawData = #{rawdata,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.SET("updated_at = #{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.SET("created_at = #{createdAt,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("orderPayDetailId = #{orderpaydetailid,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderpaydetail`
     *
     * @mbggenerated
     */
    protected void applyWhere(SQL sql, FinalOrderPayDetailCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}