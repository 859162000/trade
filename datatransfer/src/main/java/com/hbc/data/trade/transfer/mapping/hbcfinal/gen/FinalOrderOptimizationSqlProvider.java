package com.hbc.data.trade.transfer.mapping.hbcfinal.gen;

import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalOrderOptimization;
import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalOrderOptimizationCriteria.Criteria;
import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalOrderOptimizationCriteria.Criterion;
import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalOrderOptimizationCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class FinalOrderOptimizationSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderoptimization`
     *
     * @mbggenerated
     */
    public String countByExample(FinalOrderOptimizationCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("`orderoptimization`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderoptimization`
     *
     * @mbggenerated
     */
    public String deleteByExample(FinalOrderOptimizationCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("`orderoptimization`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderoptimization`
     *
     * @mbggenerated
     */
    public String insertSelective(FinalOrderOptimization record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("`orderoptimization`");
        
        if (record.getOrderoptimizationid() != null) {
            sql.VALUES("orderOptimizationId", "#{orderoptimizationid,jdbcType=VARCHAR}");
        }
        
        if (record.getOptimizationorderid() != null) {
            sql.VALUES("optimizationOrderId", "#{optimizationorderid,jdbcType=VARCHAR}");
        }
        
        if (record.getClientprice() != null) {
            sql.VALUES("clientPrice", "#{clientprice,jdbcType=INTEGER}");
        }
        
        if (record.getPrice() != null) {
            sql.VALUES("price", "#{price,jdbcType=INTEGER}");
        }
        
        if (record.getGuideprice() != null) {
            sql.VALUES("guidePrice", "#{guideprice,jdbcType=INTEGER}");
        }
        
        if (record.getMatchorderid() != null) {
            sql.VALUES("matchOrderId", "#{matchorderid,jdbcType=VARCHAR}");
        }
        
        if (record.getMatchordertype() != null) {
            sql.VALUES("matchOrderType", "#{matchordertype,jdbcType=INTEGER}");
        }
        
        if (record.getMatchguideid() != null) {
            sql.VALUES("matchGuideId", "#{matchguideid,jdbcType=INTEGER}");
        }
        
        if (record.getMatchorderservicedate() != null) {
            sql.VALUES("matchOrderServiceDate", "#{matchorderservicedate,jdbcType=VARCHAR}");
        }
        
        if (record.getIsmatch() != null) {
            sql.VALUES("isMatch", "#{ismatch,jdbcType=INTEGER}");
        }
        
        if (record.getAddress() != null) {
            sql.VALUES("address", "#{address,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.VALUES("updated_at", "#{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.VALUES("created_at", "#{createdAt,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderoptimization`
     *
     * @mbggenerated
     */
    public String selectByExample(FinalOrderOptimizationCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("orderOptimizationId");
        } else {
            sql.SELECT("orderOptimizationId");
        }
        sql.SELECT("optimizationOrderId");
        sql.SELECT("clientPrice");
        sql.SELECT("price");
        sql.SELECT("guidePrice");
        sql.SELECT("matchOrderId");
        sql.SELECT("matchOrderType");
        sql.SELECT("matchGuideId");
        sql.SELECT("matchOrderServiceDate");
        sql.SELECT("isMatch");
        sql.SELECT("address");
        sql.SELECT("updated_at");
        sql.SELECT("created_at");
        sql.FROM("`orderoptimization`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderoptimization`
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        FinalOrderOptimization record = (FinalOrderOptimization) parameter.get("record");
        FinalOrderOptimizationCriteria example = (FinalOrderOptimizationCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("`orderoptimization`");
        
        if (record.getOrderoptimizationid() != null) {
            sql.SET("orderOptimizationId = #{record.orderoptimizationid,jdbcType=VARCHAR}");
        }
        
        if (record.getOptimizationorderid() != null) {
            sql.SET("optimizationOrderId = #{record.optimizationorderid,jdbcType=VARCHAR}");
        }
        
        if (record.getClientprice() != null) {
            sql.SET("clientPrice = #{record.clientprice,jdbcType=INTEGER}");
        }
        
        if (record.getPrice() != null) {
            sql.SET("price = #{record.price,jdbcType=INTEGER}");
        }
        
        if (record.getGuideprice() != null) {
            sql.SET("guidePrice = #{record.guideprice,jdbcType=INTEGER}");
        }
        
        if (record.getMatchorderid() != null) {
            sql.SET("matchOrderId = #{record.matchorderid,jdbcType=VARCHAR}");
        }
        
        if (record.getMatchordertype() != null) {
            sql.SET("matchOrderType = #{record.matchordertype,jdbcType=INTEGER}");
        }
        
        if (record.getMatchguideid() != null) {
            sql.SET("matchGuideId = #{record.matchguideid,jdbcType=INTEGER}");
        }
        
        if (record.getMatchorderservicedate() != null) {
            sql.SET("matchOrderServiceDate = #{record.matchorderservicedate,jdbcType=VARCHAR}");
        }
        
        if (record.getIsmatch() != null) {
            sql.SET("isMatch = #{record.ismatch,jdbcType=INTEGER}");
        }
        
        if (record.getAddress() != null) {
            sql.SET("address = #{record.address,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderoptimization`
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`orderoptimization`");
        
        sql.SET("orderOptimizationId = #{record.orderoptimizationid,jdbcType=VARCHAR}");
        sql.SET("optimizationOrderId = #{record.optimizationorderid,jdbcType=VARCHAR}");
        sql.SET("clientPrice = #{record.clientprice,jdbcType=INTEGER}");
        sql.SET("price = #{record.price,jdbcType=INTEGER}");
        sql.SET("guidePrice = #{record.guideprice,jdbcType=INTEGER}");
        sql.SET("matchOrderId = #{record.matchorderid,jdbcType=VARCHAR}");
        sql.SET("matchOrderType = #{record.matchordertype,jdbcType=INTEGER}");
        sql.SET("matchGuideId = #{record.matchguideid,jdbcType=INTEGER}");
        sql.SET("matchOrderServiceDate = #{record.matchorderservicedate,jdbcType=VARCHAR}");
        sql.SET("isMatch = #{record.ismatch,jdbcType=INTEGER}");
        sql.SET("address = #{record.address,jdbcType=VARCHAR}");
        sql.SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        sql.SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        
        FinalOrderOptimizationCriteria example = (FinalOrderOptimizationCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderoptimization`
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(FinalOrderOptimization record) {
        SQL sql = new SQL();
        sql.UPDATE("`orderoptimization`");
        
        if (record.getOptimizationorderid() != null) {
            sql.SET("optimizationOrderId = #{optimizationorderid,jdbcType=VARCHAR}");
        }
        
        if (record.getClientprice() != null) {
            sql.SET("clientPrice = #{clientprice,jdbcType=INTEGER}");
        }
        
        if (record.getPrice() != null) {
            sql.SET("price = #{price,jdbcType=INTEGER}");
        }
        
        if (record.getGuideprice() != null) {
            sql.SET("guidePrice = #{guideprice,jdbcType=INTEGER}");
        }
        
        if (record.getMatchorderid() != null) {
            sql.SET("matchOrderId = #{matchorderid,jdbcType=VARCHAR}");
        }
        
        if (record.getMatchordertype() != null) {
            sql.SET("matchOrderType = #{matchordertype,jdbcType=INTEGER}");
        }
        
        if (record.getMatchguideid() != null) {
            sql.SET("matchGuideId = #{matchguideid,jdbcType=INTEGER}");
        }
        
        if (record.getMatchorderservicedate() != null) {
            sql.SET("matchOrderServiceDate = #{matchorderservicedate,jdbcType=VARCHAR}");
        }
        
        if (record.getIsmatch() != null) {
            sql.SET("isMatch = #{ismatch,jdbcType=INTEGER}");
        }
        
        if (record.getAddress() != null) {
            sql.SET("address = #{address,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.SET("updated_at = #{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.SET("created_at = #{createdAt,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("orderOptimizationId = #{orderoptimizationid,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `orderoptimization`
     *
     * @mbggenerated
     */
    protected void applyWhere(SQL sql, FinalOrderOptimizationCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}