package com.hbc.data.trade.transfer.mapping.hbcfinal.gen;

import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalOrderBean;
import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalOrderBeanCriteria.Criteria;
import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalOrderBeanCriteria.Criterion;
import com.hbc.data.trade.transfer.mapping.hbcfinal.gen.bean.FinalOrderBeanCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class FinalOrderBeanSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `order`
     *
     * @mbggenerated
     */
    public String countByExample(FinalOrderBeanCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("`order`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `order`
     *
     * @mbggenerated
     */
    public String deleteByExample(FinalOrderBeanCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("`order`");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `order`
     *
     * @mbggenerated
     */
    public String insertSelective(FinalOrderBean record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("`order`");
        
        if (record.getOrderid() != null) {
            sql.VALUES("orderId", "#{orderid,jdbcType=VARCHAR}");
        }
        
        if (record.getOrdersn() != null) {
            sql.VALUES("orderSN", "#{ordersn,jdbcType=VARCHAR}");
        }
        
        if (record.getPlaceid() != null) {
            sql.VALUES("placeId", "#{placeid,jdbcType=INTEGER}");
        }
        
        if (record.getPlacecityid() != null) {
            sql.VALUES("placeCityId", "#{placecityid,jdbcType=INTEGER}");
        }
        
        if (record.getServicedate() != null) {
            sql.VALUES("serviceDate", "#{servicedate,jdbcType=DATE}");
        }
        
        if (record.getServicetime() != null) {
            sql.VALUES("serviceTime", "#{servicetime,jdbcType=TIME}");
        }
        
        if (record.getServicealldatedisplay() != null) {
            sql.VALUES("serviceAllDateDisplay", "#{servicealldatedisplay,jdbcType=VARCHAR}");
        }
        
        if (record.getLocalday() != null) {
            sql.VALUES("localDay", "#{localday,jdbcType=INTEGER}");
        }
        
        if (record.getNonlocalday() != null) {
            sql.VALUES("nonlocalDay", "#{nonlocalday,jdbcType=INTEGER}");
        }
        
        if (record.getDeparture() != null) {
            sql.VALUES("departure", "#{departure,jdbcType=VARCHAR}");
        }
        
        if (record.getDestination() != null) {
            sql.VALUES("destination", "#{destination,jdbcType=VARCHAR}");
        }
        
        if (record.getDistance() != null) {
            sql.VALUES("distance", "#{distance,jdbcType=DECIMAL}");
        }
        
        if (record.getDeptdetailaddress() != null) {
            sql.VALUES("deptDetailAddress", "#{deptdetailaddress,jdbcType=VARCHAR}");
        }
        
        if (record.getDestdetailaddress() != null) {
            sql.VALUES("destDetailAddress", "#{destdetailaddress,jdbcType=VARCHAR}");
        }
        
        if (record.getSeatcategory() != null) {
            sql.VALUES("seatCategory", "#{seatcategory,jdbcType=TINYINT}");
        }
        
        if (record.getType() != null) {
            sql.VALUES("type", "#{type,jdbcType=INTEGER}");
        }
        
        if (record.getPrice() != null) {
            sql.VALUES("price", "#{price,jdbcType=INTEGER}");
        }
        
        if (record.getClientprice() != null) {
            sql.VALUES("clientPrice", "#{clientprice,jdbcType=INTEGER}");
        }
        
        if (record.getGuideprice() != null) {
            sql.VALUES("guidePrice", "#{guideprice,jdbcType=INTEGER}");
        }
        
        if (record.getOrdertype() != null) {
            sql.VALUES("orderType", "#{ordertype,jdbcType=INTEGER}");
        }
        
        if (record.getUserguideid() != null) {
            sql.VALUES("userGuideId", "#{userguideid,jdbcType=INTEGER}");
        }
        
        if (record.getPreguideid() != null) {
            sql.VALUES("preGuideId", "#{preguideid,jdbcType=INTEGER}");
        }
        
        if (record.getGuideid() != null) {
            sql.VALUES("guideId", "#{guideid,jdbcType=INTEGER}");
        }
        
        if (record.getClienttype() != null) {
            sql.VALUES("clientType", "#{clienttype,jdbcType=TINYINT}");
        }
        
        if (record.getClientid() != null) {
            sql.VALUES("clientId", "#{clientid,jdbcType=VARCHAR}");
        }
        
        if (record.getUserpassportid() != null) {
            sql.VALUES("userpassportId", "#{userpassportid,jdbcType=VARCHAR}");
        }
        
        if (record.getAdminid() != null) {
            sql.VALUES("adminId", "#{adminid,jdbcType=INTEGER}");
        }
        
        if (record.getStatus() != null) {
            sql.VALUES("status", "#{status,jdbcType=INTEGER}");
        }
        
        if (record.getPaystatus() != null) {
            sql.VALUES("payStatus", "#{paystatus,jdbcType=INTEGER}");
        }
        
        if (record.getHasrefund() != null) {
            sql.VALUES("hasRefund", "#{hasrefund,jdbcType=INTEGER}");
        }
        
        if (record.getImtoken() != null) {
            sql.VALUES("imToken", "#{imtoken,jdbcType=VARCHAR}");
        }
        
        if (record.getDeliveredpriority() != null) {
            sql.VALUES("deliveredPriority", "#{deliveredpriority,jdbcType=INTEGER}");
        }
        
        if (record.getDealordertime() != null) {
            sql.VALUES("dealOrderTime", "#{dealordertime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRedelivertype() != null) {
            sql.VALUES("reDeliverType", "#{redelivertype,jdbcType=INTEGER}");
        }
        
        if (record.getRedelivercount() != null) {
            sql.VALUES("reDeliverCount", "#{redelivercount,jdbcType=INTEGER}");
        }
        
        if (record.getDelivertime() != null) {
            sql.VALUES("deliverTime", "#{delivertime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getGuidecommentstatus() != null) {
            sql.VALUES("guideCommentStatus", "#{guidecommentstatus,jdbcType=INTEGER}");
        }
        
        if (record.getUsercommentstatus() != null) {
            sql.VALUES("userCommentStatus", "#{usercommentstatus,jdbcType=INTEGER}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.VALUES("updated_at", "#{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRefid() != null) {
            sql.VALUES("refId", "#{refid,jdbcType=VARCHAR}");
        }
        
        if (record.getMode() != null) {
            sql.VALUES("mode", "#{mode,jdbcType=INTEGER}");
        }
        
        if (record.getServicecar() != null) {
            sql.VALUES("serviceCar", "#{servicecar,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceguide() != null) {
            sql.VALUES("serviceGuide", "#{serviceguide,jdbcType=VARCHAR}");
        }
        
        if (record.getServicecarid() != null) {
            sql.VALUES("serviceCarId", "#{servicecarid,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceguideid() != null) {
            sql.VALUES("serviceGuideId", "#{serviceguideid,jdbcType=VARCHAR}");
        }
        
        if (record.getAgencytype() != null) {
            sql.VALUES("agencyType", "#{agencytype,jdbcType=INTEGER}");
        }
        
        if (record.getDeletedAt() != null) {
            sql.VALUES("deleted_at", "#{deletedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.VALUES("created_at", "#{createdAt,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `order`
     *
     * @mbggenerated
     */
    public String selectByExample(FinalOrderBeanCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("orderId");
        } else {
            sql.SELECT("orderId");
        }
        sql.SELECT("orderSN");
        sql.SELECT("placeId");
        sql.SELECT("placeCityId");
        sql.SELECT("serviceDate");
        sql.SELECT("serviceTime");
        sql.SELECT("serviceAllDateDisplay");
        sql.SELECT("localDay");
        sql.SELECT("nonlocalDay");
        sql.SELECT("departure");
        sql.SELECT("destination");
        sql.SELECT("distance");
        sql.SELECT("deptDetailAddress");
        sql.SELECT("destDetailAddress");
        sql.SELECT("seatCategory");
        sql.SELECT("type");
        sql.SELECT("price");
        sql.SELECT("clientPrice");
        sql.SELECT("guidePrice");
        sql.SELECT("orderType");
        sql.SELECT("userGuideId");
        sql.SELECT("preGuideId");
        sql.SELECT("guideId");
        sql.SELECT("clientType");
        sql.SELECT("clientId");
        sql.SELECT("userpassportId");
        sql.SELECT("adminId");
        sql.SELECT("status");
        sql.SELECT("payStatus");
        sql.SELECT("hasRefund");
        sql.SELECT("imToken");
        sql.SELECT("deliveredPriority");
        sql.SELECT("dealOrderTime");
        sql.SELECT("reDeliverType");
        sql.SELECT("reDeliverCount");
        sql.SELECT("deliverTime");
        sql.SELECT("guideCommentStatus");
        sql.SELECT("userCommentStatus");
        sql.SELECT("updated_at");
        sql.SELECT("refId");
        sql.SELECT("mode");
        sql.SELECT("serviceCar");
        sql.SELECT("serviceGuide");
        sql.SELECT("serviceCarId");
        sql.SELECT("serviceGuideId");
        sql.SELECT("agencyType");
        sql.SELECT("deleted_at");
        sql.SELECT("created_at");
        sql.FROM("`order`");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
         String sqlStr = sql.toString();
        if(example.getPage()!=null){
            sqlStr = sqlStr+" limit "+example.getPage().getOffset()+","+example.getPage().getLimit()+"";
             }
            return sqlStr;
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `order`
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        FinalOrderBean record = (FinalOrderBean) parameter.get("record");
        FinalOrderBeanCriteria example = (FinalOrderBeanCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("`order`");
        
        if (record.getOrderid() != null) {
            sql.SET("orderId = #{record.orderid,jdbcType=VARCHAR}");
        }
        
        if (record.getOrdersn() != null) {
            sql.SET("orderSN = #{record.ordersn,jdbcType=VARCHAR}");
        }
        
        if (record.getPlaceid() != null) {
            sql.SET("placeId = #{record.placeid,jdbcType=INTEGER}");
        }
        
        if (record.getPlacecityid() != null) {
            sql.SET("placeCityId = #{record.placecityid,jdbcType=INTEGER}");
        }
        
        if (record.getServicedate() != null) {
            sql.SET("serviceDate = #{record.servicedate,jdbcType=DATE}");
        }
        
        if (record.getServicetime() != null) {
            sql.SET("serviceTime = #{record.servicetime,jdbcType=TIME}");
        }
        
        if (record.getServicealldatedisplay() != null) {
            sql.SET("serviceAllDateDisplay = #{record.servicealldatedisplay,jdbcType=VARCHAR}");
        }
        
        if (record.getLocalday() != null) {
            sql.SET("localDay = #{record.localday,jdbcType=INTEGER}");
        }
        
        if (record.getNonlocalday() != null) {
            sql.SET("nonlocalDay = #{record.nonlocalday,jdbcType=INTEGER}");
        }
        
        if (record.getDeparture() != null) {
            sql.SET("departure = #{record.departure,jdbcType=VARCHAR}");
        }
        
        if (record.getDestination() != null) {
            sql.SET("destination = #{record.destination,jdbcType=VARCHAR}");
        }
        
        if (record.getDistance() != null) {
            sql.SET("distance = #{record.distance,jdbcType=DECIMAL}");
        }
        
        if (record.getDeptdetailaddress() != null) {
            sql.SET("deptDetailAddress = #{record.deptdetailaddress,jdbcType=VARCHAR}");
        }
        
        if (record.getDestdetailaddress() != null) {
            sql.SET("destDetailAddress = #{record.destdetailaddress,jdbcType=VARCHAR}");
        }
        
        if (record.getSeatcategory() != null) {
            sql.SET("seatCategory = #{record.seatcategory,jdbcType=TINYINT}");
        }
        
        if (record.getType() != null) {
            sql.SET("type = #{record.type,jdbcType=INTEGER}");
        }
        
        if (record.getPrice() != null) {
            sql.SET("price = #{record.price,jdbcType=INTEGER}");
        }
        
        if (record.getClientprice() != null) {
            sql.SET("clientPrice = #{record.clientprice,jdbcType=INTEGER}");
        }
        
        if (record.getGuideprice() != null) {
            sql.SET("guidePrice = #{record.guideprice,jdbcType=INTEGER}");
        }
        
        if (record.getOrdertype() != null) {
            sql.SET("orderType = #{record.ordertype,jdbcType=INTEGER}");
        }
        
        if (record.getUserguideid() != null) {
            sql.SET("userGuideId = #{record.userguideid,jdbcType=INTEGER}");
        }
        
        if (record.getPreguideid() != null) {
            sql.SET("preGuideId = #{record.preguideid,jdbcType=INTEGER}");
        }
        
        if (record.getGuideid() != null) {
            sql.SET("guideId = #{record.guideid,jdbcType=INTEGER}");
        }
        
        if (record.getClienttype() != null) {
            sql.SET("clientType = #{record.clienttype,jdbcType=TINYINT}");
        }
        
        if (record.getClientid() != null) {
            sql.SET("clientId = #{record.clientid,jdbcType=VARCHAR}");
        }
        
        if (record.getUserpassportid() != null) {
            sql.SET("userpassportId = #{record.userpassportid,jdbcType=VARCHAR}");
        }
        
        if (record.getAdminid() != null) {
            sql.SET("adminId = #{record.adminid,jdbcType=INTEGER}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{record.status,jdbcType=INTEGER}");
        }
        
        if (record.getPaystatus() != null) {
            sql.SET("payStatus = #{record.paystatus,jdbcType=INTEGER}");
        }
        
        if (record.getHasrefund() != null) {
            sql.SET("hasRefund = #{record.hasrefund,jdbcType=INTEGER}");
        }
        
        if (record.getImtoken() != null) {
            sql.SET("imToken = #{record.imtoken,jdbcType=VARCHAR}");
        }
        
        if (record.getDeliveredpriority() != null) {
            sql.SET("deliveredPriority = #{record.deliveredpriority,jdbcType=INTEGER}");
        }
        
        if (record.getDealordertime() != null) {
            sql.SET("dealOrderTime = #{record.dealordertime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRedelivertype() != null) {
            sql.SET("reDeliverType = #{record.redelivertype,jdbcType=INTEGER}");
        }
        
        if (record.getRedelivercount() != null) {
            sql.SET("reDeliverCount = #{record.redelivercount,jdbcType=INTEGER}");
        }
        
        if (record.getDelivertime() != null) {
            sql.SET("deliverTime = #{record.delivertime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getGuidecommentstatus() != null) {
            sql.SET("guideCommentStatus = #{record.guidecommentstatus,jdbcType=INTEGER}");
        }
        
        if (record.getUsercommentstatus() != null) {
            sql.SET("userCommentStatus = #{record.usercommentstatus,jdbcType=INTEGER}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRefid() != null) {
            sql.SET("refId = #{record.refid,jdbcType=VARCHAR}");
        }
        
        if (record.getMode() != null) {
            sql.SET("mode = #{record.mode,jdbcType=INTEGER}");
        }
        
        if (record.getServicecar() != null) {
            sql.SET("serviceCar = #{record.servicecar,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceguide() != null) {
            sql.SET("serviceGuide = #{record.serviceguide,jdbcType=VARCHAR}");
        }
        
        if (record.getServicecarid() != null) {
            sql.SET("serviceCarId = #{record.servicecarid,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceguideid() != null) {
            sql.SET("serviceGuideId = #{record.serviceguideid,jdbcType=VARCHAR}");
        }
        
        if (record.getAgencytype() != null) {
            sql.SET("agencyType = #{record.agencytype,jdbcType=INTEGER}");
        }
        
        if (record.getDeletedAt() != null) {
            sql.SET("deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `order`
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("`order`");
        
        sql.SET("orderId = #{record.orderid,jdbcType=VARCHAR}");
        sql.SET("orderSN = #{record.ordersn,jdbcType=VARCHAR}");
        sql.SET("placeId = #{record.placeid,jdbcType=INTEGER}");
        sql.SET("placeCityId = #{record.placecityid,jdbcType=INTEGER}");
        sql.SET("serviceDate = #{record.servicedate,jdbcType=DATE}");
        sql.SET("serviceTime = #{record.servicetime,jdbcType=TIME}");
        sql.SET("serviceAllDateDisplay = #{record.servicealldatedisplay,jdbcType=VARCHAR}");
        sql.SET("localDay = #{record.localday,jdbcType=INTEGER}");
        sql.SET("nonlocalDay = #{record.nonlocalday,jdbcType=INTEGER}");
        sql.SET("departure = #{record.departure,jdbcType=VARCHAR}");
        sql.SET("destination = #{record.destination,jdbcType=VARCHAR}");
        sql.SET("distance = #{record.distance,jdbcType=DECIMAL}");
        sql.SET("deptDetailAddress = #{record.deptdetailaddress,jdbcType=VARCHAR}");
        sql.SET("destDetailAddress = #{record.destdetailaddress,jdbcType=VARCHAR}");
        sql.SET("seatCategory = #{record.seatcategory,jdbcType=TINYINT}");
        sql.SET("type = #{record.type,jdbcType=INTEGER}");
        sql.SET("price = #{record.price,jdbcType=INTEGER}");
        sql.SET("clientPrice = #{record.clientprice,jdbcType=INTEGER}");
        sql.SET("guidePrice = #{record.guideprice,jdbcType=INTEGER}");
        sql.SET("orderType = #{record.ordertype,jdbcType=INTEGER}");
        sql.SET("userGuideId = #{record.userguideid,jdbcType=INTEGER}");
        sql.SET("preGuideId = #{record.preguideid,jdbcType=INTEGER}");
        sql.SET("guideId = #{record.guideid,jdbcType=INTEGER}");
        sql.SET("clientType = #{record.clienttype,jdbcType=TINYINT}");
        sql.SET("clientId = #{record.clientid,jdbcType=VARCHAR}");
        sql.SET("userpassportId = #{record.userpassportid,jdbcType=VARCHAR}");
        sql.SET("adminId = #{record.adminid,jdbcType=INTEGER}");
        sql.SET("status = #{record.status,jdbcType=INTEGER}");
        sql.SET("payStatus = #{record.paystatus,jdbcType=INTEGER}");
        sql.SET("hasRefund = #{record.hasrefund,jdbcType=INTEGER}");
        sql.SET("imToken = #{record.imtoken,jdbcType=VARCHAR}");
        sql.SET("deliveredPriority = #{record.deliveredpriority,jdbcType=INTEGER}");
        sql.SET("dealOrderTime = #{record.dealordertime,jdbcType=TIMESTAMP}");
        sql.SET("reDeliverType = #{record.redelivertype,jdbcType=INTEGER}");
        sql.SET("reDeliverCount = #{record.redelivercount,jdbcType=INTEGER}");
        sql.SET("deliverTime = #{record.delivertime,jdbcType=TIMESTAMP}");
        sql.SET("guideCommentStatus = #{record.guidecommentstatus,jdbcType=INTEGER}");
        sql.SET("userCommentStatus = #{record.usercommentstatus,jdbcType=INTEGER}");
        sql.SET("updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}");
        sql.SET("refId = #{record.refid,jdbcType=VARCHAR}");
        sql.SET("mode = #{record.mode,jdbcType=INTEGER}");
        sql.SET("serviceCar = #{record.servicecar,jdbcType=VARCHAR}");
        sql.SET("serviceGuide = #{record.serviceguide,jdbcType=VARCHAR}");
        sql.SET("serviceCarId = #{record.servicecarid,jdbcType=VARCHAR}");
        sql.SET("serviceGuideId = #{record.serviceguideid,jdbcType=VARCHAR}");
        sql.SET("agencyType = #{record.agencytype,jdbcType=INTEGER}");
        sql.SET("deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP}");
        sql.SET("created_at = #{record.createdAt,jdbcType=TIMESTAMP}");
        
        FinalOrderBeanCriteria example = (FinalOrderBeanCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `order`
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(FinalOrderBean record) {
        SQL sql = new SQL();
        sql.UPDATE("`order`");
        
        if (record.getOrdersn() != null) {
            sql.SET("orderSN = #{ordersn,jdbcType=VARCHAR}");
        }
        
        if (record.getPlaceid() != null) {
            sql.SET("placeId = #{placeid,jdbcType=INTEGER}");
        }
        
        if (record.getPlacecityid() != null) {
            sql.SET("placeCityId = #{placecityid,jdbcType=INTEGER}");
        }
        
        if (record.getServicedate() != null) {
            sql.SET("serviceDate = #{servicedate,jdbcType=DATE}");
        }
        
        if (record.getServicetime() != null) {
            sql.SET("serviceTime = #{servicetime,jdbcType=TIME}");
        }
        
        if (record.getServicealldatedisplay() != null) {
            sql.SET("serviceAllDateDisplay = #{servicealldatedisplay,jdbcType=VARCHAR}");
        }
        
        if (record.getLocalday() != null) {
            sql.SET("localDay = #{localday,jdbcType=INTEGER}");
        }
        
        if (record.getNonlocalday() != null) {
            sql.SET("nonlocalDay = #{nonlocalday,jdbcType=INTEGER}");
        }
        
        if (record.getDeparture() != null) {
            sql.SET("departure = #{departure,jdbcType=VARCHAR}");
        }
        
        if (record.getDestination() != null) {
            sql.SET("destination = #{destination,jdbcType=VARCHAR}");
        }
        
        if (record.getDistance() != null) {
            sql.SET("distance = #{distance,jdbcType=DECIMAL}");
        }
        
        if (record.getDeptdetailaddress() != null) {
            sql.SET("deptDetailAddress = #{deptdetailaddress,jdbcType=VARCHAR}");
        }
        
        if (record.getDestdetailaddress() != null) {
            sql.SET("destDetailAddress = #{destdetailaddress,jdbcType=VARCHAR}");
        }
        
        if (record.getSeatcategory() != null) {
            sql.SET("seatCategory = #{seatcategory,jdbcType=TINYINT}");
        }
        
        if (record.getType() != null) {
            sql.SET("type = #{type,jdbcType=INTEGER}");
        }
        
        if (record.getPrice() != null) {
            sql.SET("price = #{price,jdbcType=INTEGER}");
        }
        
        if (record.getClientprice() != null) {
            sql.SET("clientPrice = #{clientprice,jdbcType=INTEGER}");
        }
        
        if (record.getGuideprice() != null) {
            sql.SET("guidePrice = #{guideprice,jdbcType=INTEGER}");
        }
        
        if (record.getOrdertype() != null) {
            sql.SET("orderType = #{ordertype,jdbcType=INTEGER}");
        }
        
        if (record.getUserguideid() != null) {
            sql.SET("userGuideId = #{userguideid,jdbcType=INTEGER}");
        }
        
        if (record.getPreguideid() != null) {
            sql.SET("preGuideId = #{preguideid,jdbcType=INTEGER}");
        }
        
        if (record.getGuideid() != null) {
            sql.SET("guideId = #{guideid,jdbcType=INTEGER}");
        }
        
        if (record.getClienttype() != null) {
            sql.SET("clientType = #{clienttype,jdbcType=TINYINT}");
        }
        
        if (record.getClientid() != null) {
            sql.SET("clientId = #{clientid,jdbcType=VARCHAR}");
        }
        
        if (record.getUserpassportid() != null) {
            sql.SET("userpassportId = #{userpassportid,jdbcType=VARCHAR}");
        }
        
        if (record.getAdminid() != null) {
            sql.SET("adminId = #{adminid,jdbcType=INTEGER}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=INTEGER}");
        }
        
        if (record.getPaystatus() != null) {
            sql.SET("payStatus = #{paystatus,jdbcType=INTEGER}");
        }
        
        if (record.getHasrefund() != null) {
            sql.SET("hasRefund = #{hasrefund,jdbcType=INTEGER}");
        }
        
        if (record.getImtoken() != null) {
            sql.SET("imToken = #{imtoken,jdbcType=VARCHAR}");
        }
        
        if (record.getDeliveredpriority() != null) {
            sql.SET("deliveredPriority = #{deliveredpriority,jdbcType=INTEGER}");
        }
        
        if (record.getDealordertime() != null) {
            sql.SET("dealOrderTime = #{dealordertime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRedelivertype() != null) {
            sql.SET("reDeliverType = #{redelivertype,jdbcType=INTEGER}");
        }
        
        if (record.getRedelivercount() != null) {
            sql.SET("reDeliverCount = #{redelivercount,jdbcType=INTEGER}");
        }
        
        if (record.getDelivertime() != null) {
            sql.SET("deliverTime = #{delivertime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getGuidecommentstatus() != null) {
            sql.SET("guideCommentStatus = #{guidecommentstatus,jdbcType=INTEGER}");
        }
        
        if (record.getUsercommentstatus() != null) {
            sql.SET("userCommentStatus = #{usercommentstatus,jdbcType=INTEGER}");
        }
        
        if (record.getUpdatedAt() != null) {
            sql.SET("updated_at = #{updatedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRefid() != null) {
            sql.SET("refId = #{refid,jdbcType=VARCHAR}");
        }
        
        if (record.getMode() != null) {
            sql.SET("mode = #{mode,jdbcType=INTEGER}");
        }
        
        if (record.getServicecar() != null) {
            sql.SET("serviceCar = #{servicecar,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceguide() != null) {
            sql.SET("serviceGuide = #{serviceguide,jdbcType=VARCHAR}");
        }
        
        if (record.getServicecarid() != null) {
            sql.SET("serviceCarId = #{servicecarid,jdbcType=VARCHAR}");
        }
        
        if (record.getServiceguideid() != null) {
            sql.SET("serviceGuideId = #{serviceguideid,jdbcType=VARCHAR}");
        }
        
        if (record.getAgencytype() != null) {
            sql.SET("agencyType = #{agencytype,jdbcType=INTEGER}");
        }
        
        if (record.getDeletedAt() != null) {
            sql.SET("deleted_at = #{deletedAt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatedAt() != null) {
            sql.SET("created_at = #{createdAt,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("orderId = #{orderid,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table `order`
     *
     * @mbggenerated
     */
    protected void applyWhere(SQL sql, FinalOrderBeanCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}